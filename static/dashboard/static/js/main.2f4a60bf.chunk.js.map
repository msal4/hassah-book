{"version":3,"sources":["components/ProtectedRoute.tsx","generated/graphql.tsx","components/Error.tsx","components/Loading.tsx","components/Sidebar.tsx","components/BackButton.tsx","components/Input.tsx","components/ItemList.tsx","hooks/query.ts","pages/AdminsPage.tsx","utils/product.ts","pages/AuthorsPage.tsx","pages/CategoriesPage.tsx","pages/CollectionsPage.tsx","utils/logout.ts","pages/LogoutPage.tsx","components/Select.tsx","pages/OrdersPage.tsx","pages/ProductsPage.tsx","pages/PublishersPage.tsx","pages/RequestsPages.tsx","pages/UsersPage.tsx","pages/HomePage.tsx","pages/LoginPage.tsx","AppRouter.tsx","utils/client.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ProtectedRoute","props","localStorage","getItem","to","OrderBy","OrderStatus","ProductStatus","UserRequestStatus","Error","error","message","className","Loading","loading","Sidebar","path","name","style","minWidth","MenuItem","s","useRouteMatch","exact","defaultOptions","AdminFragmentDoc","gql","LoginResponseFragmentDoc","UserFragmentDoc","AuthorFragmentDoc","PublisherFragmentDoc","CategoryFragmentDoc","CollectionFragmentDoc","ProductFragmentDoc","PurchaseFragmentDoc","OrderFragmentDoc","PaginatedProductResponseFragmentDoc","UserRequestFragmentDoc","CreateAdminDocument","CreateAuthorDocument","CreateCategoryDocument","CreateCollectionDocument","CreateProductDocument","CreatePublisherDocument","CreateUserDocument","DeleteAdminDocument","DeleteAuthorDocument","DeleteCategoryDocument","DeleteCollectionDocument","DeleteProductDocument","DeletePublisherDocument","DeleteUserDocument","LoginDocument","UpdateAdminDocument","UpdateAuthorDocument","UpdateCategoryDocument","UpdateCollectionDocument","UpdateOrderDocument","useUpdateOrderMutation","baseOptions","options","Apollo","UpdateProductDocument","useUpdateProductMutation","UpdatePublisherDocument","UpdateUserRequestDocument","useUpdateUserRequestMutation","UpdateUserDocument","AdminDocument","AdminsDocument","AuthorDocument","AuthorsDocument","useAuthorsQuery","CategoriesDocument","useCategoriesQuery","CategoryDocument","CollectionDocument","CollectionsDocument","useCollectionsQuery","DashboardDocument","OrderDocument","OrdersDocument","ProductDocument","ProductsDocument","useProductsQuery","PublisherDocument","PublishersDocument","usePublishersQuery","UserDocument","UserRequestsDocument","UsersDocument","BackButton","history","useHistory","onClick","goBack","Input","id","type","label","value","onChange","multiline","placeholder","e","target","htmlFor","ItemList","data","searchQuery","onSearch","onLoadMore","actionComponent","highlight","limitHeight","total","items","map","item","hasMore","useQueryParams","URLSearchParams","useLocation","search","AdminsPage","useAdminsQuery","variables","get","refetch","fetchMore","useDeleteAdminMutation","deleteAdmin","admins","q","set","queries","toString","push","skip","length","a","prompt","AdminEditPage","adminID","useParams","useAdminQuery","useUpdateAdminMutation","updateAdmin","admin","useState","setMessage","onSubmit","undefined","errors","AdminCreatePage","useCreateAdminMutation","createAdmin","editReducer","state","action","payload","email","password","Edit","useReducer","dispatch","disabled","window","cleanUpdateProductInput","overview","status","author","console","log","price","categories","c","collections","pages","language","publishedAt","publisher","AuthorsPage","useDeleteAuthorMutation","deleteAuthor","authors","AuthorEditPage","authorID","cat","useAuthorQuery","prods","updateProduct","products","find","isSet","confirm","AuthorCreatePage","setName","setOverview","useCreateAuthorMutation","createAuthor","imageFile","setImageFile","imageURL","useRef","src","current","alt","accept","files","file","reader","FileReader","readAsDataURL","onload","result","onerror","useUpdateAuthorMutation","updateAuthor","image","CategoriesPage","useDeleteCategoryMutation","deleteCategory","CategoryEditPage","categoryID","useCategoryQuery","category","filter","remove","CategoryCreatePage","useCreateCategoryMutation","createCategory","useUpdateCategoryMutation","updateCategory","CollectionsPage","useDeleteCollectionMutation","deleteCollection","CollectionEditPage","collectionID","useCollectionQuery","collection","CollectionCreatePage","useCreateCollectionMutation","createCollection","preventDefault","useUpdateCollectionMutation","updateCollection","logout","removeItem","replace","LogoutPage","useEffect","Select","selectedIndex","index","getStatusColor","Pending","Canceled","Failed","Delivered","Delivering","OrdersPage","useOrdersQuery","order","field","Desc","intervalId","setInterval","take","orders","clearInterval","Object","keys","o","OrderItem","currentStatus","setCurrentStatus","updateOrder","setStatus","orderStatuses","orderNumber","user","province","address","phone","indexOf","OrderEditPage","orderID","useOrderQuery","dayjs","createdAt","format","fromNow","purchases","p","product","quantity","reduce","acc","n","ProductsPage","useDeleteProductMutation","deleteProduct","ProductEditPage","productID","params","useProductQuery","update","ProductCreatePage","useCreateProductMutation","createProduct","EditPage","productStatuses","langs","cats","cols","auths","pubs","parseInt","isNaN","toDate","publishers","PublishersPage","useDeletePublisherMutation","deletePublisher","PublisherEditPage","publisherID","pub","usePublisherQuery","PublisherCreatePage","useCreatePublisherMutation","createPublisher","useUpdatePublisherMutation","updatePublisher","Success","Processing","UserRequestsPage","useUserRequestsQuery","requests","userRequest","UserRequestItem","updateUserRequest","userRequestStatuses","content","UsersPage","useUsersQuery","useDeleteUserMutation","deleteUser","users","UserEditPage","userID","useUserQuery","useUpdateUserMutation","updateUser","UserCreatePage","useCreateUserMutation","createUser","confirmed","checked","HomePage","DashboardPage","useDashboardQuery","color","Item","toLowerCase","LoginPage","setEmail","setPassword","useLoginMutation","login","loginAdmin","accessToken","res","setItem","createBrowserHistory","basename","process","AppRouter","children","httpLink","createUploadLink","uri","GRAPHQL_URL","authLink","setContext","_","headers","token","authorization","logoutLink","onError","networkError","statusCode","paginationPolicy","keyArgs","merge","existing","incoming","client","ApolloClient","link","from","cache","InMemoryCache","typePolicies","Query","fields","Category","App","ApolloProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","extend","relativeTime","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAMO,SAASA,EACdC,GAIA,OAFkBC,aAAaC,QAAQ,SAG9B,cAAC,IAAD,CAAUC,GAAG,UAGf,cAAC,IAAD,eAAWH,I,sIC8ZRI,GAWAC,GAmIAC,GA8WAC,G,SCz6BCC,GAAQ,SAAC,GAOf,IAAD,IANJC,aAMI,aALJC,eAKI,MALM,uBAKN,EACJ,OAAKD,EAEE,qBAAKE,UAAU,eAAf,SAA+BD,IAFnB,MCRRE,GAAU,SAAC,GAA+C,IAAD,IAA5CC,QACxB,YADoE,SAG7D,6CAFc,MCCVC,GAAU,WACrB,OACE,qCACE,sBAAKH,UAAU,iDAAf,UACE,cAAC,GAAD,CAAUI,KAAK,IAAIC,KAAK,SACxB,cAAC,GAAD,CAAUD,KAAK,UAAUC,KAAK,WAC9B,cAAC,GAAD,CAAUD,KAAK,YAAYC,KAAK,aAChC,cAAC,GAAD,CAAUD,KAAK,SAASC,KAAK,UAC7B,cAAC,GAAD,CAAUD,KAAK,YAAYC,KAAK,aAChC,cAAC,GAAD,CAAUD,KAAK,UAAUC,KAAK,WAC9B,cAAC,GAAD,CAAUD,KAAK,cAAcC,KAAK,eAClC,cAAC,GAAD,CAAUD,KAAK,eAAeC,KAAK,gBACnC,cAAC,GAAD,CAAUD,KAAK,WAAWC,KAAK,YAC/B,cAAC,GAAD,CAAUD,KAAK,cAAcC,KAAK,eAClC,cAAC,GAAD,CAAUD,KAAK,UAAUC,KAAK,cAEhC,qBAAKC,MAAO,CAAEC,SAAU,eAKxBC,GAAW,SAAC,GAAoD,IAAlDH,EAAiD,EAAjDA,KAAMD,EAA2C,EAA3CA,KAClBK,EAAIC,YAAc,CAAEN,OAAMO,MAAgB,MAATP,IAEvC,OACE,cAAC,KAAD,CACEJ,UAAS,mDACPS,EAAI,kBAAoB,IAE1BjB,GAAIY,EAJN,SAMGC,K,qCH3BDO,I,OAAkB,K,SAuaZnB,K,UAAAA,E,aAAAA,Q,cAWAC,K,oBAAAA,E,sBAAAA,E,wBAAAA,E,gBAAAA,E,kBAAAA,E,uBAAAA,Q,cAmIAC,K,sBAAAA,E,wBAAAA,E,gBAAAA,E,mBAAAA,Q,cA8WAC,K,gBAAAA,E,kBAAAA,E,wBAAAA,E,mBAAAA,Q,KAuYL,IAAMiB,GAAmBC,aAAH,oHAShBC,GAA2BD,aAAH,kHAMxBE,GAAkBF,aAAH,sJAYfG,GAAoBH,aAAH,kIAUjBI,GAAuBJ,aAAH,mHAQpBK,GAAsBL,aAAH,iHAQnBM,GAAwBN,aAAH,8HASrBO,GAAqBP,aAAH,iWA0BzBG,GACJC,GACAC,GACAC,IACWE,GAAsBR,aAAH,yJAU1BO,IACOE,GAAmBT,aAAH,2SAsBvBE,GACJM,IACWE,GAAsCV,aAAH,+JAQ1CO,IACOI,GAAyBX,aAAH,kKAW7BE,IACOU,GAAsBZ,aAAH,6IAM1BD,IA2BC,IAAMc,GAAuBb,aAAH,6LAM3BG,IA4BC,IAAMW,GAAyBd,aAAH,yJAM7BK,IA2BC,IAAMU,GAA2Bf,aAAH,6MAM/BM,IA4BC,IAAMU,GAAwBhB,aAAH,iMAM5BO,IA4BC,IAAMU,GAA0BjB,aAAH,6JAM9BI,IA2BC,IAAMc,GAAqBlB,aAAH,yIAMzBE,IA2BC,IAAMiB,GAAsBnB,aAAH,kGA+BzB,IAAMoB,GAAuBpB,aAAH,oGA+B1B,IAAMqB,GAAyBrB,aAAH,wGA+B5B,IAAMsB,GAA2BtB,aAAH,4GA+B9B,IAAMuB,GAAwBvB,aAAH,sGA+B3B,IAAMwB,GAA0BxB,aAAH,0GA+BKA,aAAH,0GA+B/B,IAAMyB,GAAqBzB,aAAH,gGA+BxB,IAAM0B,GAAgB1B,aAAH,6IAMpBC,IA2BC,IAAM0B,GAAsB3B,aAAH,sHA+BzB,IAAM4B,GAAuB5B,aAAH,oKAgC1B,IAAM6B,GAAyB7B,aAAH,+HA+B5B,IAAM8B,GAA2B9B,aAAH,gLAgC9B,IAAM+B,GAAsB/B,aAAH,sHAwBzB,SAASgC,GAAuBC,GAC/B,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAAsEJ,GAAqBG,GAKnG,IAAME,GAAwBpC,aAAH,uKAyB3B,SAASqC,GAAyBJ,GACjC,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAA0EC,GAAuBF,GAKzG,IAAMI,GAA0BtC,aAAH,kIA+B7B,IAAMuC,GAA4BvC,aAAH,oIAwB/B,SAASwC,GAA6BP,GACrC,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAAkFI,GAA2BL,GAKrH,IAAMO,GAAqBzC,aAAH,mHA+BxB,IAAM0C,GAAgB1C,aAAH,0GAMpBD,IA6BC,IAAM4C,GAAiB3C,aAAH,kRAUrBD,IAgCC,IAAM6C,GAAiB5C,aAAH,uTASrBG,GACJO,IAiCK,IAAMmC,GAAkB7C,aAAH,qRAUtBG,IAqBC,SAAS2C,GAAgBb,GACxB,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAAqDU,GAAiBX,GAS9E,IAAMa,GAAqB/C,aAAH,6RAUzBK,IAqBC,SAAS2C,GAAmBf,GAC3B,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAA2DY,GAAoBb,GASvF,IAAMe,GAAmBjD,aAAH,6TASvBK,GACJK,IAiCK,IAAMwC,GAAqBlD,aAAH,mUASzBM,GACJI,IAiCK,IAAMyC,GAAsBnD,aAAH,iSAU1BM,IAqBC,SAAS8C,GAAoBnB,GAC5B,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAA6DgB,GAAqBjB,GAS1F,IAAMmB,GAAoBrD,aAAH,2ZA0DvB,IAAMsD,GAAgBtD,aAAH,4GAMpBS,IA6BC,IAAM8C,GAAiBvD,aAAH,kRAUrBS,IAgCC,IAAM+C,GAAkBxD,aAAH,kHAMtBO,IA6BC,IAAMkD,GAAmBzD,aAAH,2PAMvBU,IAqBC,SAASgD,GAAiBzB,GACzB,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAAuDsB,GAAkBvB,GASjF,IAAMyB,GAAoB3D,aAAH,gUASxBI,GACJM,IAiCK,IAAMkD,GAAqB5D,aAAH,8RAUzBI,IAqBC,SAASyD,GAAmB5B,GAC3B,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAA2DyB,GAAoB1B,GASvF,IAAM4B,GAAe9D,aAAH,yGAMnBE,IA6B6BF,aAAH,0HAM1BW,IA6BC,IAAMoD,GAAuB/D,aAAH,gSAU3BW,IAgCC,IAAMqD,GAAgBhE,aAAH,+QAUpBE,I,uCI18FO+D,GAAa,WACxB,IAAMC,EAAUC,cAEhB,OACE,qBAAKjF,UAAU,OAAf,SACE,yBACEkF,QAAS,kBAAMF,EAAQG,UACvBnF,UAAU,mEAFZ,UAIG,KAJH,cCPOoF,GAAQ,SAAC,GAgBf,IAfLC,EAeI,EAfJA,GACArF,EAcI,EAdJA,UAcI,IAbJsF,YAaI,MAbG,OAaH,EAZJC,EAYI,EAZJA,MACAC,EAWI,EAXJA,MACAC,EAUI,EAVJA,SAUI,IATJC,iBASI,SACErG,EAAQ,CACZW,UAAW,gCACXqF,KACAhF,KAAMgF,EACNM,YAAaJ,EACbC,QACAC,SAAU,SAACG,GAAD,OACRH,EAASG,EAAEC,OAAOL,SAGtB,OACE,sBAAKxF,UAAS,mDAAuCA,QAAvC,IAAuCA,IAAa,IAAlE,UACE,uBAAO8F,QAAST,EAAhB,SAAqBE,IACpBG,EACC,wCAAerG,IAEf,mCAAOiG,KAAMA,GAAUjG,QCxBxB,SAAS0G,GAAT,GAkBH,IAjBFC,EAiBC,EAjBDA,KACAC,EAgBC,EAhBDA,YACAC,EAeC,EAfDA,SACAC,EAcC,EAdDA,WACAC,EAaC,EAbDA,gBACAC,EAYC,EAZDA,UACAhG,EAWC,EAXDA,KACAiG,EAUC,EAVDA,YAWA,OACE,sBAAKtG,UAAWsG,EAAc,6BAA+B,GAA7D,UACE,sBAAKtG,UAAU,yBAAf,UACE,uBACEA,UAAU,mCACV2F,YAAY,SACZH,MAAOS,EACPR,SAAU,SAACG,GACTM,EAASN,EAAEC,OAAOL,UAGtB,iDAAaQ,QAAb,IAAaA,OAAb,EAAaA,EAAMO,YAVvB,OAYGP,QAZH,IAYGA,OAZH,EAYGA,EAAMQ,MAAMC,KAAI,SAACC,GAAD,OACf,sBACE1G,UAAS,gDACPqG,GAAaA,EAAUK,GAAQ,gBAAkB,IAFrD,UAME,8BAAMA,EAAKrG,OACX,sBAAKL,UAAU,yBAAf,UACGoG,GAAmBA,EAAgBM,GACpC,cAAC,KAAD,CACE1G,UAAU,uBACVR,GAAE,WAAMa,EAAN,YAAcqG,EAAKrB,GAAnB,SAFJ,uBALGqB,EAAKrB,QAcT,OAAJW,QAAI,IAAJA,OAAA,EAAAA,EAAMW,SACL,qBAAK3G,UAAU,mBAAf,SACE,wBACEA,UAAU,mEACVkF,QAASiB,EAFX,yBAOA,QCnEH,SAASS,KACd,OAAO,IAAIC,gBAAgBC,cAAcC,QCgBpC,IAAMC,GAAa,WAAO,IAAD,EACxBD,EAASH,KADe,ERgxEzB,SAAwB7D,GACvB,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAAmDQ,GAAgBT,GQhxE3BiE,CAAe,CAClEC,UAAW,CAAEjB,YAAac,EAAOI,IAAI,QAD/BnB,EAFsB,EAEtBA,KAAM9F,EAFgB,EAEhBA,QAASJ,EAFO,EAEPA,MAAOsH,EAFA,EAEAA,QAASC,EAFT,EAESA,UAFT,ERmrDzB,SAAgCtE,GAC/B,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAAsEhB,GAAqBe,GQhrDlFsE,GAAfC,EALuB,qBAOxBvC,EAAUC,cAChB,OAAInF,EACK,uDAGLI,EACK,6CAIP,gCACE,qBAAKF,UAAU,OAAf,SACE,eAAC,KAAD,CACER,GAAG,iBACHQ,UAAU,mEAFZ,UAIG,IAJH,eAOF,cAAC+F,GAAD,CACE1F,KAAK,SACL2F,KAAI,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAMwB,OACZtB,SAAU,SAACuB,GACTV,EAAOW,IAAI,IAAKD,GAChB,IAAME,EAAUZ,EAAOa,WACvB5C,EAAQ6C,KAAR,kBAAwBF,IACxBP,EAAQ,CAAEnB,YAAac,EAAOI,IAAI,QAEpChB,WAAY,WACVkB,EAAU,CACRH,UAAW,CAAEY,KAAI,OAAE9B,QAAF,IAAEA,OAAF,EAAEA,EAAMwB,OAAOhB,MAAMuB,WAG1C9B,YAAW,UAAEc,EAAOI,IAAI,YAAb,QAAqB,GAChCf,gBAAiB,SAACM,GAAD,OACf,wBACE1G,UAAU,eACVkF,QAAO,wBAAE,uBAAA8C,EAAA,yDACMC,OAAO,aAAc,MACrBvB,EAAKrG,KAFX,gCAGCkH,EAAY,CAAEL,UAAW,CAAE7B,GAAIqB,EAAKrB,MAHrC,OAIL+B,IAJK,2CAFX,2BAkBGc,GAAgB,WAAO,IAC1BC,EAAYC,cAAZD,QADyB,ER0qE5B,SAAuBpF,GACtB,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAAiDO,GAAeR,GQzqE5CqF,CAAc,CAC7CnB,UAAW,CAAE7B,GAAI8C,KADXnC,EAHyB,EAGzBA,KAAM9F,EAHmB,EAGnBA,QAASJ,EAHU,EAGVA,MAHU,ERg5D5B,SAAgCiD,GAC/B,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAAsER,GAAqBO,GQ34D3EsF,GAPI,oBAO1BC,EAP0B,KAObC,EAPa,OAQHC,qBARG,oBAQ1B1I,EAR0B,KAQjB2I,EARiB,KAUjC,OAAI5I,EACK,cAAC,GAAD,IAIP,gCACE,cAAC,GAAD,KACEI,IAAD,OAAY8F,QAAZ,IAAYA,OAAZ,EAAYA,EAAMwC,OACjB,cAAC,GAAD,CACEA,MAAOxC,EAAMwC,MACbtI,QAASsI,EAAMtI,QACfJ,MAAO0I,EAAM1I,MACb6I,SAAQ,yCAAE,WAAO3C,GAAP,UAAAgC,EAAA,6DACRU,OAAWE,GADH,SAEUL,EAAY,CAC5BrB,UAAW,CAAElB,KAAK,2BAAMA,GAAP,IAAaX,GAAI8C,OAH5B,cAKCU,QACPH,EAAW,iBANL,2CAAF,wDAWV,cAAC,GAAD,IAEF,qBAAK1I,UAAU,iBAAf,SAAiCD,QAK1B+I,GAAkB,WAAO,IAAD,ERu2C9B,SAAgC/F,GAC/B,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAAsEvB,GAAqBsB,GQx2C9D+F,GADP,oBAC5BC,EAD4B,YACb9I,EADa,EACbA,QAASJ,EADI,EACJA,MADI,EAEL2I,qBAFK,oBAE5B1I,EAF4B,KAEnB2I,EAFmB,KAInC,OACE,gCACE,cAAC,GAAD,IACA,cAAC,GAAD,CACExI,QAASA,EACTJ,MAAOA,EACP6I,SAAQ,yCAAE,WAAO3C,GAAP,UAAAgC,EAAA,6DACRU,OAAWE,GADH,SAEUI,EAAY,CAAE9B,UAAW,CAAElB,KAAMA,KAF3C,cAGC6C,QACPH,EAAW,iBAJL,2CAAF,wDAQV,qBAAK1I,UAAU,iBAAf,SAAiCD,QAUvC,SAASkJ,GACPC,EACAC,GAEA,OAAQA,EAAO7D,MACb,IAAK,OACH,OAAO,2BAAK4D,GAAZ,IAAmB7I,KAAM8I,EAAOC,UAClC,IAAK,QACH,OAAO,2BAAKF,GAAZ,IAAmBG,MAAOF,EAAOC,UACnC,IAAK,WACH,OAAO,2BAAKF,GAAZ,IAAmBI,SAAUH,EAAOC,UACtC,QACE,OAAOF,GAIb,IAAMK,GAAO,SAAC,GAUP,IAAD,EATJf,EASI,EATJA,MACAG,EAQI,EARJA,SACA7I,EAOI,EAPJA,MACAI,EAMI,EANJA,QAMI,EACqBsJ,qBAAWP,GAAD,OAAcT,QAAd,IAAcA,IAAS,IADtD,oBACGxC,EADH,KACSyD,EADT,KAGJ,OACE,8BACE,gCACE,cAAC,GAAD,CACEzJ,UAAU,OACVqF,GAAG,OACHE,MAAM,OACNC,MAAOQ,EAAK3F,KACZoF,SAAU,SAACD,GACTiE,EAAS,CAAEnE,KAAM,OAAQ8D,QAAS5D,OAGtC,cAAC,GAAD,CACExF,UAAU,OACVqF,GAAG,QACHE,MAAM,QACNC,MAAOQ,EAAKqD,MACZ5D,SAAU,SAACD,GACTiE,EAAS,CAAEnE,KAAM,QAAS8D,QAAS5D,OAGvC,cAAC,GAAD,CACExF,UAAU,OACVqF,GAAG,WACHE,MAAM,WACNC,MAAK,UAAEQ,EAAKsD,gBAAP,QAAmB,GACxB7D,SAAU,SAACD,GACTiE,EAAS,CAAEnE,KAAM,WAAY8D,QAAS5D,OAG1C,sBAAKxF,UAAU,mBAAf,UACE,wBACE0J,SAAUxJ,EACVF,UAAS,UACPE,EAAU,cAAgB,oCADnB,2BAGTgF,QAAS,WAAO,IAAD,EACb,IAAKc,EAAK3F,OAAS2F,EAAKqD,MACtB,MAAM,IAAIM,OAAO9J,MAAM,2BAEzB8I,EAAS,CACPtI,KAAM2F,EAAK3F,KACXgJ,MAAOrD,EAAKqD,MACZC,SAAQ,UAAGtD,EAAKsD,gBAAR,aAAoBV,KAZlC,oBAkBA,qBAAK5I,UAAU,oBAAf,gBAAoCF,QAApC,IAAoCA,OAApC,EAAoCA,EAAOC,mBC3N9C,SAAS6J,GACdlD,GAC0C,IAAD,UACzC,IAAKA,EAAKrG,OAASqG,EAAKmD,WAAanD,EAAKoD,SAAWpD,EAAKqD,OAExD,MADAC,QAAQC,IAAIvD,GACN,IAAI7G,MAAJ,2BAGR,MAAO,CACLwF,GAAIqB,EAAKrB,GACThF,KAAMqG,EAAKrG,KACXwJ,SAAUnD,EAAKmD,SACfC,OAAQpD,EAAKoD,OACbI,MAAK,UAAExD,EAAKwD,aAAP,QAAgB,EACrBH,OAAQ,CAAE1E,GAAIqB,EAAKqD,OAAO1E,IAC1B8E,WAAU,oBACRzD,EAAKyD,kBADG,aACR,EAAiB1D,KAAI,SAAC2D,GAAD,MAAQ,CAC3B/E,GAAI+E,EAAE/E,cAFA,QAGD,GACTgF,YAAW,oBACT3D,EAAK2D,mBADI,aACT,EAAkB5D,KAAI,SAAC2D,GAAD,MAAQ,CAC5B/E,GAAI+E,EAAE/E,cAFC,QAGF,GACTiF,MAAO5D,EAAK4D,MACZC,SAAU7D,EAAK6D,SACfC,YAAa9D,EAAK8D,YAClBC,UAAW/D,EAAK+D,WAAa,CAAEpF,GAAIqB,EAAK+D,UAAUpF,KCZ/C,IAAMqF,GAAc,WAAO,IAAD,EACzB3D,EAASH,KADgB,EAEsBhD,GAAgB,CACnEsD,UAAW,CAAEjB,YAAac,EAAOI,IAAI,QAD/BnB,EAFuB,EAEvBA,KAAM9F,EAFiB,EAEjBA,QAASJ,EAFQ,EAERA,MAAOsH,EAFC,EAEDA,QAASC,EAFR,EAEQA,UAFR,EVitD1B,SAAiCtE,GAChC,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAAwEf,GAAsBc,GU9sDpF2H,GAAhBC,EALwB,qBAMzB5F,EAAUC,cAChB,OAAInF,EACK,uDAGLI,EACK,6CAIP,gCACE,qBAAKF,UAAU,OAAf,SACE,eAAC,KAAD,CACER,GAAG,kBACHQ,UAAU,mEAFZ,UAIG,IAJH,eAOF,cAAC+F,GAAD,CACE1F,KAAK,UACL2F,KAAI,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAM6E,QACZ3E,SAAU,SAACuB,GACTV,EAAOW,IAAI,IAAKD,GAChB,IAAME,EAAUZ,EAAOa,WACvB5C,EAAQ6C,KAAR,mBAAyBF,IACzBP,EAAQ,CAAEnB,YAAac,EAAOI,IAAI,QAEpChB,WAAY,WACVkB,EAAU,CACRH,UAAW,CAAEY,KAAI,OAAE9B,QAAF,IAAEA,OAAF,EAAEA,EAAM6E,QAAQrE,MAAMuB,WAG3C9B,YAAW,UAAEc,EAAOI,IAAI,YAAb,QAAqB,GAChCf,gBAAiB,SAACM,GAAD,OACf,wBACE1G,UAAU,eACVkF,QAAO,wBAAE,uBAAA8C,EAAA,yDACMC,OAAO,0BAA2B,MAClCvB,EAAKrG,KAFX,gCAGCuK,EAAa,CAAE1D,UAAW,CAAE7B,GAAIqB,EAAKrB,MAHtC,OAIL+B,IAJK,2CAFX,2BAkBG0D,GAAiB,WAAO,IAAD,YAC1BC,EAAa3C,cAAb2C,SACFhE,EAASH,KAEToE,EV2vED,SAAwBjI,GACvB,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAAmDS,GAAgBV,GU7vEpEiI,CAAe,CACzB/D,UAAW,CAAE7B,GAAI0F,EAAU9E,YAAac,EAAOI,IAAI,SAG/C+D,EAAQ1G,GAAiB,CAC7B0C,UAAW,CAAEjB,YAAac,EAAOI,IAAI,SATL,EAYVhE,KAAjBgI,EAZ2B,qBAc5BnG,EAAUC,cAEhB,OAAI+F,EAAIlL,MACC,cAAC,GAAD,IAIP,gCACE,cAAC,GAAD,IACA,sBAAKE,UAAU,mBAAf,WACIgL,EAAI9K,UAAL,UAAgB8K,EAAIhF,YAApB,aAAgB,EAAU+D,QACzB,cAAC,GAAD,CAAMA,OAAQiB,EAAIhF,KAAM+D,SAExB,cAAC,GAAD,IAEF,qBAAK/J,UAAU,+BAAf,SACE,cAAC+F,GAAD,CACEO,aAAW,EACXjG,KAAK,WACL2F,KAAI,UAAEgF,EAAIhF,YAAN,iBAAE,EAAU+D,cAAZ,aAAE,EAAkBqB,SACxBlF,SAAU,SAACuB,GACTV,EAAOW,IAAI,KAAMD,GACjB,IAAME,EAAUZ,EAAOa,WACvB5C,EAAQ6C,KAAR,mBAAyBkD,EAAzB,iBAA0CpD,IAC1CqD,EAAI5D,QAAQ,CAAEnB,YAAac,EAAOI,IAAI,SAExChB,WAAY,WAAO,IAAD,IAChB6E,EAAI3D,UAAU,CACZH,UAAW,CACTY,KAAI,UAAEkD,EAAIhF,YAAN,iBAAE,EAAU+D,cAAZ,aAAE,EAAkBqB,SAAS5E,MAAMuB,WAI7C9B,YAAW,UAAEc,EAAOI,IAAI,aAAb,QAAsB,OAGrC,qBAAKnH,UAAU,+BAAf,SACE,cAAC+F,GAAD,CACEO,aAAW,EACXjG,KAAK,WACL2F,KAAI,UAAEkF,EAAMlF,YAAR,aAAE,EAAYoF,SAClBlF,SAAU,SAACuB,GACTV,EAAOW,IAAI,KAAMD,GACjB,IAAME,EAAUZ,EAAOa,WACvB5C,EAAQ6C,KAAR,mBAAyBkD,EAAzB,iBAA0CpD,IAC1CuD,EAAM9D,QAAQ,CAAEnB,YAAac,EAAOI,IAAI,SAE1ChB,WAAY,WAAO,IAAD,EAChB+E,EAAM7D,UAAU,CACdH,UAAW,CAAEY,KAAI,UAAEoD,EAAMlF,YAAR,aAAE,EAAYoF,SAAS5E,MAAMuB,WAGlD9B,YAAW,UAAEc,EAAOI,IAAI,aAAb,QAAsB,GACjCd,UAAW,SAACK,GAAD,QACPA,EAAKyD,WAAWkB,MAAK,SAACjB,GAAD,OAAOA,EAAE/E,KAAO0F,MAEzC3E,gBAAiB,SAACM,GAChB,IAAM4E,EAAQ5E,EAAKqD,OAAO1E,KAAO0F,EAEjC,OACE,wBACE/K,UAAWsL,EAAQ,gBAAkB,gBACrCpG,QAAO,wBAAE,uBAAA8C,EAAA,yDAEJ2B,OAAO4B,QACN,0DAHG,iEAQDJ,EAAc,CAClBjE,UAAW,CACTlB,KAAK,2BACA4D,GAAwB,2BACtBlD,GADqB,IAExBqD,OAAQ,CAAE1E,GAAI0F,OAHd,IAKF1F,GAAIqB,EAAKrB,QAfR,OAmBP2F,EAAI5D,UACJ8D,EAAM9D,UApBC,2CAFX,6BAoCHoE,GAAmB,WAAO,IAAD,EACZ/C,mBAAS,IADG,oBAC7BpI,EAD6B,KACvBoL,EADuB,OAEJhD,mBAAS,IAFL,oBAE7BoB,EAF6B,KAEnB6B,EAFmB,OAGNjD,qBAHM,oBAG7B1I,EAH6B,KAGpB2I,EAHoB,OVm0C/B,SAAiC3F,GAChC,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAAwEtB,GAAsBqB,GUh0C1D2I,GALb,oBAK7BC,EAL6B,YAKb5F,EALa,EAKbA,KAAM9F,EALO,EAKPA,QAASJ,EALF,EAKEA,MALF,EAMF2I,qBANE,oBAM7BoD,EAN6B,KAMlBC,EANkB,KAO9BC,EAAWC,mBAEjB,cAAIhG,QAAJ,IAAIA,OAAJ,EAAIA,EAAM4F,cACD,cAAC,IAAD,CAAUpM,GAAE,mBAAcwG,EAAM4F,aAAavG,GAAjC,WAInB,gCACE,qBAAKrF,UAAU,OAAf,SACE,cAAC,GAAD,MAEF,gCACE,cAAC,GAAD,CACEqF,GAAG,OACHE,MAAM,OACNC,MAAOnF,EACPoF,SAAU,SAACD,GACTiG,EAAQjG,MAGZ,cAAC,GAAD,CACEH,GAAG,WACHE,MAAM,WACNC,MAAOqE,EACPpE,SAAU,SAACD,GACTkG,EAAYlG,MAGhB,qBACExF,UAAU,8BACViM,IAAKF,EAASG,QACdC,IAAI,KAELN,GACC,wBACE7L,UAAU,eACVkF,QAAS,WACP6G,EAASG,aAAUtD,EACnBkD,OAAalD,IAJjB,oBAUF,uBACEvD,GAAG,QACHC,KAAK,OACL8G,OAAO,UACP3G,SAAU,SAACG,GAAO,IACRyG,EAAUzG,EAAEC,OAAZwG,MACFC,EAAOD,GAASA,EAAM,GAE5B,GAAIC,EAAM,CACR,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcH,GACrBC,EAAOG,OAAS,WACdX,EAASG,QAAUK,EAAOI,OAC1Bb,EAAaQ,IAEfC,EAAOK,QAAU,WACfb,EAASG,aAAUtD,EACnBkD,OAAalD,QAKrB,sBAAK5I,UAAU,mBAAf,UACE,wBACE0J,SAAUxJ,EACVF,UAAS,UACPE,EAAU,cAAgB,oCADnB,2BAGTgF,QAAO,wBAAE,uBAAA8C,EAAA,6DACPU,OAAWE,GADJ,SAEWgD,EAAa,CAC7B1E,UAAW,CACTlB,KAAM,CACJ3F,OACAwJ,YAEFgC,eARG,cAWEhD,QACPH,EAAW,kBAZN,2CALX,oBAuBA,cAAC,GAAD,CAASxI,QAASA,IAClB,cAAC,GAAD,CAAOJ,QAASA,EAAOC,QAAO,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAOC,UACvC,qBAAKC,UAAU,sBAAf,SAAsCD,cAO1CwJ,GAAO,SAAC,GAA4C,IAAD,EAAzCQ,EAAyC,EAAzCA,OAAyC,EAC/BtB,mBAASsB,EAAO1J,MADe,oBAChDA,EADgD,KAC1CoL,EAD0C,OAEzBhD,qBAFyB,oBAEhD1I,EAFgD,KAEvC2I,EAFuC,OAGvBD,mBAASsB,EAAOF,UAHO,oBAGhDA,EAHgD,KAGtC6B,EAHsC,OVwtDlD,SAAiC3I,GAChC,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAAwEP,GAAsBM,GUrtDhE6J,GALY,oBAKhDC,EALgD,YAKhC5M,EALgC,EAKhCA,QAASJ,EALuB,EAKvBA,MALuB,EAMrB2I,qBANqB,oBAMhDoD,EANgD,KAMrCC,EANqC,KAOjDC,EAAWC,mBAEjB,OACE,8BACE,gCACE,cAAC,GAAD,CACE3G,GAAG,OACHE,MAAM,OACNC,MAAOnF,EACPoF,SAAU,SAACD,GACTiG,EAAQjG,MAGZ,cAAC,GAAD,CACEH,GAAG,OACHE,MAAM,OACNC,MAAOqE,EACPpE,SAAU,SAACD,GACTkG,EAAYlG,MAGhB,qBACExF,UAAU,8BACViM,IAAG,UAAEF,EAASG,eAAX,QAAsBnC,EAAOgD,MAChCZ,IAAI,KAELN,GACC,wBACE7L,UAAU,eACVkF,QAAS,WACP6G,EAASG,aAAUtD,EACnBkD,OAAalD,IAJjB,oBAUF,uBACEvD,GAAG,QACHC,KAAK,OACL8G,OAAO,UACP3G,SAAU,SAACG,GAAO,IACRyG,EAAUzG,EAAEC,OAAZwG,MACFC,EAAOD,GAASA,EAAM,GAE5B,GAAIC,EAAM,CACR,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcH,GACrBC,EAAOG,OAAS,WACdX,EAASG,QAAUK,EAAOI,OAC1Bb,EAAaQ,IAEfC,EAAOK,QAAU,WACfb,EAASG,aAAUtD,EACnBkD,OAAalD,QAKrB,sBAAK5I,UAAU,mBAAf,UACE,wBACE0J,SAAUxJ,EACVF,UAAS,UACPE,EAAU,cAAgB,oCADnB,2BAGTgF,QAAO,wBAAE,uBAAA8C,EAAA,6DACPU,OAAWE,GADJ,SAEWkE,EAAa,CAC7B5F,UAAW,CACTlB,KAAM,CACJX,GAAI0E,EAAO1E,GACXwE,WACAxJ,WAPC,cAWEwI,QACPH,EAAW,kBAZN,2CALX,oBAuBA,qBAAK1I,UAAU,oBAAf,gBAAoCF,QAApC,IAAoCA,OAApC,EAAoCA,EAAOC,UAC3C,qBAAKC,UAAU,sBAAf,SAAsCD,a,SC9WnCiN,GAAiB,WAAO,IAAD,EAC5BjG,EAASH,KACT5B,EAAUC,cAFkB,EAIUnB,GAAmB,CAC7DoD,UAAW,CACTjB,YAAac,EAAOI,IAAI,QAFpBnB,EAJ0B,EAI1BA,KAAMlG,EAJoB,EAIpBA,MAAOuH,EAJa,EAIbA,UAAWD,EAJE,EAIFA,QAJE,EXgvD7B,SAAmCrE,GAClC,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAA4Ed,GAAwBa,GWzuDxFiK,GAAlBC,EAT2B,qBAWlC,OAAIpN,EACK,uDAIP,gCACE,qBAAKE,UAAU,OAAf,SACE,eAAC,KAAD,CACER,GAAG,qBACHQ,UAAU,mEAFZ,UAIG,IAJH,eAOF,cAAC+F,GAAD,CACE1F,KAAK,aACL2F,KAAI,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAMmE,WACZjE,SAAU,SAACuB,GACTV,EAAOW,IAAI,IAAKD,GAChB,IAAME,EAAUZ,EAAOa,WACvB5C,EAAQ6C,KAAR,sBAA4BF,IAC5BP,EAAQ,CAAEnB,YAAac,EAAOI,IAAI,QAEpChB,WAAY,WACVkB,EAAU,CACRH,UAAW,CAAEY,KAAI,OAAE9B,QAAF,IAAEA,OAAF,EAAEA,EAAMmE,WAAW3D,MAAMuB,WAG9C9B,YAAW,UAAEc,EAAOI,IAAI,YAAb,QAAqB,GAChCf,gBAAiB,SAACM,GAAD,OACf,wBACE1G,UAAU,eACVkF,QAAO,wBAAE,uBAAA8C,EAAA,yDACMC,OAAO,0BAA2B,MAClCvB,EAAKrG,KAFX,gCAGC6M,EAAe,CAAEhG,UAAW,CAAE7B,GAAIqB,EAAKrB,MAHxC,OAIL+B,IAJK,2CAFX,2BAkBG+F,GAAmB,WAAO,IAAD,YAC5BC,EAAehF,cAAfgF,WACFrG,EAASH,KAEToE,EX03ED,SAA0BjI,GACzB,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAAuDc,GAAkBf,GW53E1EqK,CAAiB,CAC3BnG,UAAW,CAAE7B,GAAI+H,EAAYnH,YAAac,EAAOI,IAAI,SAGjD+D,EAAQ1G,GAAiB,CAC7B0C,UAAW,CAAEjB,YAAac,EAAOI,IAAI,SATH,EAYZhE,KAAjBgI,EAZ6B,qBAc9BnG,EAAUC,cAEhB,OAAI+F,EAAIlL,MACC,cAAC,GAAD,IAIP,gCACE,cAAC,GAAD,IACA,sBAAKE,UAAU,mBAAf,WACIgL,EAAI9K,UAAL,UAAgB8K,EAAIhF,YAApB,aAAgB,EAAUsH,UACzB,cAAC,GAAD,CAAMA,SAAUtC,EAAIhF,KAAMsH,WAE1B,cAAC,GAAD,IAEF,qBAAKtN,UAAU,+BAAf,SACE,cAAC+F,GAAD,CACEO,aAAW,EACXjG,KAAK,WACL2F,KAAI,UAAEgF,EAAIhF,YAAN,iBAAE,EAAUsH,gBAAZ,aAAE,EAAoBlC,SAC1BlF,SAAU,SAACuB,GACTV,EAAOW,IAAI,KAAMD,GACjB,IAAME,EAAUZ,EAAOa,WACvB5C,EAAQ6C,KAAR,sBAA4BuF,EAA5B,iBAA+CzF,IAC/CqD,EAAI5D,QAAQ,CAAEnB,YAAac,EAAOI,IAAI,SAExChB,WAAY,WAAO,IAAD,IAChB6E,EAAI3D,UAAU,CACZH,UAAW,CAAEY,KAAI,UAAEkD,EAAIhF,YAAN,iBAAE,EAAUsH,gBAAZ,aAAE,EAAoBlC,SAAS5E,MAAMuB,WAG1D9B,YAAW,UAAEc,EAAOI,IAAI,aAAb,QAAsB,GACjCf,gBAAiB,SAACM,GAAD,OACf,wBACE1G,UAAU,eACVkF,QAAO,wBAAE,uBAAA8C,EAAA,yDACF2B,OAAO4B,QAAQ,iBADb,iEAEDJ,EAAc,CAClBjE,UAAW,CACTlB,KAAK,yBACHX,GAAIqB,EAAKrB,IACNuE,GAAwBlD,IAFzB,IAGFyD,WAAW,aACNzD,EAAKyD,WACLoD,QAAO,SAACnD,GAAD,OAAOA,EAAE/E,KAAO+H,KACvB3G,KAAI,SAAC2D,GAAD,MAAQ,CAAE/E,GAAI+E,EAAE/E,aAVxB,OAeP2F,EAAI5D,UACJ8D,EAAM9D,UAhBC,2CAFX,yBA0BN,qBAAKpH,UAAU,+BAAf,SACE,cAAC+F,GAAD,CACEO,aAAW,EACXjG,KAAK,WACL2F,KAAI,UAAEkF,EAAMlF,YAAR,aAAE,EAAYoF,SAClBlF,SAAU,SAACuB,GACTV,EAAOW,IAAI,KAAMD,GACjB,IAAME,EAAUZ,EAAOa,WACvB5C,EAAQ6C,KAAR,sBAA4BuF,EAA5B,iBAA+CzF,IAC/CuD,EAAM9D,QAAQ,CAAEnB,YAAac,EAAOI,IAAI,SAE1ChB,WAAY,WAAO,IAAD,EAChB+E,EAAM7D,UAAU,CACdH,UAAW,CAAEY,KAAI,UAAEoD,EAAMlF,YAAR,aAAE,EAAYoF,SAAS5E,MAAMuB,WAGlD9B,YAAW,UAAEc,EAAOI,IAAI,aAAb,QAAsB,GACjCd,UAAW,SAACK,GAAD,QACPA,EAAKyD,WAAWkB,MAAK,SAACjB,GAAD,OAAOA,EAAE/E,KAAO+H,MAEzChH,gBAAiB,SAACM,GAChB,IAAM8G,EAAS9G,EAAKyD,WAAWkB,MAAK,SAACjB,GAAD,OAAOA,EAAE/E,KAAO+H,KAE9CjD,EAAaqD,EAAM,aAEhB9G,EAAKyD,WACLoD,QAAO,SAACnD,GAAD,OAAOA,EAAE/E,KAAO+H,KACvB3G,KAAI,SAAC2D,GAAD,MAAQ,CAAE/E,GAAI+E,EAAE/E,QAJJ,uBAOhBqB,EAAKyD,WAAW1D,KAAI,SAAC2D,GAAD,MAAQ,CAAE/E,GAAI+E,EAAE/E,QAPpB,CAQnB,CAAEA,GAAI+H,KAGZ,OACE,wBACEpN,UAAWwN,EAAS,eAAiB,gBACrCtI,QAAO,wBAAE,uBAAA8C,EAAA,yDACF2B,OAAO4B,QAAQ,iBADb,iEAEDJ,EAAc,CAClBjE,UAAW,CACTlB,KAAK,2BACA4D,GAAwB,2BACtBlD,GADqB,IAExByD,iBAHA,IAKF9E,GAAIqB,EAAKrB,QATR,OAaP2F,EAAI5D,UACJ8D,EAAM9D,UAdC,2CAFX,SAmBGoG,EAAS,SAAW,oBAW1BC,GAAqB,WAAO,IAAD,EACdhF,mBAAS,IADK,oBAC/BpI,EAD+B,KACzBoL,EADyB,OXw0CjC,SAAmC1I,GAClC,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAA4ErB,GAAwBoB,GWt0C/G0K,GAJoC,oBAG/BC,EAH+B,YAGb3H,EAHa,EAGbA,KAAM9F,EAHO,EAGPA,QAASJ,EAHF,EAGEA,MAGxC,cAAIkG,QAAJ,IAAIA,OAAJ,EAAIA,EAAM2H,gBACD,cAAC,IAAD,CAAUnO,GAAE,sBAAiBwG,EAAM2H,eAAetI,GAAtC,WAInB,gCACE,qBAAKrF,UAAU,OAAf,SACE,cAAC,GAAD,MAEF,gCACE,cAAC,GAAD,CACEqF,GAAG,OACHE,MAAM,OACNC,MAAOnF,EACPoF,SAAU,SAACD,GACTiG,EAAQjG,MAGZ,sBAAKxF,UAAU,mBAAf,UACE,wBACE0J,SAAUxJ,EACVF,UAAS,UACPE,EAAU,cAAgB,oCADnB,2BAGTgF,QAAS,WACPyI,EAAe,CACbzG,UAAW,CACTlB,KAAM,CACJ3F,YATV,oBAiBA,cAAC,GAAD,CAASH,QAASA,IAClB,cAAC,GAAD,CAAOJ,QAASA,EAAOC,QAAO,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAOC,oBAO3CwJ,GAAO,SAAC,GAAkD,IAAhD+D,EAA+C,EAA/CA,SAA+C,EACrC7E,mBAAS6E,EAASjN,MADmB,oBACtDA,EADsD,KAChDoL,EADgD,OAE/BhD,qBAF+B,oBAEtD1I,EAFsD,KAE7C2I,EAF6C,OXmxDxD,SAAmC3F,GAClC,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAA4EN,GAAwBK,GWjxDpE4K,GAJgB,oBAItDC,EAJsD,YAIpC3N,EAJoC,EAIpCA,QAASJ,EAJ2B,EAI3BA,MAElC,OACE,8BACE,gCACE,cAAC,GAAD,CACEuF,GAAG,OACHE,MAAM,OACNC,MAAOnF,EACPoF,SAAU,SAACD,GACTiG,EAAQjG,MAGZ,sBAAKxF,UAAU,mBAAf,UACE,wBACE0J,SAAUxJ,EACVF,UAAS,UACPE,EAAU,cAAgB,oCADnB,2BAGTgF,QAAO,wBAAE,uBAAA8C,EAAA,6DACPU,OAAWE,GADJ,SAEWiF,EAAe,CAC/B3G,UAAW,CACTlB,KAAM,CACJX,GAAIiI,EAASjI,GACbhF,WANC,cAUEwI,QACPH,EAAW,kBAXN,2CALX,oBAsBA,qBAAK1I,UAAU,oBAAf,gBAAoCF,QAApC,IAAoCA,OAApC,EAAoCA,EAAOC,UAC3C,qBAAKC,UAAU,sBAAf,SAAsCD,aChSnC+N,GAAkB,WAAO,IAAD,EAC7B/G,EAASH,KADoB,EAEkB1C,GAAoB,CACvEgD,UAAW,CAAEjB,YAAac,EAAOI,IAAI,QAD/BnB,EAF2B,EAE3BA,KAAM9F,EAFqB,EAErBA,QAASJ,EAFY,EAEZA,MAAOsH,EAFK,EAELA,QAASC,EAFJ,EAEIA,UAFJ,EZ+wD9B,SAAqCtE,GACpC,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAAgFb,GAA0BY,GY5wD5F+K,GAApBC,EAL4B,qBAO7BhJ,EAAUC,cAChB,OAAInF,EACK,uDAGLI,EACK,6CAIP,gCACE,qBAAKF,UAAU,OAAf,SACE,eAAC,KAAD,CACER,GAAG,sBACHQ,UAAU,mEAFZ,UAIG,IAJH,eAOF,cAAC+F,GAAD,CACE1F,KAAK,cACL2F,KAAI,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAMqE,YACZnE,SAAU,SAACuB,GACTV,EAAOW,IAAI,IAAKD,GAChB,IAAME,EAAUZ,EAAOa,WACvB5C,EAAQ6C,KAAR,uBAA6BF,IAC7BP,EAAQ,CAAEnB,YAAac,EAAOI,IAAI,QAEpChB,WAAY,WACVkB,EAAU,CACRH,UAAW,CAAEY,KAAI,OAAE9B,QAAF,IAAEA,OAAF,EAAEA,EAAMqE,YAAY7D,MAAMuB,WAG/C9B,YAAW,UAAEc,EAAOI,IAAI,YAAb,QAAqB,GAChCf,gBAAiB,SAACM,GAAD,OACf,wBACE1G,UAAU,eACVkF,QAAO,wBAAE,uBAAA8C,EAAA,yDACMC,OAAO,0BAA2B,MAClCvB,EAAKrG,KAFX,gCAGC2N,EAAiB,CAAE9G,UAAW,CAAE7B,GAAIqB,EAAKrB,MAH1C,OAIL+B,IAJK,2CAFX,2BAkBG6G,GAAqB,WAAO,IAAD,YAC9BC,EAAiB9F,cAAjB8F,aACFnH,EAASH,KAEToE,EZo6ED,SAA4BjI,GAC3B,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAA2De,GAAoBhB,GYt6EhFmL,CAAmB,CAC7BjH,UAAW,CAAE7B,GAAI6I,EAAcjI,YAAac,EAAOI,IAAI,SAGnD+D,EAAQ1G,GAAiB,CAC7B0C,UAAW,CAAEjB,YAAac,EAAOI,IAAI,SATD,EAYdhE,KAAjBgI,EAZ+B,qBAchCnG,EAAUC,cAEhB,OAAI+F,EAAIlL,MACC,cAAC,GAAD,IAIP,gCACE,cAAC,GAAD,IACA,sBAAKE,UAAU,mBAAf,WACIgL,EAAI9K,UAAL,UAAgB8K,EAAIhF,YAApB,aAAgB,EAAUoI,YACzB,cAAC,GAAD,CAAMA,WAAYpD,EAAIhF,KAAMoI,aAE5B,cAAC,GAAD,IAEF,qBAAKpO,UAAU,+BAAf,SACE,cAAC+F,GAAD,CACEO,aAAW,EACXjG,KAAK,WACL2F,KAAI,UAAEgF,EAAIhF,YAAN,iBAAE,EAAUoI,kBAAZ,aAAE,EAAsBhD,SAC5BlF,SAAU,SAACuB,GACTV,EAAOW,IAAI,KAAMD,GACjB,IAAME,EAAUZ,EAAOa,WACvB5C,EAAQ6C,KAAR,uBAA6BqG,EAA7B,iBAAkDvG,IAClDqD,EAAI5D,QAAQ,CAAEnB,YAAac,EAAOI,IAAI,SAExChB,WAAY,WAAO,IAAD,IAChB6E,EAAI3D,UAAU,CACZH,UAAW,CACTY,KAAI,UAAEkD,EAAIhF,YAAN,iBAAE,EAAUoI,kBAAZ,aAAE,EAAsBhD,SAAS5E,MAAMuB,WAIjD9B,YAAW,UAAEc,EAAOI,IAAI,aAAb,QAAsB,GACjCf,gBAAiB,SAACM,GAAD,OACf,wBACE1G,UAAU,eACVkF,QAAO,wBAAE,uBAAA8C,EAAA,yDACF2B,OAAO4B,QAAQ,iBADb,iEAEDJ,EAAc,CAClBjE,UAAW,CACTlB,KAAK,yBACHX,GAAIqB,EAAKrB,IACNuE,GAAwBlD,IAFzB,IAGF2D,YAAY,aACP3D,EAAK2D,YACLkD,QAAO,SAACnD,GAAD,OAAOA,EAAE/E,KAAO6I,KACvBzH,KAAI,SAAC2D,GAAD,MAAQ,CAAE/E,GAAI+E,EAAE/E,aAVxB,OAeP2F,EAAI5D,UACJ8D,EAAM9D,UAhBC,2CAFX,yBA0BN,qBAAKpH,UAAU,+BAAf,SACE,cAAC+F,GAAD,CACEO,aAAW,EACXjG,KAAK,WACL2F,KAAI,UAAEkF,EAAMlF,YAAR,aAAE,EAAYoF,SAClBlF,SAAU,SAACuB,GACTV,EAAOW,IAAI,KAAMD,GACjB,IAAME,EAAUZ,EAAOa,WACvB5C,EAAQ6C,KAAR,uBAA6BqG,EAA7B,iBAAkDvG,IAClDuD,EAAM9D,QAAQ,CAAEnB,YAAac,EAAOI,IAAI,SAE1ChB,WAAY,WAAO,IAAD,EAChB+E,EAAM7D,UAAU,CACdH,UAAW,CAAEY,KAAI,UAAEoD,EAAMlF,YAAR,aAAE,EAAYoF,SAAS5E,MAAMuB,WAGlD9B,YAAW,UAAEc,EAAOI,IAAI,aAAb,QAAsB,GACjCd,UAAW,SAACK,GAAD,QACPA,EAAK2D,YAAYgB,MAAK,SAACjB,GAAD,OAAOA,EAAE/E,KAAO6I,MAE1C9H,gBAAiB,SAACM,GAChB,IAAM8G,EAAS9G,EAAK2D,YAAYgB,MAC9B,SAACjB,GAAD,OAAOA,EAAE/E,KAAO6I,KAGZ7D,EAAcmD,EAAM,aAEjB9G,EAAK2D,YACLkD,QAAO,SAACnD,GAAD,OAAOA,EAAE/E,KAAO6I,KACvBzH,KAAI,SAAC2D,GAAD,MAAQ,CAAE/E,GAAI+E,EAAE/E,QAJH,uBAOjBqB,EAAK2D,YAAY5D,KAAI,SAAC2D,GAAD,MAAQ,CAAE/E,GAAI+E,EAAE/E,QAPpB,CAQpB,CAAEA,GAAI6I,KAGZ,OACE,wBACElO,UAAWwN,EAAS,eAAiB,gBACrCtI,QAAO,wBAAE,uBAAA8C,EAAA,yDACF2B,OAAO4B,QAAQ,iBADb,iEAEDJ,EAAc,CAClBjE,UAAW,CACTlB,KAAK,2BACA4D,GAAwB,2BACtBlD,GADqB,IAExB2D,kBAHA,IAKFhF,GAAIqB,EAAKrB,QATR,OAaP2F,EAAI5D,UACJ8D,EAAM9D,UAdC,2CAFX,SAmBGoG,EAAS,SAAW,oBAW1Ba,GAAuB,WAAO,IAAD,EAChB5F,mBAAS,IADO,oBACjCpI,EADiC,KAC3BoL,EAD2B,OZq2CnC,SAAqC1I,GACpC,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAAgFpB,GAA0BmB,GYn2CrHsL,GAJsC,oBAGjCC,EAHiC,YAGbvI,EAHa,EAGbA,KAAM9F,EAHO,EAGPA,QAASJ,EAHF,EAGEA,MAHF,EAKN2I,qBALM,oBAKjCoD,EALiC,KAKtBC,EALsB,KAMlCC,EAAWC,mBAEjB,cAAIhG,QAAJ,IAAIA,OAAJ,EAAIA,EAAMuI,kBACD,cAAC,IAAD,CAAU/O,GAAE,uBAAkBwG,EAAMuI,iBAAiBlJ,GAAzC,WAInB,gCACE,qBAAKrF,UAAU,OAAf,SACE,cAAC,GAAD,MAEF,gCACE,cAAC,GAAD,CACEqF,GAAG,OACHE,MAAM,OACNC,MAAOnF,EACPoF,SAAU,SAACD,GACTiG,EAAQjG,MAGZ,qBACExF,UAAU,8BACViM,IAAKF,EAASG,QACdC,IAAI,KAELN,GACC,wBACE7L,UAAU,eACVkF,QAAS,WACP6G,EAASG,aAAUtD,EACnBkD,OAAalD,IAJjB,oBAUF,uBACEvD,GAAG,QACHC,KAAK,OACL8G,OAAO,UACP3G,SAAU,SAACG,GAAO,IACRyG,EAAUzG,EAAEC,OAAZwG,MACFC,EAAOD,GAASA,EAAM,GAE5B,GAAIC,EAAM,CACR,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcH,GACrBC,EAAOG,OAAS,WACdX,EAASG,QAAUK,EAAOI,OAC1Bb,EAAaQ,IAEfC,EAAOK,QAAU,WACfb,EAASG,aAAUtD,EACnBkD,OAAalD,QAKrB,sBAAK5I,UAAU,mBAAf,UACE,wBACE0J,SAAUxJ,EACVF,UAAS,UACPE,EAAU,cAAgB,oCADnB,2BAGTgF,QAAO,yCAAE,WAAOU,GAAP,UAAAoC,EAAA,6DACPpC,EAAE4I,iBADK,SAEDD,EAAiB,CACrBrH,UAAW,CACTlB,KAAM,CACJ3F,QAEFwL,eAPG,2CAAF,sDALT,oBAmBA,cAAC,GAAD,CAAS3L,QAASA,IAClB,cAAC,GAAD,CAAOJ,QAASA,EAAOC,QAAO,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAOC,oBAO3CwJ,GAAO,SAAC,GAAwD,IAAD,EAArD6E,EAAqD,EAArDA,WAAqD,EAC3C3F,mBAAS2F,EAAW/N,MADuB,oBAC5DA,EAD4D,KACtDoL,EADsD,OZowD9D,SAAqC1I,GACpC,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAAgFL,GAA0BI,GYnwDxEyL,GAHoB,oBAG5DC,EAH4D,YAGxCxO,EAHwC,EAGxCA,QAASJ,EAH+B,EAG/BA,MAH+B,EAIjC2I,qBAJiC,oBAI5DoD,EAJ4D,KAIjDC,EAJiD,KAK7DC,EAAWC,mBAEjB,OACE,8BACE,gCACE,cAAC,GAAD,CACE3G,GAAG,OACHE,MAAM,OACNC,MAAOnF,EACPoF,SAAU,SAACD,GACTiG,EAAQjG,MAGZ,qBACExF,UAAU,8BACViM,IAAG,UAAEF,EAASG,eAAX,QAAsBkC,EAAWrB,MACpCZ,IAAI,KAELN,GACC,wBACE7L,UAAU,eACVkF,QAAS,WACP6G,EAASG,aAAUtD,EACnBkD,OAAalD,IAJjB,oBAUF,uBACEvD,GAAG,QACHC,KAAK,OACL8G,OAAO,UACP3G,SAAU,SAACG,GAAO,IACRyG,EAAUzG,EAAEC,OAAZwG,MACFC,EAAOD,GAASA,EAAM,GAE5B,GAAIC,EAAM,CACR,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcH,GACrBC,EAAOG,OAAS,WACdX,EAASG,QAAUK,EAAOI,OAC1Bb,EAAaQ,IAEfC,EAAOK,QAAU,WACfb,EAASG,aAAUtD,EACnBkD,OAAalD,QAKrB,sBAAK5I,UAAU,mBAAf,UACE,wBACE0J,SAAUxJ,EACVF,UAAS,UACPE,EAAU,cAAgB,oCADnB,2BAGTgF,QAAS,SAACU,GACRA,EAAE4I,iBACFE,EAAiB,CACfxH,UAAW,CACTlB,KAAM,CACJX,GAAI+I,EAAW/I,GACfhF,YAXV,oBAmBA,qBAAKL,UAAU,oBAAf,gBAAoCF,QAApC,IAAoCA,OAApC,EAAoCA,EAAOC,mBCpY9C,SAAS4O,KACdrP,aAAasP,WAAW,SACxB5J,GAAQ6J,QAAQ,UCDX,IAAMC,GAAa,WAKxB,OAJAC,qBAAU,WACRJ,OACC,IAEI,MCRIK,GAAS,SAAC,GAchB,IAbLhP,EAaI,EAbJA,UACAqF,EAYI,EAZJA,GACAE,EAWI,EAXJA,MACAiB,EAUI,EAVJA,MACAhB,EASI,EATJA,MACAC,EAQI,EARJA,SASA,OACE,sBAAKzF,UAAS,mDAAuCA,QAAvC,IAAuCA,IAAa,IAAlE,UACE,uBAAO8F,QAAST,EAAhB,SAAqBE,IACrB,wBACEvF,UAAU,mCACVK,KAAMgF,EACNA,GAAIA,EACJG,MAAOA,EACPC,SAAU,SAACG,GAAD,OAAOH,EAASG,EAAEC,OAAOoJ,gBALrC,SAOGzI,EAAMC,KAAI,SAACC,EAAMwI,GAAP,OACT,wBAAoB1J,MAAO0J,EAA3B,SACGxI,GADUwI,YCVvB,SAASC,GAAerF,GACtB,OAAOA,IAAWpK,GAAY0P,QAC1B,gBACAtF,IAAWpK,GAAY2P,SACvB,cACAvF,IAAWpK,GAAY4P,OACvB,aACAxF,IAAWpK,GAAY6P,UACvB,eACAzF,IAAWpK,GAAY8P,WACvB,cACA,gBAGC,IAAMC,GAAa,WAAO,IAAD,EhB2oFzB,SAAwB1M,GACvB,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAAmDoB,GAAgBrB,GgB5oF3B0M,CAAe,CAClExI,UAAW,CAAEyI,MAAO,CAAC,CAAEC,MAAO,YAAaD,MAAOlQ,GAAQoQ,UADpD7J,EADsB,EACtBA,KAAsBoB,GADA,EAChBtH,MADgB,EACTI,QADS,EACAkH,SAASC,EADT,EACSA,UAgBvC,OAbA0H,qBAAU,WACR,IAAMe,EAAaC,aAAY,WAC7B,IAAMC,GAAW,OAAJhK,QAAI,IAAJA,OAAA,EAAAA,EAAMiK,OAAOzJ,MAAMuB,SAAU,EAE1CX,EAAQ,CACN4I,WAED,KAEH,OAAO,kBAAME,cAAcJ,MAE1B,QAAC9J,QAAD,IAACA,OAAD,EAACA,EAAMiK,OAAOzJ,MAAMuB,SAGrB,gCACE,4CACA,qBAAK/H,UAAU,4BAAf,SACGmQ,OAAOC,KAAK1Q,IAAa+G,KAAI,SAAChG,GAAD,OAC5B,qBAAKT,UAAS,mBAAcmP,GAAe1O,WAJjD,OAOGuF,QAPH,IAOGA,OAPH,EAOGA,EAAMiK,OAAOzJ,MAAMC,KAAI,SAAC4J,GAAD,OACtB,cAAC,GAAD,CAAWV,MAAOU,QAEf,OAAJrK,QAAI,IAAJA,OAAA,EAAAA,EAAMiK,OAAOtJ,SACZ,qBAAK3G,UAAU,mBAAf,SACE,wBACEA,UAAU,mEACVkF,QAAS,WACPmC,EAAU,CAAEH,UAAW,CAAEY,KAAM9B,EAAKiK,OAAOzJ,MAAMuB,WAHrD,yBASA,SAKJuI,GAAY,SAAC,GAAyC,IAAD,MAAtCX,EAAsC,EAAtCA,MAAsC,EACflH,mBAASkH,EAAM7F,QADA,oBAClDyG,EADkD,KACnCC,EADmC,OAEf1N,KAFe,oBAElD2N,EAFkD,YAEnCvQ,EAFmC,EAEnCA,QAFmC,KAE1BJ,MACH2I,mBAASkH,EAAM7F,SAHc,oBAGlDA,EAHkD,KAG1C4G,EAH0C,KAInDC,EAAgBR,OAAOC,KAAK1Q,IAOlC,OALAqP,qBAAU,WACRyB,EAAiBb,EAAM7F,QACvB4G,EAAUf,EAAM7F,UACf,CAAC6F,EAAMtK,GAAIsK,EAAM7F,SAGlB,sBAAK9J,UAAU,oCAAf,UACE,sBACEA,UAAS,qCAAgCmP,GAAerF,GAA/C,SADX,UAGE,eAAC,KAAD,CAAMtK,GAAE,kBAAamQ,EAAMtK,GAAnB,SAA8BrF,UAAU,gBAAhD,cACI2P,EAAMiB,eAEV,yCAAYjB,EAAMkB,KAAKxQ,QACvB,uDAAgBsP,EAAMmB,gBAAtB,QAAkCnB,EAAMkB,KAAKC,YAC7C,sDAAenB,EAAMoB,eAArB,QAAgCpB,EAAMkB,KAAKE,WAC3C,oDAAapB,EAAMqB,aAAnB,QAA4BrB,EAAMkB,KAAKG,SACvC,sBAAKhR,UAAU,yCAAf,UACE,cAAC,GAAD,CACEqF,GAAG,SACHE,MAAM,SACNiB,MAAOmK,EACPnL,MAAOsE,EAAS6G,EAAcM,QAAQnH,QAAUlB,EAChDnD,SAAU,SAACyJ,GACTwB,EAAUC,EAAczB,OAG5B,wBACExF,SAAUxJ,GAAWqQ,IAAkBzG,EACvC9J,UAAS,UACPE,EACI,cACAqQ,IAAkBzG,EAClB,oCACA,cALG,mCAOT5E,QAAO,wBAAE,uBAAA8C,EAAA,sEACWyI,EAAY,CAC5BvJ,UAAW,CACTlB,KAAM,CACJX,GAAIsK,EAAMtK,GACVyE,aALC,cASEjB,QACP2H,EAAiB1G,GAVZ,2CATX,0BA2BJ,cAAC,KAAD,CACE9J,UAAU,qCACVR,GAAE,kBAAamQ,EAAMtK,GAAnB,SAFJ,4BAUO6L,GAAgB,WAAO,IAC1BC,EAAY/I,cAAZ+I,QADyB,EhB++E5B,SAAuBpO,GACtB,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAAiDmB,GAAepB,GgB/+E5CoO,CAAc,CAC7ClK,UAAW,CAAE7B,GAAI8L,KADXjR,EAFyB,EAEzBA,QAAS8F,EAFgB,EAEhBA,KAAMlG,EAFU,EAEVA,MAIvB,OACE,gCACE,cAAC,GAAD,KACK,OAAJkG,QAAI,IAAJA,OAAA,EAAAA,EAAM2J,QACL,qCACE,cAAC,GAAD,CAAMA,MAAO3J,EAAM2J,QACnB,eAAC,KAAD,CAAMnQ,GAAE,kBAAa2R,EAAb,SAA6BnR,UAAU,qBAA/C,oBACUgG,EAAK2J,MAAMiB,eAErB,sBAAK5Q,UAAU,OAAf,mBAA6BgG,EAAK2J,MAAMkB,KAAKxQ,QAC7C,0CAAa2F,EAAK2J,MAAMqB,OAAShL,EAAK2J,MAAMkB,KAAKG,SACjD,6CAAgBhL,EAAK2J,MAAMmB,UAAY9K,EAAK2J,MAAMkB,KAAKC,YACvD,4CAAe9K,EAAK2J,MAAMoB,SAAW/K,EAAK2J,MAAMkB,KAAKE,WACrD,8CACc,IACZ,4BACGM,IAAMrL,EAAK2J,MAAM2B,WAAWC,OAAO,4BACjC,IACJF,IAAMrL,EAAK2J,MAAM2B,WAAWE,aAE/B,oBAAIxR,UAAU,OAAd,uBACA,qBAAKA,UAAU,2CACf,gCACGgG,EAAK2J,MAAM8B,UAAUjL,MAAMC,KAAI,SAACiL,GAAD,OAC9B,sBAAK1R,UAAU,qEAAf,UACE,gCACE,4CAAe0R,EAAEC,QAAQtR,QACzB,6CAAgBqR,EAAEE,YAClB,gDAAmBF,EAAEC,QAAQzH,SAC7B,gDACe,4BAAIwH,EAAEC,QAAQzH,MAAQwH,EAAEE,iBAGzC,8BACE,qBACE5R,UAAU,uDACViM,IAAKyF,EAAEC,QAAQ5E,MACfZ,IAAI,aAKZ,yCACS,IACP,4BACGnG,EAAK2J,MAAM8B,UAAUjL,MAAMqL,QAC1B,SAACC,EAAKC,GAAN,OAAYA,EAAEJ,QAAQzH,MAAQ6H,EAAEH,SAAWE,IAC3C,KAEC,IAPP,eAaN,cAAC,GAAD,CAAS5R,QAASA,IAClB,cAAC,GAAD,CAAOJ,QAASA,EAAOC,QAAO,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAOC,cAKvCwJ,GAAO,SAAC,GAAyC,IAAvCoG,EAAsC,EAAtCA,MAAsC,EACxBlH,mBAASkH,EAAM7F,QADS,oBAC7CA,EAD6C,KACrC4G,EADqC,OAEtBjI,qBAFsB,oBAE7C1I,EAF6C,KAEpC2I,EAFoC,OAIV5F,KAJU,oBAI7C2N,EAJ6C,YAI9BvQ,EAJ8B,EAI9BA,QAASJ,EAJqB,EAIrBA,MACzB6Q,EAAgBR,OAAOC,KAAK1Q,IAElC,OACE,8BACE,8BACE,sBAAKM,UAAU,mBAAf,UACE,cAAC,GAAD,CACEqF,GAAG,SACHrF,UAAS,eAAUmP,GAAerF,GAAzB,oBACTvE,MAAM,SACNiB,MAAOmK,EACPnL,MAAOsE,EAAS6G,EAAcM,QAAQnH,QAAUlB,EAChDnD,SAAU,SAACyJ,GACTwB,EAAUC,EAAczB,OAG5B,wBACExF,SAAUxJ,EACVF,UAAS,UACPE,EAAU,cAAgB,oCADnB,2BAGTgF,QAAO,wBAAE,uBAAA8C,EAAA,6DACPU,OAAWE,GADJ,SAEW6H,EAAY,CAC5BvJ,UAAW,CACTlB,KAAM,CACJX,GAAIsK,EAAMtK,GACVyE,aANC,cAUEjB,QACPH,EAAW,iBAXN,2CALX,oBAsBA,qBAAK1I,UAAU,oBAAf,gBAAoCF,QAApC,IAAoCA,OAApC,EAAoCA,EAAOC,UAC3C,qBAAKC,UAAU,sBAAf,SAAsCD,YC9NzC,SAASiS,KAAgB,IAAD,EACvBjL,EAASH,KADc,EAEepC,GAAiB,CAC3D0C,UAAW,CAAEjB,YAAac,EAAOI,IAAI,QAD/BnB,EAFqB,EAErBA,KAAMlG,EAFe,EAEfA,MAAOuH,EAFQ,EAERA,UAAWD,EAFH,EAEGA,QAFH,EjBiyDxB,SAAkCrE,GACjC,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAA0EZ,GAAuBW,GiB9xDtFiP,GAAjBC,EALsB,qBAO7B,OAAIpS,EACK,uDAIP,gCACE,qBAAKE,UAAU,OAAf,SACE,eAAC,KAAD,CACER,GAAG,mBACHQ,UAAU,mEAFZ,UAIG,IAJH,eAOF,cAAC+F,GAAD,CACE1F,KAAK,WACL2F,KAAI,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAMoF,SACZlF,SAAU,SAACuB,GACTV,EAAOW,IAAI,IAAKD,GAChB,IAAME,EAAUZ,EAAOa,WACvB5C,GAAQ6C,KAAR,oBAA0BF,IAC1BP,EAAQ,CAAEnB,YAAac,EAAOI,IAAI,QAEpChB,WAAY,WACVkB,EAAU,CACRH,UAAW,CAAEY,KAAI,OAAE9B,QAAF,IAAEA,OAAF,EAAEA,EAAMoF,SAAS5E,MAAMuB,WAG5C9B,YAAW,UAAEc,EAAOI,IAAI,YAAb,QAAqB,GAChCf,gBAAiB,SAACM,GAAD,OACf,wBACE1G,UAAU,eACVkF,QAAO,wBAAE,uBAAA8C,EAAA,yDACaC,OAAO,kCAAmC,MAC1CvB,EAAKrG,KAFlB,gCAGC6R,EAAc,CAAEhL,UAAW,CAAE7B,GAAIqB,EAAKrB,MAHvC,OAIL+B,IAJK,2CAFX,0BAkBH,SAAS+K,KACd,IACQC,EADM1R,cACe2R,OAArBD,UAFwB,EjBonF3B,SAAyBrP,GACxB,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAAqDqB,GAAiBtB,GiBnnFlDsP,CAAgB,CAC/CpL,UAAW,CAAE7B,GAAI+M,KADXpM,EAHwB,EAGxBA,KAAM9F,EAHkB,EAGlBA,QAASJ,EAHS,EAGTA,MAHS,EAMAqD,KANA,oBAMzBgI,EANyB,KAMVoH,EANU,KAQhC,OAAIzS,EACK,cAAC,GAAD,IAELI,EACK,cAAC,GAAD,IAIP,gCACE,cAAC,GAAD,IACA,cAAC,GAAD,CACEyR,QAAS3L,EAAM2L,QACfzR,QAASqS,EAAOrS,QAChBJ,MAAOyS,EAAOzS,MACd6I,SAAU,SAAC3C,EAAM6F,GACfV,EAAc,CACZjE,UAAW,CACTlB,KAAK,2BAAMA,GAAP,IAAaX,GAAI+M,IACrBvG,qBASP,SAAS2G,KAAqB,IAAD,EjB0+C7B,SAAkCzP,GACjC,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAA0EnB,GAAuBkB,GiB3+C9EyP,GADE,oBAC3BC,EAD2B,KACZH,EADY,KAGlC,OACE,gCACE,cAAC,GAAD,IACA,cAAC,GAAD,CACErS,QAASqS,EAAOrS,QAChBJ,MAAOyS,EAAOzS,MACd6I,SAAU,SAAC3C,EAAM6F,GACf6G,EAAc,CACZxL,UAAW,CACTlB,OACA6F,qBAwBd,SAAS5C,GACPC,EACAC,GAC2B,IAAD,QAC1B,OAAQA,EAAO7D,MACb,IAAK,OACH,OAAO,2BAAK4D,GAAZ,IAAmB7I,KAAM8I,EAAOC,UAClC,IAAK,WACH,OAAO,2BAAKF,GAAZ,IAAmBW,SAAUV,EAAOC,UACtC,IAAK,QACH,OAAO,2BAAKF,GAAZ,IAAmB6D,MAAO5D,EAAOC,UACnC,IAAK,WACH,OAAO,2BAAKF,GAAZ,IAAmBqB,SAAUpB,EAAOC,UACtC,IAAK,SACH,OAAO,2BAAKF,GAAZ,IAAmBY,OAAQX,EAAOC,UACpC,IAAK,QACH,OAAO,2BAAKF,GAAZ,IAAmBoB,MAAOnB,EAAOC,UACnC,IAAK,QACH,OAAO,2BAAKF,GAAZ,IAAmBgB,MAAOf,EAAOC,UACnC,IAAK,cACH,OAAO,2BAAKF,GAAZ,IAAmBsB,YAAarB,EAAOC,UACzC,IAAK,iBACH,OAAO,2BACFF,GADL,IAEEiB,WAAU,OAAEjB,QAAF,IAAEA,GAAF,UAAEA,EAAOiB,kBAAT,aAAE,EAAmBoD,QAC7B,SAACnD,GAAD,OAAOA,EAAE/E,KAAO8D,EAAOC,QAAQ/D,QAGrC,IAAK,cACH,OAAO,2BACF6D,GADL,IAEEiB,WAAW,GAAD,qCAAOjB,QAAP,IAAOA,OAAP,EAAOA,EAAOiB,kBAAd,QAA4B,IAA5B,CAAiChB,EAAOC,YAEtD,IAAK,mBACH,OAAO,2BACFF,GADL,IAEEmB,YAAW,OAAEnB,QAAF,IAAEA,GAAF,UAAEA,EAAOmB,mBAAT,aAAE,EAAoBkD,QAC/B,SAACnD,GAAD,OAAOA,EAAE/E,KAAO8D,EAAOC,QAAQ/D,QAGrC,IAAK,gBACH,OAAO,2BACF6D,GADL,IAEEmB,YAAY,GAAD,qCAAOnB,QAAP,IAAOA,OAAP,EAAOA,EAAOmB,mBAAd,QAA6B,IAA7B,CAAkClB,EAAOC,YAExD,IAAK,SACH,OAAO,2BACFF,GADL,IAEEa,OAAQZ,EAAOC,UAEnB,IAAK,YACH,OAAO,2BACFF,GADL,IAEEuB,UAAWtB,EAAOC,UAGtB,QACE,OAAOF,GAIb,IAAMyJ,GAAW,SAAC,GAaX,IAAD,8BAZJhB,EAYI,EAZJA,QACAhJ,EAWI,EAXJA,SACAzI,EAUI,EAVJA,QACAJ,EASI,EATJA,MASI,EACqB0J,qBAAWP,GAAD,OAAc0I,QAAd,IAAcA,IAAW,IADxD,oBACG3L,EADH,KACSyD,EADT,OAG8BhB,qBAH9B,oBAGGoD,EAHH,KAGcC,EAHd,KAIEC,EAAWC,mBAEX4G,EAAkBzC,OAAOC,KAAKzQ,IAC9BkT,EAAQ,CAAC,KAAM,MAEf9L,EAASH,KACTkM,EAAOhP,GAAmB,CAC9BoD,UAAW,CACTjB,YAAac,EAAOI,IAAI,WAItB4L,EAAO7O,GAAoB,CAC/BgD,UAAW,CACTjB,YAAac,EAAOI,IAAI,WAItB6L,EAAQpP,GAAgB,CAC5BsD,UAAW,CACTjB,YAAac,EAAOI,IAAI,WAItB8L,EAAOtO,GAAmB,CAC9BuC,UAAW,CACTjB,YAAac,EAAOI,IAAI,WAI5B,OACE,sBAAKnH,UAAU,OAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,cAAC,GAAD,CACEqF,GAAG,OACHE,MAAM,OACNC,MAAOQ,EAAK3F,KACZoF,SAAU,SAACD,GACTiE,EAAS,CAAEnE,KAAM,OAAQ8D,QAAS5D,OAGtC,cAAC,GAAD,CACEH,GAAG,WACHrF,UAAU,OACVuF,MAAM,WACNG,WAAS,EACTF,MAAOQ,EAAK6D,SACZpE,SAAU,SAACD,GACTiE,EAAS,CAAEnE,KAAM,WAAY8D,QAAS5D,OAG1C,cAAC,GAAD,CACEH,GAAG,QACHrF,UAAU,OACVuF,MAAM,QACNC,MAAK,UAAEQ,EAAKkE,aAAP,aAAE,EAAYtC,WACnBnC,SAAU,SAACD,GACT,IAAMuM,EAAImB,SAAS1N,GACnBiE,EAAS,CAAEnE,KAAM,QAAS8D,QAAS+J,MAAMpB,GAAK,EAAIA,OAGtD,cAAC,GAAD,CACE1M,GAAG,QACHrF,UAAU,OACVuF,MAAM,QACNC,MAAK,UAAEQ,EAAKsE,aAAP,aAAE,EAAY1C,WACnBnC,SAAU,SAACD,GACT,IAAMuM,EAAImB,SAAS1N,GACnBiE,EAAS,CAAEnE,KAAM,QAAS8D,QAAS+J,MAAMpB,GAAK,KAAOA,OAGzD,cAAC,GAAD,CACE1M,GAAG,SACHrF,UAAU,OACVuF,MAAM,SACNiB,MAAOoM,EACPpN,MAAOQ,EAAK8D,OAAS8I,EAAgB3B,QAAQjL,EAAK8D,aAAUlB,EAC5DnD,SAAU,SAACyJ,GACTzF,EAAS,CACPnE,KAAM,SACN8D,QAASwJ,EAAgB1D,QAI/B,cAAC,GAAD,CACE7J,GAAG,SACHrF,UAAU,OACVuF,MAAM,WACNiB,MAAOqM,EACPrN,MAAOQ,EAAKuE,SAAWsI,EAAM5B,QAAQjL,EAAKuE,eAAY3B,EACtDnD,SAAU,SAACyJ,GACTzF,EAAS,CACPnE,KAAM,WACN8D,QAASyJ,EAAM3D,QAIrB,qBACElP,UAAU,8BACViM,IAAG,UAAEF,EAASG,eAAX,QAAsBlG,EAAK+G,MAC9BZ,IAAI,KAEN,uBACE9G,GAAG,QACHC,KAAK,OACL8G,OAAO,UACP3G,SAAU,SAACG,GAAO,IACRyG,EAAUzG,EAAEC,OAAZwG,MACFC,EAAOD,GAASA,EAAM,GAE5B,GAAIC,EAAM,CACR,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcH,GACrBC,EAAOG,OAAS,WACdX,EAASG,QAAUK,EAAOI,OAC1Bb,EAAaQ,IAEfC,EAAOK,QAAU,WACfb,EAASG,aAAUtD,EACnBkD,OAAalD,SAGfmD,EAASG,aAAUtD,EACnBkD,OAAalD,MAInB,cAAC,GAAD,CACEvD,GAAG,cACHrF,UAAU,OACVuF,MAAM,eACND,KAAK,OACLE,MAAO6L,IAAMrL,EAAKwE,aAAa+G,OAAO,cACtC9L,SAAU,SAACD,GACTiE,EAAS,CAAEnE,KAAM,cAAe8D,QAASiI,IAAM7L,GAAO4N,cAG1D,qBAAKpT,UAAU,mBAAf,SACE,wBACE0J,SAAUxJ,EACVF,UAAS,UACPE,EAAU,cAAgB,oCADnB,2BAGTgF,QAAS,WACPyD,EAASiB,GAAwB5D,GAAO6F,IAN5C,sBAYF,cAAC,GAAD,CAAO/L,QAASA,EAAOC,QAAO,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAOC,aAEzC,gCACE,sBAAKC,UAAU,mBAAf,UACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,OAAf,gCACA,cAAC+F,GAAD,CACEO,aAAW,EACXjG,KAAK,aACL4F,YAAa,GACbE,WAAY,aACZD,SAAU,aACVF,KAAM,CACJQ,MAAK,UAAER,EAAKmE,kBAAP,QAAqB,GAC1B5D,MAAO,EACPI,SAAS,GAEXP,gBAAiB,SAACM,GAChB,OACE,wBACE1G,UAAU,eACVkF,QAAS,WACPuE,EAAS,CAAEnE,KAAM,iBAAkB8D,QAAS1C,KAHhD,0BAYR,sBAAK1G,UAAU,+BAAf,UACE,qBAAKA,UAAU,OAAf,4BACA,cAAC+F,GAAD,CACEO,aAAW,EACXjG,KAAK,aACL2F,KAAI,UAAE8M,EAAK9M,YAAP,aAAE,EAAWmE,WACjBjE,SAAU,SAACuB,GACTV,EAAOW,IAAI,OAAQD,GACnB,IAAME,EAAUZ,EAAOa,WACvB5C,GAAQ6C,KAAR,oBAA0B7B,EAAKX,GAA/B,iBAA0CsC,IAC1CmL,EAAK1L,QAAQ,CAAEnB,YAAac,EAAOI,IAAI,WAEzChB,WAAY,WAAO,IAAD,EAChB2M,EAAKzL,UAAU,CACbH,UAAW,CAAEY,KAAI,UAAEgL,EAAK9M,YAAP,aAAE,EAAWmE,WAAW3D,MAAMuB,WAGnD9B,YAAW,UAAEc,EAAOI,IAAI,eAAb,QAAwB,GACnCd,UAAW,SAACK,GAAD,eACR,UAACV,EAAKmE,kBAAN,aAAC,EAAiBkB,MAAK,SAACjB,GAAD,OAAOA,EAAE/E,KAAOqB,EAAKrB,QAE/Ce,gBAAiB,SAACM,GAAU,IAAD,EACnB8G,EAAM,UAAGxH,EAAKmE,kBAAR,aAAG,EAAiBkB,MAAK,SAACjB,GAAD,OAAOA,EAAE/E,KAAOqB,EAAKrB,MAE1D,OACE,wBACErF,UAAWwN,EAAS,eAAiB,gBACrCtI,QAAS,WACPuE,EAAS,CACPnE,KAAMkI,EAAS,iBAAmB,cAClCpE,QAAS1C,KALf,SASG8G,EAAS,SAAW,iBAOjC,sBAAKxN,UAAU,wBAAf,UACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,OAAf,iCACA,cAAC+F,GAAD,CACEO,aAAW,EACXjG,KAAK,cACL4F,YAAa,GACbE,WAAY,aACZD,SAAU,aACVF,KAAM,CACJQ,MAAK,UAAER,EAAKqE,mBAAP,QAAsB,GAC3B9D,MAAO,EACPI,SAAS,GAEXP,gBAAiB,SAACM,GAChB,OACE,wBACE1G,UAAU,eACVkF,QAAS,WACPuE,EAAS,CACPnE,KAAM,mBACN8D,QAAS1C,KALf,0BAeR,sBAAK1G,UAAU,+BAAf,UACE,qBAAKA,UAAU,OAAf,6BACA,cAAC+F,GAAD,CACEO,aAAW,EACXjG,KAAK,cACL2F,KAAI,UAAE+M,EAAK/M,YAAP,aAAE,EAAWqE,YACjBnE,SAAU,SAACuB,GACTV,EAAOW,IAAI,OAAQD,GACnB,IAAME,EAAUZ,EAAOa,WACvB5C,GAAQ6C,KAAR,oBAA0B7B,EAAKX,GAA/B,iBAA0CsC,IAC1CoL,EAAK3L,QAAQ,CAAEnB,YAAac,EAAOI,IAAI,WAEzChB,WAAY,WAAO,IAAD,EAChB2M,EAAKzL,UAAU,CACbH,UAAW,CAAEY,KAAI,UAAEiL,EAAK/M,YAAP,aAAE,EAAWqE,YAAY7D,MAAMuB,WAGpD9B,YAAW,UAAEc,EAAOI,IAAI,eAAb,QAAwB,GACnCd,UAAW,SAACK,GAAD,eACR,UAACV,EAAKqE,mBAAN,aAAC,EAAkBgB,MAAK,SAACjB,GAAD,OAAOA,EAAE/E,KAAOqB,EAAKrB,QAEhDe,gBAAiB,SAACM,GAAU,IAAD,EACnB8G,EAAM,UAAGxH,EAAKqE,mBAAR,aAAG,EAAkBgB,MAAK,SAACjB,GAAD,OAAOA,EAAE/E,KAAOqB,EAAKrB,MAE3D,OACE,wBACErF,UAAWwN,EAAS,eAAiB,gBACrCtI,QAAS,WACPuE,EAAS,CACPnE,KAAMkI,EAAS,mBAAqB,gBACpCpE,QAAS1C,KALf,SASG8G,EAAS,SAAW,iBAOjC,sBAAKxN,UAAU,wBAAf,UACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,OAAf,4BACA,wCAAMgG,EAAK+D,cAAX,aAAM,EAAa1J,UAErB,sBAAKL,UAAU,+BAAf,UACE,qBAAKA,UAAU,OAAf,yBACA,cAAC+F,GAAD,CACEO,aAAW,EACXjG,KAAK,aACL2F,KAAI,UAAEgN,EAAMhN,YAAR,aAAE,EAAY6E,QAClB3E,SAAU,SAACuB,GACTV,EAAOW,IAAI,OAAQD,GACnB,IAAME,EAAUZ,EAAOa,WACvB5C,GAAQ6C,KAAR,oBAA0B7B,EAAKX,GAA/B,iBAA0CsC,IAC1CqL,EAAM5L,QAAQ,CAAEnB,YAAac,EAAOI,IAAI,WAE1ChB,WAAY,WAAO,IAAD,EAChB2M,EAAKzL,UAAU,CACbH,UAAW,CAAEY,KAAI,UAAEkL,EAAMhN,YAAR,aAAE,EAAY6E,QAAQrE,MAAMuB,WAGjD9B,YAAW,UAAEc,EAAOI,IAAI,eAAb,QAAwB,GACnCd,UAAW,SAACK,GAAD,aAAU,UAAAV,EAAK+D,cAAL,eAAa1E,MAAOqB,EAAKrB,IAC9Ce,gBAAiB,SAACM,GAAU,IAAD,EACnB4E,GAAQ,UAAAtF,EAAK+D,cAAL,eAAa1E,MAAOqB,EAAKrB,GAEvC,OACE,wBACErF,UAAWsL,EAAQ,gBAAkB,gBACrCpG,QAAS,WACPuE,EAAS,CACPnE,KAAM,SACN8D,QAAS1C,KALf,0BAgBV,sBAAK1G,UAAU,wBAAf,UACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,OAAf,+BACA,wCAAMgG,EAAKyE,iBAAX,aAAM,EAAgBpK,UAExB,sBAAKL,UAAU,+BAAf,UACE,qBAAKA,UAAU,OAAf,4BACA,cAAC+F,GAAD,CACEO,aAAW,EACXjG,KAAK,aACL2F,KAAI,UAAEiN,EAAKjN,YAAP,aAAE,EAAWqN,WACjBnN,SAAU,SAACuB,GACTV,EAAOW,IAAI,OAAQD,GACnB,IAAME,EAAUZ,EAAOa,WACvB5C,GAAQ6C,KAAR,oBAA0B7B,EAAKX,GAA/B,iBAA0CsC,IAC1CqL,EAAM5L,QAAQ,CAAEnB,YAAac,EAAOI,IAAI,WAE1ChB,WAAY,WAAO,IAAD,EAChB2M,EAAKzL,UAAU,CACbH,UAAW,CAAEY,KAAI,UAAEkL,EAAMhN,YAAR,aAAE,EAAY6E,QAAQrE,MAAMuB,WAGjD9B,YAAW,UAAEc,EAAOI,IAAI,eAAb,QAAwB,GACnCd,UAAW,SAACK,GAAD,aAAU,UAAAV,EAAKyE,iBAAL,eAAgBpF,MAAOqB,EAAKrB,IACjDe,gBAAiB,SAACM,GAAU,IAAD,EACnB4E,GAAQ,UAAAtF,EAAKyE,iBAAL,eAAgBpF,MAAOqB,EAAKrB,GAE1C,OACE,wBACErF,UAAWsL,EAAQ,gBAAkB,gBACrCpG,QAAS,WACPuE,EAAS,CACPnE,KAAM,YACN8D,QAAS1C,KALf,iCCxkBL4M,GAAiB,WAAO,IAAD,EAC5BvM,EAASH,KACT5B,EAAUC,cAFkB,EAIUN,GAAmB,CAC7DuC,UAAW,CACTjB,YAAac,EAAOI,IAAI,QAFpBnB,EAJ0B,EAI1BA,KAAMlG,EAJoB,EAIpBA,MAAOuH,EAJa,EAIbA,UAAWD,EAJE,EAIFA,QAJE,ElB60D7B,SAAoCrE,GACnC,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAA8EX,GAAyBU,GkBr0D1FuQ,GAAnBC,EAV2B,qBAYlC,OAAI1T,EACK,uDAIP,gCACE,qBAAKE,UAAU,OAAf,SACE,eAAC,KAAD,CACER,GAAG,qBACHQ,UAAU,mEAFZ,UAIG,IAJH,eAOF,cAAC+F,GAAD,CACE1F,KAAK,aACL2F,KAAI,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAMqN,WACZnN,SAAU,SAACuB,GACTV,EAAOW,IAAI,IAAKD,GAChB,IAAME,EAAUZ,EAAOa,WACvB5C,EAAQ6C,KAAR,sBAA4BF,IAC5BP,EAAQ,CAAEnB,YAAac,EAAOI,IAAI,QAEpChB,WAAY,WACVkB,EAAU,CACRH,UAAW,CAAEY,KAAI,OAAE9B,QAAF,IAAEA,OAAF,EAAEA,EAAMqN,WAAW7M,MAAMuB,WAG9C9B,YAAW,UAAEc,EAAOI,IAAI,YAAb,QAAqB,GAChCf,gBAAiB,SAACM,GAAD,OACf,wBACE1G,UAAU,eACVkF,QAAO,wBAAE,uBAAA8C,EAAA,yDACMC,OAAO,0BAA2B,MAClCvB,EAAKrG,KAFX,gCAGCmT,EAAgB,CAAEtM,UAAW,CAAE7B,GAAIqB,EAAKrB,MAHzC,OAIL+B,IAJK,2CAFX,2BAkBGqM,GAAoB,WAAO,IAAD,YAC7BC,EAAgBtL,cAAhBsL,YACF3M,EAASH,KAET+M,ElBysFD,SAA2B5Q,GAC1B,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAAyDwB,GAAmBzB,GkB3sF7E4Q,CAAkB,CAC5B1M,UAAW,CAAE7B,GAAIqO,EAAazN,YAAac,EAAOI,IAAI,SAGlD+D,EAAQ1G,GAAiB,CAC7B0C,UAAW,CAAEjB,YAAac,EAAOI,IAAI,SATF,EAYbhE,KAAjBgI,EAZ8B,qBAc/BnG,EAAUC,cAEhB,OAAI0O,EAAI7T,MACC,cAAC,GAAD,IAIP,gCACE,cAAC,GAAD,IACA,sBAAKE,UAAU,mBAAf,WACI2T,EAAIzT,UAAL,UAAgByT,EAAI3N,YAApB,aAAgB,EAAUyE,WACzB,cAAC,GAAD,CAAMA,UAAWkJ,EAAI3N,KAAMyE,YAE3B,cAAC,GAAD,IAEF,qBAAKzK,UAAU,+BAAf,SACE,cAAC+F,GAAD,CACEO,aAAW,EACXjG,KAAK,WACL2F,KAAI,UAAE2N,EAAI3N,YAAN,iBAAE,EAAUyE,iBAAZ,aAAE,EAAqBW,SAC3BlF,SAAU,SAACuB,GACTV,EAAOW,IAAI,KAAMD,GACjB,IAAME,EAAUZ,EAAOa,WACvB5C,EAAQ6C,KAAR,sBAA4B6L,EAA5B,iBAAgD/L,IAChDgM,EAAIvM,QAAQ,CAAEnB,YAAac,EAAOI,IAAI,SAExChB,WAAY,WAAO,IAAD,IAChBwN,EAAItM,UAAU,CACZH,UAAW,CAAEY,KAAI,UAAE6L,EAAI3N,YAAN,iBAAE,EAAUyE,iBAAZ,aAAE,EAAqBW,SAAS5E,MAAMuB,WAG3D9B,YAAW,UAAEc,EAAOI,IAAI,aAAb,QAAsB,GACjCf,gBAAiB,SAACM,GAAD,OACf,wBACE1G,UAAU,eACVkF,QAAO,wBAAE,uBAAA8C,EAAA,yDACF2B,OAAO4B,QAAQ,iBADb,iEAEDJ,EAAc,CAClBjE,UAAW,CACTlB,KAAK,yBACHX,GAAIqB,EAAKrB,IACNuE,GAAwBlD,IAFzB,IAGF+D,UAAW,UAPV,OAWPkJ,EAAIvM,UACJ8D,EAAM9D,UAZC,2CAFX,yBAsBN,qBAAKpH,UAAU,+BAAf,SACE,cAAC+F,GAAD,CACEO,aAAW,EACXjG,KAAK,WACL2F,KAAI,UAAEkF,EAAMlF,YAAR,aAAE,EAAYoF,SAClBlF,SAAU,SAACuB,GACTV,EAAOW,IAAI,KAAMD,GACjB,IAAME,EAAUZ,EAAOa,WACvB5C,EAAQ6C,KAAR,sBAA4B6L,EAA5B,iBAAgD/L,IAChDuD,EAAM9D,QAAQ,CAAEnB,YAAac,EAAOI,IAAI,SAE1ChB,WAAY,WAAO,IAAD,EAChB+E,EAAM7D,UAAU,CACdH,UAAW,CAAEY,KAAI,UAAEoD,EAAMlF,YAAR,aAAE,EAAYoF,SAAS5E,MAAMuB,WAGlD9B,YAAW,UAAEc,EAAOI,IAAI,aAAb,QAAsB,GACjCd,UAAW,SAACK,GAAD,aAAU,UAAAA,EAAK+D,iBAAL,eAAgBpF,MAAOqO,GAC5CtN,gBAAiB,SAACM,GAAU,IAAD,EACnB8G,GAAS,UAAA9G,EAAK+D,iBAAL,eAAgBpF,MAAOqO,EACtC,OACE,wBACE1T,UAAWwN,EAAS,eAAiB,gBACrCtI,QAAO,wBAAE,uBAAA8C,EAAA,yDACF2B,OAAO4B,QAAQ,iBADb,iEAEDJ,EAAc,CAClBjE,UAAW,CACTlB,KAAK,2BACA4D,GAAwB,2BACtBlD,GADqB,IAExB+D,UAAW+C,OAAS5E,EAAY,CAAEvD,GAAIqO,OAHtC,IAKFrO,GAAIqB,EAAKrB,QATR,OAaPsO,EAAIvM,UACJ8D,EAAM9D,UAdC,2CAFX,SAmBGoG,EAAS,SAAW,oBAW1BqG,GAAsB,WAAO,IAAD,EACfpL,mBAAS,IADM,oBAChCpI,EADgC,KAC1BoL,EAD0B,OAEThD,qBAFS,oBAEhC1I,EAFgC,KAEvB2I,EAFuB,OlB87ClC,SAAoC3F,GACnC,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAA8ElB,GAAyBiB,GkB37ClH8Q,GALqC,oBAIhCC,EAJgC,YAIb/N,EAJa,EAIbA,KAAM9F,EAJO,EAIPA,QAASJ,EAJF,EAIEA,MAGzC,cAAIkG,QAAJ,IAAIA,OAAJ,EAAIA,EAAM+N,iBACD,cAAC,IAAD,CAAUvU,GAAE,sBAAiBwG,EAAM+N,gBAAgB1O,GAAvC,WAInB,gCACE,qBAAKrF,UAAU,OAAf,SACE,cAAC,GAAD,MAEF,gCACE,cAAC,GAAD,CACEqF,GAAG,OACHE,MAAM,OACNC,MAAOnF,EACPoF,SAAU,SAACD,GACTiG,EAAQjG,MAGZ,sBAAKxF,UAAU,mBAAf,UACE,wBACE0J,SAAUxJ,EACVF,UAAS,UACPE,EAAU,cAAgB,oCADnB,2BAGTgF,QAAO,wBAAE,uBAAA8C,EAAA,6DACPU,OAAWE,GADJ,SAEWmL,EAAgB,CAChC7M,UAAW,CACTlB,KAAM,CACJ3F,WALC,cASEwI,QACPH,EAAW,qBAVN,2CALX,oBAqBA,cAAC,GAAD,CAASxI,QAASA,IAClB,cAAC,GAAD,CAAOJ,QAASA,EAAOC,QAAO,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAOC,UACvC,qBAAKC,UAAU,sBAAf,SAAsCD,cAO1CwJ,GAAO,SAAC,GAAqD,IAAnDkB,EAAkD,EAAlDA,UAAkD,EACxChC,mBAASgC,EAAUpK,MADqB,oBACzDA,EADyD,KACnDoL,EADmD,OAElChD,qBAFkC,oBAEzD1I,EAFyD,KAEhD2I,EAFgD,OlB45D3D,SAAoC3F,GACnC,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAA8EG,GAAyBJ,GkB15DtEgR,GAJkB,oBAIzDC,EAJyD,YAItC/T,EAJsC,EAItCA,QAASJ,EAJ6B,EAI7BA,MAEnC,OACE,8BACE,gCACE,cAAC,GAAD,CACEuF,GAAG,OACHE,MAAM,OACNC,MAAOnF,EACPoF,SAAU,SAACD,GACTiG,EAAQjG,MAGZ,sBAAKxF,UAAU,mBAAf,UACE,wBACE0J,SAAUxJ,EACVF,UAAS,UACPE,EAAU,cAAgB,oCADnB,2BAGTgF,QAAO,wBAAE,uBAAA8C,EAAA,6DACPU,OAAWE,GADJ,SAEWqL,EAAgB,CAChC/M,UAAW,CACTlB,KAAM,CACJX,GAAIoF,EAAUpF,GACdhF,WANC,cAUEwI,QACPH,EAAW,qBAXN,2CALX,oBAsBA,qBAAK1I,UAAU,oBAAf,gBAAoCF,QAApC,IAAoCA,OAApC,EAAoCA,EAAOC,UAC3C,qBAAKC,UAAU,sBAAf,SAAsCD,aCxRhD,SAASoP,GAAerF,GACtB,OAAOA,IAAWlK,GAAkBwP,QAChC,gBACAtF,IAAWlK,GAAkB0P,OAC7B,aACAxF,IAAWlK,GAAkBsU,QAC7B,eACApK,IAAWlK,GAAkBuU,WAC7B,cACA,gBAGC,IAAMC,GAAmB,WAAO,IAAD,EnB05F/B,SAA8BrR,GAC7B,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAA+D4B,GAAsB7B,GmB35F7CqR,CAAqB,CACxEnN,UAAW,CACTyI,MAAO,CAAC,CAAEC,MAAO,YAAaD,MAAOlQ,GAAQoQ,UAFzC7J,EAD4B,EAC5BA,KAAsBoB,GADM,EACtBtH,MADsB,EACfI,QADe,EACNkH,SAASC,EADH,EACGA,UAkBvC,OAbA0H,qBAAU,WACR,IAAMe,EAAaC,aAAY,WAC7B,IAAMC,GAAW,OAAJhK,QAAI,IAAJA,OAAA,EAAAA,EAAMsO,SAAS9N,MAAMuB,SAAU,EAE5CX,EAAQ,CACN4I,WAED,KAEH,OAAO,kBAAME,cAAcJ,MAE1B,QAAC9J,QAAD,IAACA,OAAD,EAACA,EAAMsO,SAAS9N,MAAMuB,SAGvB,gCACE,mDACA,qBAAK/H,UAAU,4BAAf,SACGmQ,OAAOC,KAAKxQ,IAAmB6G,KAAI,SAAChG,GAAD,OAClC,qBACET,UAAS,mBAAcmP,GAAe1O,WAL9C,OASGuF,QATH,IASGA,OATH,EASGA,EAAMsO,SAAS9N,MAAMC,KAAI,SAAC4J,GAAD,OACxB,cAAC,GAAD,CAA4BkE,YAAalE,GAAnBA,EAAEhL,QAErB,OAAJW,QAAI,IAAJA,OAAA,EAAAA,EAAMsO,SAAS3N,SACd,qBAAK3G,UAAU,mBAAf,SACE,wBACEA,UAAU,mEACVkF,QAAS,WACPmC,EAAU,CACRH,UAAW,CAAEY,KAAM9B,EAAKsO,SAAS9N,MAAMuB,WAJ7C,yBAWA,SAKJyM,GAAkB,SAAC,GAIlB,IAHLD,EAGI,EAHJA,YAGI,EACsC9L,mBAAS8L,EAAYzK,QAD3D,oBACGyG,EADH,KACkBC,EADlB,OAGFlN,KAHE,oBAEGmR,EAFH,YAEwBvU,EAFxB,EAEwBA,QAFxB,KAEiCJ,MAET2I,mBAAS8L,EAAYzK,SAJ7C,oBAIGA,EAJH,KAIW4G,EAJX,KAKEgE,EAAsBvE,OAAOC,KAAKxQ,IAOxC,OALAmP,qBAAU,WACRyB,EAAiB+D,EAAYzK,QAC7B4G,EAAU6D,EAAYzK,UACrB,CAACyK,EAAYlP,GAAIkP,EAAYzK,SAG9B,sBACE9J,UAAS,qCAAgCmP,GACvCrF,GADO,kBADX,UAKE,yCAAYyK,EAAY1D,KAAKxQ,QAC7B,0CAAakU,EAAY1D,KAAKG,SAC9B,4CACY,IACTuD,EAAY1D,KAAKC,UAChB,sBAAM9Q,UAAU,eAAhB,4BAGJ,oDACmB,4BAAIuU,EAAYI,aAEnC,sBAAK3U,UAAU,yCAAf,UACE,cAAC,GAAD,CACEqF,GAAG,SACHE,MAAM,SACNiB,MAAOkO,EACPlP,MAAOsE,EAAS4K,EAAoBzD,QAAQnH,QAAUlB,EACtDnD,SAAU,SAACyJ,GACTwB,EAAUgE,EAAoBxF,OAGlC,wBACExF,SAAUxJ,GAAWqQ,IAAkBzG,EACvC9J,UAAS,UACPE,EACI,cACAqQ,IAAkBzG,EAClB,oCACA,cALG,mCAOT5E,QAAO,wBAAE,uBAAA8C,EAAA,sEACWyM,EAAkB,CAClCvN,UAAW,CACTlB,KAAM,CACJX,GAAIkP,EAAYlP,GAChBsP,QAASJ,EAAYI,QACrB7K,aANC,cAUEjB,QACP2H,EAAiB1G,GAXZ,2CATX,2BCvGK8K,GAAY,WAAO,IAAD,EACvB7N,EAASH,KADc,EpB88FxB,SAAuB7D,GACtB,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAAiD6B,GAAe9B,GoB98FxB6R,CAAc,CACjE3N,UAAW,CAAEjB,YAAac,EAAOI,IAAI,QAD/BnB,EAFqB,EAErBA,KAAM9F,EAFe,EAEfA,QAASJ,EAFM,EAENA,MAAOsH,EAFD,EAECA,QAASC,EAFV,EAEUA,UAFV,EpB44DxB,SAA+BtE,GAC9B,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAAoEV,GAAoBS,GoBz4DhF8R,GAAdC,EALsB,qBAOvB/P,EAAUC,cAChB,OAAInF,EACK,uDAGLI,EACK,6CAIP,gCACE,qBAAKF,UAAU,OAAf,SACE,eAAC,KAAD,CACER,GAAG,gBACHQ,UAAU,mEAFZ,UAIG,IAJH,eAOF,cAAC+F,GAAD,CACE1F,KAAK,QACL2F,KAAI,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAMgP,MACZ9O,SAAU,SAACuB,GACTV,EAAOW,IAAI,IAAKD,GAChB,IAAME,EAAUZ,EAAOa,WACvB5C,EAAQ6C,KAAR,iBAAuBF,IACvBP,EAAQ,CAAEnB,YAAac,EAAOI,IAAI,QAEpChB,WAAY,WACVkB,EAAU,CACRH,UAAW,CAAEY,KAAI,OAAE9B,QAAF,IAAEA,OAAF,EAAEA,EAAMgP,MAAMxO,MAAMuB,WAGzC9B,YAAW,UAAEc,EAAOI,IAAI,YAAb,QAAqB,GAChCf,gBAAiB,SAACM,GAAD,OACf,wBACE1G,UAAU,eACVkF,QAAO,wBAAE,uBAAA8C,EAAA,yDACMC,OAAO,aAAc,MACrBvB,EAAKrG,KAFX,gCAGC0U,EAAW,CAAE7N,UAAW,CAAE7B,GAAIqB,EAAKrB,MAHpC,OAIL+B,IAJK,2CAFX,2BAkBG6N,GAAe,WAAO,IACzBC,EAAW9M,cAAX8M,OADwB,EpB2xF3B,SAAsBnS,GACrB,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAA+C2B,GAAc5B,GoB1xFzCmS,CAAa,CAC5CjO,UAAW,CAAE7B,GAAI6P,KADXlP,EAHwB,EAGxBA,KAAM9F,EAHkB,EAGlBA,QAASJ,EAHS,EAGTA,MAHS,EpB2oE3B,SAA+BiD,GAC9B,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAAoEM,GAAoBP,GoBtoE1EoS,GAPK,oBAOzBC,EAPyB,KAObxE,EAPa,OAQFpI,qBARE,oBAQzB1I,EARyB,KAQhB2I,EARgB,KAUhC,OAAI5I,EACK,cAAC,GAAD,IAIP,gCACE,cAAC,GAAD,KACEI,IAAD,OAAY8F,QAAZ,IAAYA,OAAZ,EAAYA,EAAM6K,MACjB,cAAC,GAAD,CACEA,KAAM7K,EAAM6K,KACZ3Q,QAAS2Q,EAAK3Q,QACdJ,MAAO+Q,EAAK/Q,MACZ6I,SAAQ,yCAAE,WAAO3C,GAAP,UAAAgC,EAAA,6DACRU,OAAWE,GADH,SAEUyM,EAAW,CAC3BnO,UAAW,CAAElB,KAAK,2BAAMA,GAAP,IAAaX,GAAI6P,OAH5B,cAKCrM,QACPH,EAAW,gBANL,2CAAF,wDAWV,cAAC,GAAD,IAEF,qBAAK1I,UAAU,iBAAf,SAAiCD,QAK1BuV,GAAiB,WAAO,IAAD,EpBgjD7B,SAA+BvS,GAC9B,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAAoEjB,GAAoBgB,GoBjjD5DuS,GADP,oBAC3BC,EAD2B,YACbtV,EADa,EACbA,QAASJ,EADI,EACJA,MADI,EAEJ2I,qBAFI,oBAE3B1I,EAF2B,KAElB2I,EAFkB,KAIlC,OACE,gCACE,cAAC,GAAD,IACA,cAAC,GAAD,CACExI,QAASA,EACTJ,MAAOA,EACP6I,SAAQ,yCAAE,WAAO3C,GAAP,UAAAgC,EAAA,6DACRU,OAAWE,GADH,SAEU4M,EAAW,CAAEtO,UAAW,CAAElB,KAAMA,KAF1C,cAGC6C,QACPH,EAAW,gBAJL,2CAAF,wDAQV,qBAAK1I,UAAU,iBAAf,SAAiCD,QAYvC,SAASkJ,GACPC,EACAC,GAEA,OAAQA,EAAO7D,MACb,IAAK,OACH,OAAO,2BAAK4D,GAAZ,IAAmB7I,KAAM8I,EAAOC,UAClC,IAAK,QACH,OAAO,2BAAKF,GAAZ,IAAmB8H,MAAO7H,EAAOC,UACnC,IAAK,WACH,OAAO,2BAAKF,GAAZ,IAAmBI,SAAUH,EAAOC,UACtC,IAAK,WACH,OAAO,2BAAKF,GAAZ,IAAmB4H,SAAU3H,EAAOC,UACtC,IAAK,UACH,OAAO,2BAAKF,GAAZ,IAAmB6H,QAAS5H,EAAOC,UACrC,IAAK,YACH,OAAO,2BAAKF,GAAZ,IAAmBuM,UAAWtM,EAAOC,UACvC,QACE,OAAOF,GAIb,I,GAAMK,GAAO,SAAC,GAUP,IAAD,MATJsH,EASI,EATJA,KACAlI,EAQI,EARJA,SACA7I,EAOI,EAPJA,MACAI,EAMI,EANJA,QAMI,EACqBsJ,qBACvBP,GACA4H,EAAI,2BAEKA,GAFL,IAGE4E,UACqB,OAAnB5E,EAAK4E,gBAAyC7M,IAAnBiI,EAAK4E,WAE5B5E,EAAK4E,YAEb,IAXF,oBACGzP,EADH,KACSyD,EADT,KAcJ,OACE,8BACE,gCACE,cAAC,GAAD,CACEzJ,UAAU,OACVqF,GAAG,OACHE,MAAM,OACNC,MAAOQ,EAAK3F,KACZoF,SAAU,SAACD,GACTiE,EAAS,CAAEnE,KAAM,OAAQ8D,QAAS5D,OAGtC,cAAC,GAAD,CACExF,UAAU,OACVqF,GAAG,QACHE,MAAM,QACNC,MAAOQ,EAAKgL,MACZvL,SAAU,SAACD,GACTiE,EAAS,CAAEnE,KAAM,QAAS8D,QAAS5D,OAGvC,cAAC,GAAD,CACExF,UAAU,OACVqF,GAAG,WACHE,MAAM,WACNC,MAAK,UAAEQ,EAAK8K,gBAAP,QAAmB,GACxBrL,SAAU,SAACD,GACTiE,EAAS,CAAEnE,KAAM,WAAY8D,QAAS5D,OAG1C,cAAC,GAAD,CACExF,UAAU,OACVqF,GAAG,UACHE,MAAM,UACNC,MAAK,UAAEQ,EAAK+K,eAAP,QAAkB,GACvBtL,SAAU,SAACD,GACTiE,EAAS,CAAEnE,KAAM,UAAW8D,QAAS5D,OAGzC,cAAC,GAAD,CACExF,UAAU,OACVqF,GAAG,WACHE,MAAM,WACNC,MAAK,UAAEQ,EAAKsD,gBAAP,QAAmB,GACxB7D,SAAU,SAACD,GACTiE,EAAS,CAAEnE,KAAM,WAAY8D,QAAS5D,OAG1C,uBAAOxF,UAAU,OAAO8F,QAAQ,YAAhC,uBAGA,uBACE9F,UAAU,OACVsF,KAAK,WACLE,MAAM,YACNkQ,QAAS1P,EAAKyP,UACdhQ,SAAU,SAACG,GACT6D,EAAS,CAAEnE,KAAM,YAAa8D,QAASxD,EAAEC,OAAO6P,aAGpD,sBAAK1V,UAAU,mBAAf,UACE,wBACE0J,SAAUxJ,EACVF,UAAS,UACPE,EAAU,cAAgB,oCADnB,2BAGTgF,QAAS,WAAO,IAAD,EACb,IAAKc,EAAK3F,OAAS2F,EAAKgL,MACtB,MAAM,IAAIrH,OAAO9J,MAAM,2BACzB8I,EAAS,CACPtI,KAAM2F,EAAK3F,KACXiJ,SAAQ,UAAGtD,EAAKsD,gBAAR,aAAoBV,EAC5BoI,MAAOhL,EAAKgL,MACZD,QAAS/K,EAAK+K,QACdD,SAAU9K,EAAK8K,SACf2E,UAAWzP,EAAKyP,aAdtB,oBAoBA,qBAAKzV,UAAU,oBAAf,gBAAoCF,QAApC,IAAoCA,OAApC,EAAoCA,EAAOC,mBCnPxC4V,GAAW,WACtB,OACE,sBAAK3V,UAAU,OAAf,UACE,cAAC,GAAD,IACA,qBAAKA,UAAU,WAAf,SACE,eAAC,IAAD,WACE,cAACZ,EAAD,CAAgBgB,KAAK,wBAArB,SACE,cAAC,GAAD,MAEF,cAAChB,EAAD,CAAgBgB,KAAK,UAArB,SACE,cAAC,GAAD,MAEF,cAAChB,EAAD,CAAgBgB,KAAK,YAArB,SACE,cAAC,GAAD,MAEF,cAAChB,EAAD,CAAgBgB,KAAK,sBAArB,SACE,cAAC,GAAD,MAEF,cAAChB,EAAD,CAAgBgB,KAAK,gBAArB,SACE,cAAC,GAAD,MAEF,cAAChB,EAAD,CAAgBgB,KAAK,SAArB,SACE,cAAC,GAAD,MAEF,cAAChB,EAAD,CAAgBgB,KAAK,wBAArB,SACE,cAAC,GAAD,MAEF,cAAChB,EAAD,CAAgBgB,KAAK,iBAArB,SACE,cAAC,GAAD,MAEF,cAAChB,EAAD,CAAgBgB,KAAK,UAArB,SACE,cAAC,GAAD,MAEF,cAAChB,EAAD,CAAgBgB,KAAK,gCAArB,SACE,cAAC,GAAD,MAEF,cAAChB,EAAD,CAAgBgB,KAAK,qBAArB,SACE,cAAC,GAAD,MAEF,cAAChB,EAAD,CAAgBgB,KAAK,cAArB,SACE,cAAC,GAAD,MAEF,cAAChB,EAAD,CAAgBgB,KAAK,0BAArB,SACE,cAAC,GAAD,MAEF,cAAChB,EAAD,CAAgBgB,KAAK,kBAArB,SACE,cAAC,GAAD,MAEF,cAAChB,EAAD,CAAgBgB,KAAK,WAArB,SACE,cAAC,GAAD,MAEF,cAAChB,EAAD,CAAgBgB,KAAK,kCAArB,SACE,cAAC,GAAD,MAEF,cAAChB,EAAD,CAAgBgB,KAAK,sBAArB,SACE,cAAC,GAAD,MAEF,cAAChB,EAAD,CAAgBgB,KAAK,eAArB,SACE,cAAC,GAAD,MAEF,cAAChB,EAAD,CAAgBgB,KAAK,qBAArB,SACE,cAAC,GAAD,MAEF,cAAChB,EAAD,CAAgBgB,KAAK,+BAArB,SACE,cAAC,GAAD,MAEF,cAAChB,EAAD,CAAgBgB,KAAK,cAArB,SACE,cAAC,GAAD,MAEF,cAAChB,EAAD,CAAgBgB,KAAK,4BAArB,SACE,cAAC+R,GAAD,MAEF,cAAC/S,EAAD,CAAgBgB,KAAK,mBAArB,SACE,cAACoS,GAAD,MAEF,cAACpT,EAAD,CAAgBgB,KAAK,YAArB,SACE,cAAC4R,GAAD,MAEF,cAAC5S,EAAD,CAAgBgB,KAAK,UAArB,SACE,cAAC,GAAD,MAEF,cAAChB,EAAD,CAAgBgB,KAAK,IAArB,SACE,cAAC,GAAD,eAQNwV,GAAgB,WAAO,IAAD,ErBi+ErB,SAA2B7S,GAC1B,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAAyDkB,GAAmBnB,GqBl+ExD6S,GAAzB7P,EADkB,EAClBA,KAAM9F,EADY,EACZA,QAASJ,EADG,EACHA,MAEvB,OACE,gCACE,cAAC,GAAD,CAASI,QAASA,IAClB,cAAC,GAAD,CAAOJ,QAASA,EAAOC,QAAO,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAOC,UACtCiG,GACC,sBAAKhG,UAAU,iBAAf,UACE,cAAC,GAAD,CACEK,KAAK,QACLkG,MAAOP,EAAKgP,MAAMzO,MAClBuP,MAAM,UACN9V,UAAU,cAEZ,cAAC,GAAD,CACEK,KAAK,WACLkG,MAAOP,EAAKoF,SAAS7E,MACrBuP,MAAM,WACN9V,UAAU,cAEZ,cAAC,GAAD,CACEK,KAAK,SACLkG,MAAOP,EAAKiK,OAAO1J,MACnBuP,MAAM,aACN9V,UAAU,cAEZ,cAAC,GAAD,CACEK,KAAK,WACLkG,MAAOP,EAAKsO,SAAS/N,MACrBuP,MAAM,YACN9V,UAAU,cAEZ,cAAC,GAAD,CACEK,KAAK,aACLkG,MAAOP,EAAKmE,WAAW5D,MACvBuP,MAAM,aACN9V,UAAU,cAEZ,cAAC,GAAD,CACEK,KAAK,cACLkG,MAAOP,EAAKqE,YAAY9D,MACxBuP,MAAM,aACN9V,UAAU,cAEZ,cAAC,GAAD,CACEK,KAAK,UACLkG,MAAOP,EAAK6E,QAAQtE,MACpBuP,MAAM,WACN9V,UAAU,cAEZ,cAAC,GAAD,CACEK,KAAK,aACLkG,MAAOP,EAAKqN,WAAW9M,MACvBuP,MAAM,WACN9V,UAAU,cAEZ,cAAC,GAAD,CACEK,KAAK,SACLkG,MAAOP,EAAKwB,OAAOjB,MACnBuP,MAAM,UACN9V,UAAU,qBAQhB+V,GAAO,SAAC,GAUP,IATL1V,EASI,EATJA,KACAkG,EAQI,EARJA,MACAuP,EAOI,EAPJA,MACA9V,EAMI,EANJA,UAOA,OACE,eAAC,KAAD,CACER,GAAE,WAAMa,EAAK2V,eACbhW,UAAS,aAAQ8V,EAAR,kFACP9V,QADO,IACPA,IAAa,IAHjB,UAME,oBAAIA,UAAU,sBAAd,SAAqCK,IACrC,qBAAKL,UAAU,sBAAf,SAAsCuG,QC/M/B0P,GAAY,WAAO,IAAD,IACHxN,mBAAS,IADN,oBACtBY,EADsB,KACf6M,EADe,OAEGzN,mBAAS,IAFZ,oBAEtBa,EAFsB,KAEZ6M,EAFY,OtB47DxB,SAA0BpT,GACzB,IAAMC,EAAO,2BAAOpC,IAAmBmC,GACvC,OAAOE,KAA0DT,GAAeQ,GsB37D5CoT,GAHb,oBAGtBC,EAHsB,YAGbrQ,EAHa,EAGbA,KAAM9F,EAHO,EAGPA,QAASJ,EAHF,EAGEA,MAE/B,OAAQ,OAAJkG,QAAI,IAAJA,GAAA,UAAAA,EAAMsQ,kBAAN,eAAkBC,cAAejX,aAAaC,QAAQ,SACjD,cAAC,IAAD,CAAUC,GAAG,MAIpB,sBAAKQ,UAAU,iCAAf,UACE,uBACEA,UAAU,WACVsF,KAAK,QACLoE,SAAUxJ,EACVG,KAAK,WACLsF,YAAY,QACZH,MAAO6D,EACP5D,SAAU,SAACG,GAAD,OAAOsQ,EAAStQ,EAAEC,OAAOL,UAErC,uBACExF,UAAU,WACVsF,KAAK,WACLjF,KAAK,WACLqJ,SAAUxJ,EACVyF,YAAY,WACZH,MAAO8D,EACP7D,SAAU,SAACG,GAAD,OAAOuQ,EAAYvQ,EAAEC,OAAOL,UAEvC1F,GAAS,qBAAKQ,MAAO,CAAEwV,MAAO,OAArB,kCACV,wBACE9V,UAAS,mBAAcE,EAAU,gBAAkB,iBACnDwJ,SAAUxJ,EACVoF,KAAK,SACLJ,QAAO,yCAAE,WAAOU,GAAP,oBAAAoC,EAAA,6DACPpC,EAAE4I,iBADK,SAEW6H,EAAM,CAAEnP,UAAW,CAAElB,KAAM,CAAEqD,QAAOC,eAF/C,OAEDkN,EAFC,QAGP,UAAIA,EAAIxQ,YAAR,aAAI,EAAUsQ,WAAWC,cACvBjX,aAAamX,QAAQ,QAArB,UAA8BD,EAAIxQ,YAAlC,aAA8B,EAAUsQ,WAAWC,aAJ9C,2CAAF,sDAJT,uB,SC5BOvR,GAAU0R,aAAqB,CAC1CC,SAAUC,eAGCC,GAAsB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACpC,OACE,eAAC,IAAD,CAAQ9R,QAASA,GAAjB,UACG8R,EACD,eAAC,IAAD,WACE,cAAC,IAAD,CAAO1W,KAAK,SAAZ,SACE,cAAC,GAAD,MAEF,cAAChB,EAAD,CAAgBgB,KAAK,IAArB,SACE,cAAC,GAAD,a,wDCbJ2W,G,OAAWC,GAAiB,CAChCC,IAAG,WAAEL,6IAAYM,mBAAd,UAA6B,kCAG5BC,GAAWC,cAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAC1BC,EAAQjY,aAAaC,QAAQ,SACnC,MAAO,CACL+X,QAAQ,2BACHA,GADE,IAELE,cAAeD,EAAK,iBAAaA,GAAU,SAK3CE,GAAaC,cAAQ,YAAuB,IAApBC,EAAmB,EAAnBA,aACc,OAAtC,OAACA,QAAD,IAACA,OAAD,EAACA,EAAsBC,aACzBjJ,QAIEkJ,GAAmB,CACvBC,QAAS,CAAC,QAAS,eACnBC,MAAO,SAACC,EAAeC,GAAmB,IAAD,IACvC,OAAO,2BACFA,GADL,IAEEzR,MAAM,GAAD,qCAAOwR,QAAP,IAAOA,OAAP,EAAOA,EAAUxR,aAAjB,QAA0B,IAA1B,8BAAmCyR,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAUzR,aAA7C,QAAsD,SAKpD0R,GAAS,IAAIC,KAAa,CACrCC,KAAMC,aAAK,CAACZ,GAAYN,GAAUJ,KAClCuB,MAAO,IAAIC,KAAc,CACvBC,aAAc,CACZC,MAAO,CACLC,OAAQ,CACNvO,WAAY0N,GACZxN,YAAawN,GACbzM,SAAUyM,GACV7C,MAAO6C,GACPhN,QAASgN,GACTxE,WAAYwE,GACZrQ,OAAQqQ,GACRvD,SAAUuD,GACV5H,OAAQ4H,KAGZc,SAAU,CACRD,OAAQ,CACNtN,SAAUyM,UC3CLe,OARf,WACE,OACE,cAACC,EAAA,EAAD,CAAgBX,OAAQA,GAAxB,SACE,cAAC,GAAD,OCOSY,I,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCDd1H,IAAMkI,OAAOC,KAEbC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bf,O","file":"static/js/main.2f4a60bf.chunk.js","sourcesContent":["import { Redirect, Route, RouteProps } from \"react-router-dom\";\n\ntype OmitNative<T, K extends string | number | symbol> = {\n  [P in Exclude<keyof T, K>]: T[P];\n};\n\nexport function ProtectedRoute<T extends {} = {}, Path extends string = string>(\n  props: RouteProps<Path> & OmitNative<T, keyof RouteProps>\n) {\n  const redirect = !localStorage.getItem(\"token\");\n\n  if (redirect) {\n    return <Redirect to=\"login\" />;\n  }\n\n  return <Route {...props} />;\n}\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n};\n\nexport type Admin = {\n  __typename?: 'Admin';\n  createdAt: Scalars['DateTime'];\n  email: Scalars['String'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  tokenVersion: Scalars['Int'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type Author = {\n  __typename?: 'Author';\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  image: Scalars['String'];\n  name: Scalars['String'];\n  overview: Scalars['String'];\n  products: PaginatedProductResponse;\n  updatedAt: Scalars['DateTime'];\n};\n\n\nexport type AuthorProductsArgs = {\n  order?: Maybe<Array<OrderByMap>>;\n  searchQuery?: Maybe<Scalars['String']>;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\nexport type Category = {\n  __typename?: 'Category';\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  products: PaginatedProductResponse;\n  updatedAt: Scalars['DateTime'];\n};\n\n\nexport type CategoryProductsArgs = {\n  order?: Maybe<Array<OrderByMap>>;\n  searchQuery?: Maybe<Scalars['String']>;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\nexport type Collection = {\n  __typename?: 'Collection';\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  image: Scalars['String'];\n  name: Scalars['String'];\n  products: PaginatedProductResponse;\n  updatedAt: Scalars['DateTime'];\n};\n\n\nexport type CollectionProductsArgs = {\n  order?: Maybe<Array<OrderByMap>>;\n  searchQuery?: Maybe<Scalars['String']>;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\nexport type CreateAdminInput = {\n  email: Scalars['String'];\n  name: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type CreateAuthorInput = {\n  name: Scalars['String'];\n  overview: Scalars['String'];\n};\n\nexport type CreateCategoryInput = {\n  name: Scalars['String'];\n};\n\nexport type CreateCollectionInput = {\n  name: Scalars['String'];\n};\n\n/** The input data for creating new products. */\nexport type CreateProductInput = {\n  /** The author/owner of the product. */\n  author: ObjectIdInput;\n  /** The categories that this product fit's in. */\n  categories: Array<ObjectIdInput>;\n  /** The featured collections, if any. */\n  collections: Array<ObjectIdInput>;\n  /** The language of the product. */\n  language?: Maybe<Scalars['String']>;\n  /** The name of the product. */\n  name: Scalars['String'];\n  /** A brief description of the product. */\n  overview: Scalars['String'];\n  /** If the product is a book, then this would represent the number of pages. */\n  pages?: Maybe<Scalars['Int']>;\n  /** Product price. */\n  price: Scalars['Float'];\n  /** The publication/release date. */\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** The publisher/manufacturer of the product. */\n  publisher?: Maybe<ObjectIdInput>;\n  /** The current status of the product. */\n  status: Scalars['String'];\n};\n\nexport type CreatePublisherInput = {\n  name: Scalars['String'];\n};\n\nexport type CreateUserInput = {\n  address?: Maybe<Scalars['String']>;\n  confirmed?: Maybe<Scalars['Boolean']>;\n  name: Scalars['String'];\n  password: Scalars['String'];\n  phone: Scalars['String'];\n  province?: Maybe<Scalars['String']>;\n};\n\nexport type CreateUserRequestInput = {\n  content: Scalars['String'];\n};\n\nexport type Favorite = {\n  __typename?: 'Favorite';\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  product: Product;\n  user: User;\n};\n\nexport type LoginAdminInput = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type LoginInput = {\n  password: Scalars['String'];\n  phone: Scalars['String'];\n};\n\nexport type LoginResponse = {\n  __typename?: 'LoginResponse';\n  accessToken: Scalars['String'];\n  refreshToken: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  addFavorite: Scalars['Boolean'];\n  cancelOrder: Scalars['Boolean'];\n  createAdmin: Admin;\n  createAuthor: Author;\n  createCategory: Category;\n  createCollection: Collection;\n  createProduct: Product;\n  createPublisher: Publisher;\n  createRequest: UserRequest;\n  createUser: User;\n  deleteAdmin: Scalars['Boolean'];\n  deleteAuthor: Scalars['Boolean'];\n  deleteCategory: Scalars['Boolean'];\n  deleteCollection: Scalars['Boolean'];\n  deleteProduct: Scalars['Boolean'];\n  deletePublisher: Scalars['Boolean'];\n  deleteRequest: Scalars['Boolean'];\n  deleteUser: Scalars['Boolean'];\n  forgotPassword: SessionInfo;\n  login: LoginResponse;\n  loginAdmin: LoginResponse;\n  placeOrder: Order;\n  register: User;\n  removeFavorite: Scalars['Boolean'];\n  sendVerificationCode: SessionInfo;\n  updateAdmin: Scalars['Boolean'];\n  updateAuthor: Scalars['Boolean'];\n  updateCategory: Scalars['Boolean'];\n  updateCollection: Scalars['Boolean'];\n  updateOrder: Scalars['Boolean'];\n  updatePassword: LoginResponse;\n  updatePhoneNumber: Scalars['Boolean'];\n  updateProduct: Scalars['Boolean'];\n  updateProfile: Scalars['Boolean'];\n  updatePublisher: Scalars['Boolean'];\n  updateRequest: Scalars['Boolean'];\n  updateUser: Scalars['Boolean'];\n};\n\n\nexport type MutationAddFavoriteArgs = {\n  productId: Scalars['ID'];\n};\n\n\nexport type MutationCancelOrderArgs = {\n  orderId: Scalars['ID'];\n};\n\n\nexport type MutationCreateAdminArgs = {\n  data: CreateAdminInput;\n};\n\n\nexport type MutationCreateAuthorArgs = {\n  data: CreateAuthorInput;\n  imageFile: Scalars['Upload'];\n};\n\n\nexport type MutationCreateCategoryArgs = {\n  data: CreateCategoryInput;\n};\n\n\nexport type MutationCreateCollectionArgs = {\n  data: CreateCollectionInput;\n  imageFile: Scalars['Upload'];\n};\n\n\nexport type MutationCreateProductArgs = {\n  data: CreateProductInput;\n  imageFile: Scalars['Upload'];\n};\n\n\nexport type MutationCreatePublisherArgs = {\n  data: CreatePublisherInput;\n};\n\n\nexport type MutationCreateRequestArgs = {\n  data: CreateUserRequestInput;\n};\n\n\nexport type MutationCreateUserArgs = {\n  data: CreateUserInput;\n};\n\n\nexport type MutationDeleteAdminArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationDeleteAuthorArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationDeleteCategoryArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationDeleteCollectionArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationDeleteProductArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationDeletePublisherArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationDeleteRequestArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  data: SendVerificationCodeInput;\n};\n\n\nexport type MutationLoginArgs = {\n  data: LoginInput;\n};\n\n\nexport type MutationLoginAdminArgs = {\n  data: LoginAdminInput;\n};\n\n\nexport type MutationPlaceOrderArgs = {\n  data: PlaceOrderInput;\n};\n\n\nexport type MutationRegisterArgs = {\n  data: RegisterInput;\n};\n\n\nexport type MutationRemoveFavoriteArgs = {\n  productId: Scalars['ID'];\n};\n\n\nexport type MutationSendVerificationCodeArgs = {\n  data: SendVerificationCodeInput;\n};\n\n\nexport type MutationUpdateAdminArgs = {\n  data: UpdateAdminInput;\n};\n\n\nexport type MutationUpdateAuthorArgs = {\n  data: UpdateAuthorInput;\n  imageFile?: Maybe<Scalars['Upload']>;\n};\n\n\nexport type MutationUpdateCategoryArgs = {\n  data: UpdateCategoryInput;\n};\n\n\nexport type MutationUpdateCollectionArgs = {\n  data: UpdateCollectionInput;\n  imageFile?: Maybe<Scalars['Upload']>;\n};\n\n\nexport type MutationUpdateOrderArgs = {\n  data: UpdateOrderInput;\n};\n\n\nexport type MutationUpdatePasswordArgs = {\n  data: UpdatePasswordInput;\n};\n\n\nexport type MutationUpdatePhoneNumberArgs = {\n  data: VerificationInput;\n};\n\n\nexport type MutationUpdateProductArgs = {\n  data: UpdateProductInput;\n  imageFile?: Maybe<Scalars['Upload']>;\n};\n\n\nexport type MutationUpdateProfileArgs = {\n  data: UpdateProfileInput;\n};\n\n\nexport type MutationUpdatePublisherArgs = {\n  data: UpdatePublisherInput;\n};\n\n\nexport type MutationUpdateRequestArgs = {\n  data: UpdateUserRequestInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  data: UpdateUserInput;\n};\n\nexport type ObjectIdInput = {\n  id: Scalars['ID'];\n};\n\nexport type Order = {\n  __typename?: 'Order';\n  address: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  orderNumber: Scalars['Int'];\n  phone?: Maybe<Scalars['String']>;\n  province: Scalars['String'];\n  purchases: PaginatedPurchaseResponse;\n  status: OrderStatus;\n  totalPrice: Scalars['Float'];\n  updatedAt: Scalars['DateTime'];\n  user: User;\n};\n\n\nexport type OrderPurchasesArgs = {\n  order?: Maybe<Array<OrderByMap>>;\n  searchQuery?: Maybe<Scalars['String']>;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\nexport enum OrderBy {\n  Asc = 'ASC',\n  Desc = 'DESC'\n}\n\nexport type OrderByMap = {\n  field: Scalars['String'];\n  order: OrderBy;\n};\n\n/** The purchases order current status. */\nexport enum OrderStatus {\n  Canceled = 'Canceled',\n  Delivered = 'Delivered',\n  Delivering = 'Delivering',\n  Failed = 'Failed',\n  Pending = 'Pending',\n  Processed = 'Processed'\n}\n\nexport type PaginatedAdminResponse = {\n  __typename?: 'PaginatedAdminResponse';\n  hasMore: Scalars['Boolean'];\n  items: Array<Admin>;\n  total: Scalars['Int'];\n};\n\nexport type PaginatedAuthorResponse = {\n  __typename?: 'PaginatedAuthorResponse';\n  hasMore: Scalars['Boolean'];\n  items: Array<Author>;\n  total: Scalars['Int'];\n};\n\nexport type PaginatedCategoryResponse = {\n  __typename?: 'PaginatedCategoryResponse';\n  hasMore: Scalars['Boolean'];\n  items: Array<Category>;\n  total: Scalars['Int'];\n};\n\nexport type PaginatedCollectionResponse = {\n  __typename?: 'PaginatedCollectionResponse';\n  hasMore: Scalars['Boolean'];\n  items: Array<Collection>;\n  total: Scalars['Int'];\n};\n\nexport type PaginatedFavoriteResponse = {\n  __typename?: 'PaginatedFavoriteResponse';\n  hasMore: Scalars['Boolean'];\n  items: Array<Favorite>;\n  total: Scalars['Int'];\n};\n\nexport type PaginatedOrderResponse = {\n  __typename?: 'PaginatedOrderResponse';\n  hasMore: Scalars['Boolean'];\n  items: Array<Order>;\n  total: Scalars['Int'];\n};\n\nexport type PaginatedProductResponse = {\n  __typename?: 'PaginatedProductResponse';\n  hasMore: Scalars['Boolean'];\n  items: Array<Product>;\n  total: Scalars['Int'];\n};\n\nexport type PaginatedPublisherResponse = {\n  __typename?: 'PaginatedPublisherResponse';\n  hasMore: Scalars['Boolean'];\n  items: Array<Publisher>;\n  total: Scalars['Int'];\n};\n\nexport type PaginatedPurchaseResponse = {\n  __typename?: 'PaginatedPurchaseResponse';\n  hasMore: Scalars['Boolean'];\n  items: Array<Purchase>;\n  total: Scalars['Int'];\n};\n\nexport type PaginatedUserRequestResponse = {\n  __typename?: 'PaginatedUserRequestResponse';\n  hasMore: Scalars['Boolean'];\n  items: Array<UserRequest>;\n  total: Scalars['Int'];\n};\n\nexport type PaginatedUserResponse = {\n  __typename?: 'PaginatedUserResponse';\n  hasMore: Scalars['Boolean'];\n  items: Array<User>;\n  total: Scalars['Int'];\n};\n\nexport type PlaceOrderInput = {\n  address: Scalars['String'];\n  phone: Scalars['String'];\n  province: Scalars['String'];\n  purchases: Array<PurchasePartialInput>;\n};\n\nexport type Product = {\n  __typename?: 'Product';\n  author: Author;\n  categories: Array<Category>;\n  collections: Array<Collection>;\n  createdAt: Scalars['DateTime'];\n  favorites: PaginatedFavoriteResponse;\n  id: Scalars['ID'];\n  image: Scalars['String'];\n  isFavorite: Scalars['Boolean'];\n  language: Scalars['String'];\n  name: Scalars['String'];\n  overview: Scalars['String'];\n  pages?: Maybe<Scalars['Int']>;\n  price: Scalars['Float'];\n  publishedAt: Scalars['DateTime'];\n  publisher?: Maybe<Publisher>;\n  purchases: PaginatedPurchaseResponse;\n  status: ProductStatus;\n  updatedAt: Scalars['DateTime'];\n};\n\n\nexport type ProductFavoritesArgs = {\n  order?: Maybe<Array<OrderByMap>>;\n  searchQuery?: Maybe<Scalars['String']>;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\n\nexport type ProductPurchasesArgs = {\n  order?: Maybe<Array<OrderByMap>>;\n  searchQuery?: Maybe<Scalars['String']>;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\nexport enum ProductStatus {\n  Available = 'Available',\n  ComingSoon = 'ComingSoon',\n  OnSale = 'OnSale',\n  SoldOut = 'SoldOut'\n}\n\nexport type Publisher = {\n  __typename?: 'Publisher';\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  products: PaginatedProductResponse;\n  updatedAt: Scalars['DateTime'];\n};\n\n\nexport type PublisherProductsArgs = {\n  order?: Maybe<Array<OrderByMap>>;\n  searchQuery?: Maybe<Scalars['String']>;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\nexport type Purchase = {\n  __typename?: 'Purchase';\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  order: Order;\n  product: Product;\n  quantity: Scalars['Int'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type PurchasePartialInput = {\n  product: ObjectIdInput;\n  quantity: Scalars['Int'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  admin: Admin;\n  admins: PaginatedAdminResponse;\n  author?: Maybe<Author>;\n  authors: PaginatedAuthorResponse;\n  categories: PaginatedCategoryResponse;\n  category?: Maybe<Category>;\n  collection?: Maybe<Collection>;\n  collections: PaginatedCollectionResponse;\n  favorites: PaginatedFavoriteResponse;\n  me: User;\n  myOrders: PaginatedOrderResponse;\n  myRequests: PaginatedUserRequestResponse;\n  order?: Maybe<Order>;\n  orders: PaginatedOrderResponse;\n  product?: Maybe<Product>;\n  products: PaginatedProductResponse;\n  publisher?: Maybe<Publisher>;\n  publishers: PaginatedPublisherResponse;\n  request: UserRequest;\n  requests: PaginatedUserRequestResponse;\n  user?: Maybe<User>;\n  users: PaginatedUserResponse;\n};\n\n\nexport type QueryAdminArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryAdminsArgs = {\n  order?: Maybe<Array<OrderByMap>>;\n  searchQuery?: Maybe<Scalars['String']>;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAuthorArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryAuthorsArgs = {\n  order?: Maybe<Array<OrderByMap>>;\n  searchQuery?: Maybe<Scalars['String']>;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryCategoriesArgs = {\n  order?: Maybe<Array<OrderByMap>>;\n  searchQuery?: Maybe<Scalars['String']>;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryCategoryArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryCollectionArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryCollectionsArgs = {\n  order?: Maybe<Array<OrderByMap>>;\n  searchQuery?: Maybe<Scalars['String']>;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryFavoritesArgs = {\n  order?: Maybe<Array<OrderByMap>>;\n  searchQuery?: Maybe<Scalars['String']>;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMyOrdersArgs = {\n  order?: Maybe<Array<OrderByMap>>;\n  searchQuery?: Maybe<Scalars['String']>;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMyRequestsArgs = {\n  order?: Maybe<Array<OrderByMap>>;\n  searchQuery?: Maybe<Scalars['String']>;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryOrderArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryOrdersArgs = {\n  order?: Maybe<Array<OrderByMap>>;\n  searchQuery?: Maybe<Scalars['String']>;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryProductArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryProductsArgs = {\n  order?: Maybe<Array<OrderByMap>>;\n  searchQuery?: Maybe<Scalars['String']>;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPublisherArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryPublishersArgs = {\n  order?: Maybe<Array<OrderByMap>>;\n  searchQuery?: Maybe<Scalars['String']>;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryRequestArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryRequestsArgs = {\n  order?: Maybe<Array<OrderByMap>>;\n  searchQuery?: Maybe<Scalars['String']>;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryUserArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryUsersArgs = {\n  order?: Maybe<Array<OrderByMap>>;\n  searchQuery?: Maybe<Scalars['String']>;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\nexport type RegisterInput = {\n  address?: Maybe<Scalars['String']>;\n  code: Scalars['String'];\n  name: Scalars['String'];\n  password: Scalars['String'];\n  province?: Maybe<Scalars['String']>;\n  sessionInfo: Scalars['String'];\n};\n\nexport type SendVerificationCodeInput = {\n  phoneNumber: Scalars['String'];\n  recaptchaToken: Scalars['String'];\n};\n\nexport type SessionInfo = {\n  __typename?: 'SessionInfo';\n  sessionInfo: Scalars['String'];\n};\n\nexport type UpdateAdminInput = {\n  email?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateAuthorInput = {\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  overview: Scalars['String'];\n};\n\nexport type UpdateCategoryInput = {\n  id: Scalars['ID'];\n  name: Scalars['String'];\n};\n\nexport type UpdateCollectionInput = {\n  id: Scalars['ID'];\n  name: Scalars['String'];\n};\n\nexport type UpdateOrderInput = {\n  id: Scalars['ID'];\n  status: OrderStatus;\n};\n\nexport type UpdatePasswordInput = {\n  code: Scalars['String'];\n  password: Scalars['String'];\n  sessionInfo: Scalars['String'];\n};\n\n/** The input data for updating an existing product */\nexport type UpdateProductInput = {\n  /** The author/owner of the product. */\n  author: ObjectIdInput;\n  /** The categories that this product fit's in. */\n  categories: Array<ObjectIdInput>;\n  /** The featured collections, if any. */\n  collections: Array<ObjectIdInput>;\n  id: Scalars['ID'];\n  /** The language of the product. */\n  language?: Maybe<Scalars['String']>;\n  /** The name of the product. */\n  name: Scalars['String'];\n  /** A brief description of the product. */\n  overview: Scalars['String'];\n  /** If the product is a book, then this would represent the number of pages. */\n  pages?: Maybe<Scalars['Int']>;\n  /** Product price. */\n  price: Scalars['Float'];\n  /** The publication/release date. */\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** The publisher/manufacturer of the product. */\n  publisher?: Maybe<ObjectIdInput>;\n  /** The current status of the product. */\n  status: Scalars['String'];\n};\n\nexport type UpdateProfileInput = {\n  address: Scalars['String'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n};\n\nexport type UpdatePublisherInput = {\n  id: Scalars['ID'];\n  name: Scalars['String'];\n};\n\nexport type UpdateUserInput = {\n  address?: Maybe<Scalars['String']>;\n  confirmed?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  password?: Maybe<Scalars['String']>;\n  phone: Scalars['String'];\n  province?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateUserRequestInput = {\n  content: Scalars['String'];\n  id: Scalars['ID'];\n  status: UserRequestStatus;\n};\n\nexport type User = {\n  __typename?: 'User';\n  address?: Maybe<Scalars['String']>;\n  confirmed: Scalars['Boolean'];\n  createdAt: Scalars['DateTime'];\n  favorites: PaginatedFavoriteResponse;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  orders: PaginatedOrderResponse;\n  phone: Scalars['String'];\n  province?: Maybe<Scalars['String']>;\n  requests: PaginatedUserRequestResponse;\n  tokenVersion: Scalars['Int'];\n  updatedAt: Scalars['DateTime'];\n};\n\n\nexport type UserFavoritesArgs = {\n  order?: Maybe<Array<OrderByMap>>;\n  searchQuery?: Maybe<Scalars['String']>;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\n\nexport type UserOrdersArgs = {\n  order?: Maybe<Array<OrderByMap>>;\n  searchQuery?: Maybe<Scalars['String']>;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\n\nexport type UserRequestsArgs = {\n  order?: Maybe<Array<OrderByMap>>;\n  searchQuery?: Maybe<Scalars['String']>;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\n/** A request by the user for a certain product. It can also be used for feedback. */\nexport type UserRequest = {\n  __typename?: 'UserRequest';\n  content: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** The current status of the request. */\n  status: UserRequestStatus;\n  updatedAt: Scalars['DateTime'];\n  /** The user who made the request */\n  user: User;\n};\n\nexport enum UserRequestStatus {\n  Failed = 'Failed',\n  Pending = 'Pending',\n  Processing = 'Processing',\n  Success = 'Success'\n}\n\nexport type VerificationInput = {\n  code: Scalars['String'];\n  sessionInfo: Scalars['String'];\n};\n\nexport type AdminFragment = { __typename?: 'Admin', id: string, name: string, email: string, createdAt: any, updatedAt: any };\n\nexport type AuthorFragment = { __typename?: 'Author', id: string, name: string, overview: string, image: string, createdAt: any, updatedAt: any };\n\nexport type CategoryFragment = { __typename?: 'Category', id: string, name: string, createdAt: any, updatedAt: any };\n\nexport type CollectionFragment = { __typename?: 'Collection', id: string, name: string, image: string, createdAt: any, updatedAt: any };\n\nexport type LoginResponseFragment = { __typename?: 'LoginResponse', accessToken: string, refreshToken: string };\n\nexport type OrderFragment = { __typename?: 'Order', id: string, orderNumber: number, province: string, address: string, phone?: string | null | undefined, status: OrderStatus, totalPrice: number, createdAt: any, updatedAt: any, user: { __typename?: 'User', id: string, name: string, phone: string, address?: string | null | undefined, province?: string | null | undefined, confirmed: boolean, createdAt: any, updatedAt: any }, purchases: { __typename?: 'PaginatedPurchaseResponse', total: number, hasMore: boolean, items: Array<{ __typename?: 'Purchase', id: string, quantity: number, createdAt: any, updatedAt: any, product: { __typename?: 'Product', id: string, name: string, price: number, image: string, status: ProductStatus, pages?: number | null | undefined, overview: string, language: string, publishedAt: any, createdAt: any, updatedAt: any, author: { __typename?: 'Author', id: string, name: string, overview: string, image: string, createdAt: any, updatedAt: any }, publisher?: { __typename?: 'Publisher', id: string, name: string, createdAt: any, updatedAt: any } | null | undefined, categories: Array<{ __typename?: 'Category', id: string, name: string, createdAt: any, updatedAt: any }>, collections: Array<{ __typename?: 'Collection', id: string, name: string, image: string, createdAt: any, updatedAt: any }> } }> } };\n\nexport type ProductFragment = { __typename?: 'Product', id: string, name: string, price: number, image: string, status: ProductStatus, pages?: number | null | undefined, overview: string, language: string, publishedAt: any, createdAt: any, updatedAt: any, author: { __typename?: 'Author', id: string, name: string, overview: string, image: string, createdAt: any, updatedAt: any }, publisher?: { __typename?: 'Publisher', id: string, name: string, createdAt: any, updatedAt: any } | null | undefined, categories: Array<{ __typename?: 'Category', id: string, name: string, createdAt: any, updatedAt: any }>, collections: Array<{ __typename?: 'Collection', id: string, name: string, image: string, createdAt: any, updatedAt: any }> };\n\nexport type PaginatedProductResponseFragment = { __typename?: 'PaginatedProductResponse', total: number, hasMore: boolean, items: Array<{ __typename?: 'Product', id: string, name: string, price: number, image: string, status: ProductStatus, pages?: number | null | undefined, overview: string, language: string, publishedAt: any, createdAt: any, updatedAt: any, author: { __typename?: 'Author', id: string, name: string, overview: string, image: string, createdAt: any, updatedAt: any }, publisher?: { __typename?: 'Publisher', id: string, name: string, createdAt: any, updatedAt: any } | null | undefined, categories: Array<{ __typename?: 'Category', id: string, name: string, createdAt: any, updatedAt: any }>, collections: Array<{ __typename?: 'Collection', id: string, name: string, image: string, createdAt: any, updatedAt: any }> }> };\n\nexport type PublisherFragment = { __typename?: 'Publisher', id: string, name: string, createdAt: any, updatedAt: any };\n\nexport type PurchaseFragment = { __typename?: 'Purchase', id: string, quantity: number, createdAt: any, updatedAt: any, product: { __typename?: 'Product', id: string, name: string, price: number, image: string, status: ProductStatus, pages?: number | null | undefined, overview: string, language: string, publishedAt: any, createdAt: any, updatedAt: any, author: { __typename?: 'Author', id: string, name: string, overview: string, image: string, createdAt: any, updatedAt: any }, publisher?: { __typename?: 'Publisher', id: string, name: string, createdAt: any, updatedAt: any } | null | undefined, categories: Array<{ __typename?: 'Category', id: string, name: string, createdAt: any, updatedAt: any }>, collections: Array<{ __typename?: 'Collection', id: string, name: string, image: string, createdAt: any, updatedAt: any }> } };\n\nexport type UserFragment = { __typename?: 'User', id: string, name: string, phone: string, address?: string | null | undefined, province?: string | null | undefined, confirmed: boolean, createdAt: any, updatedAt: any };\n\nexport type UserRequestFragment = { __typename?: 'UserRequest', id: string, content: string, status: UserRequestStatus, createdAt: any, updatedAt: any, user: { __typename?: 'User', id: string, name: string, phone: string, address?: string | null | undefined, province?: string | null | undefined, confirmed: boolean, createdAt: any, updatedAt: any } };\n\nexport type CreateAdminMutationVariables = Exact<{\n  data: CreateAdminInput;\n}>;\n\n\nexport type CreateAdminMutation = { __typename?: 'Mutation', createAdmin: { __typename?: 'Admin', id: string, name: string, email: string, createdAt: any, updatedAt: any } };\n\nexport type CreateAuthorMutationVariables = Exact<{\n  data: CreateAuthorInput;\n  imageFile: Scalars['Upload'];\n}>;\n\n\nexport type CreateAuthorMutation = { __typename?: 'Mutation', createAuthor: { __typename?: 'Author', id: string, name: string, overview: string, image: string, createdAt: any, updatedAt: any } };\n\nexport type CreateCategoryMutationVariables = Exact<{\n  data: CreateCategoryInput;\n}>;\n\n\nexport type CreateCategoryMutation = { __typename?: 'Mutation', createCategory: { __typename?: 'Category', id: string, name: string, createdAt: any, updatedAt: any } };\n\nexport type CreateCollectionMutationVariables = Exact<{\n  data: CreateCollectionInput;\n  imageFile: Scalars['Upload'];\n}>;\n\n\nexport type CreateCollectionMutation = { __typename?: 'Mutation', createCollection: { __typename?: 'Collection', id: string, name: string, image: string, createdAt: any, updatedAt: any } };\n\nexport type CreateProductMutationVariables = Exact<{\n  data: CreateProductInput;\n  imageFile: Scalars['Upload'];\n}>;\n\n\nexport type CreateProductMutation = { __typename?: 'Mutation', createProduct: { __typename?: 'Product', id: string, name: string, price: number, image: string, status: ProductStatus, pages?: number | null | undefined, overview: string, language: string, publishedAt: any, createdAt: any, updatedAt: any, author: { __typename?: 'Author', id: string, name: string, overview: string, image: string, createdAt: any, updatedAt: any }, publisher?: { __typename?: 'Publisher', id: string, name: string, createdAt: any, updatedAt: any } | null | undefined, categories: Array<{ __typename?: 'Category', id: string, name: string, createdAt: any, updatedAt: any }>, collections: Array<{ __typename?: 'Collection', id: string, name: string, image: string, createdAt: any, updatedAt: any }> } };\n\nexport type CreatePublisherMutationVariables = Exact<{\n  data: CreatePublisherInput;\n}>;\n\n\nexport type CreatePublisherMutation = { __typename?: 'Mutation', createPublisher: { __typename?: 'Publisher', id: string, name: string, createdAt: any, updatedAt: any } };\n\nexport type CreateUserMutationVariables = Exact<{\n  data: CreateUserInput;\n}>;\n\n\nexport type CreateUserMutation = { __typename?: 'Mutation', createUser: { __typename?: 'User', id: string, name: string, phone: string, address?: string | null | undefined, province?: string | null | undefined, confirmed: boolean, createdAt: any, updatedAt: any } };\n\nexport type DeleteAdminMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type DeleteAdminMutation = { __typename?: 'Mutation', deleteAdmin: boolean };\n\nexport type DeleteAuthorMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type DeleteAuthorMutation = { __typename?: 'Mutation', deleteAuthor: boolean };\n\nexport type DeleteCategoryMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type DeleteCategoryMutation = { __typename?: 'Mutation', deleteCategory: boolean };\n\nexport type DeleteCollectionMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type DeleteCollectionMutation = { __typename?: 'Mutation', deleteCollection: boolean };\n\nexport type DeleteProductMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type DeleteProductMutation = { __typename?: 'Mutation', deleteProduct: boolean };\n\nexport type DeletePublisherMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type DeletePublisherMutation = { __typename?: 'Mutation', deletePublisher: boolean };\n\nexport type DeleteUserRequestMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type DeleteUserRequestMutation = { __typename?: 'Mutation', deleteRequest: boolean };\n\nexport type DeleteUserMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type DeleteUserMutation = { __typename?: 'Mutation', deleteUser: boolean };\n\nexport type LoginMutationVariables = Exact<{\n  data: LoginAdminInput;\n}>;\n\n\nexport type LoginMutation = { __typename?: 'Mutation', loginAdmin: { __typename?: 'LoginResponse', accessToken: string, refreshToken: string } };\n\nexport type UpdateAdminMutationVariables = Exact<{\n  data: UpdateAdminInput;\n}>;\n\n\nexport type UpdateAdminMutation = { __typename?: 'Mutation', updateAdmin: boolean };\n\nexport type UpdateAuthorMutationVariables = Exact<{\n  data: UpdateAuthorInput;\n  imageFile?: Maybe<Scalars['Upload']>;\n}>;\n\n\nexport type UpdateAuthorMutation = { __typename?: 'Mutation', updateAuthor: boolean };\n\nexport type UpdateCategoryMutationVariables = Exact<{\n  data: UpdateCategoryInput;\n}>;\n\n\nexport type UpdateCategoryMutation = { __typename?: 'Mutation', updateCategory: boolean };\n\nexport type UpdateCollectionMutationVariables = Exact<{\n  data: UpdateCollectionInput;\n  imageFile?: Maybe<Scalars['Upload']>;\n}>;\n\n\nexport type UpdateCollectionMutation = { __typename?: 'Mutation', updateCollection: boolean };\n\nexport type UpdateOrderMutationVariables = Exact<{\n  data: UpdateOrderInput;\n}>;\n\n\nexport type UpdateOrderMutation = { __typename?: 'Mutation', updateOrder: boolean };\n\nexport type UpdateProductMutationVariables = Exact<{\n  data: UpdateProductInput;\n  imageFile?: Maybe<Scalars['Upload']>;\n}>;\n\n\nexport type UpdateProductMutation = { __typename?: 'Mutation', updateProduct: boolean };\n\nexport type UpdatePublisherMutationVariables = Exact<{\n  data: UpdatePublisherInput;\n}>;\n\n\nexport type UpdatePublisherMutation = { __typename?: 'Mutation', updatePublisher: boolean };\n\nexport type UpdateUserRequestMutationVariables = Exact<{\n  data: UpdateUserRequestInput;\n}>;\n\n\nexport type UpdateUserRequestMutation = { __typename?: 'Mutation', updateRequest: boolean };\n\nexport type UpdateUserMutationVariables = Exact<{\n  data: UpdateUserInput;\n}>;\n\n\nexport type UpdateUserMutation = { __typename?: 'Mutation', updateUser: boolean };\n\nexport type AdminQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type AdminQuery = { __typename?: 'Query', admin: { __typename?: 'Admin', id: string, name: string, email: string, createdAt: any, updatedAt: any } };\n\nexport type AdminsQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n  order?: Maybe<Array<OrderByMap> | OrderByMap>;\n  searchQuery?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type AdminsQuery = { __typename?: 'Query', admins: { __typename?: 'PaginatedAdminResponse', total: number, hasMore: boolean, items: Array<{ __typename?: 'Admin', id: string, name: string, email: string, createdAt: any, updatedAt: any }> } };\n\nexport type AuthorQueryVariables = Exact<{\n  id: Scalars['ID'];\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n  order?: Maybe<Array<OrderByMap> | OrderByMap>;\n  searchQuery?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type AuthorQuery = { __typename?: 'Query', author?: { __typename?: 'Author', id: string, name: string, overview: string, image: string, createdAt: any, updatedAt: any, products: { __typename?: 'PaginatedProductResponse', total: number, hasMore: boolean, items: Array<{ __typename?: 'Product', id: string, name: string, price: number, image: string, status: ProductStatus, pages?: number | null | undefined, overview: string, language: string, publishedAt: any, createdAt: any, updatedAt: any, author: { __typename?: 'Author', id: string, name: string, overview: string, image: string, createdAt: any, updatedAt: any }, publisher?: { __typename?: 'Publisher', id: string, name: string, createdAt: any, updatedAt: any } | null | undefined, categories: Array<{ __typename?: 'Category', id: string, name: string, createdAt: any, updatedAt: any }>, collections: Array<{ __typename?: 'Collection', id: string, name: string, image: string, createdAt: any, updatedAt: any }> }> } } | null | undefined };\n\nexport type AuthorsQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n  order?: Maybe<Array<OrderByMap> | OrderByMap>;\n  searchQuery?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type AuthorsQuery = { __typename?: 'Query', authors: { __typename?: 'PaginatedAuthorResponse', total: number, hasMore: boolean, items: Array<{ __typename?: 'Author', id: string, name: string, overview: string, image: string, createdAt: any, updatedAt: any }> } };\n\nexport type CategoriesQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n  order?: Maybe<Array<OrderByMap> | OrderByMap>;\n  searchQuery?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type CategoriesQuery = { __typename?: 'Query', categories: { __typename?: 'PaginatedCategoryResponse', total: number, hasMore: boolean, items: Array<{ __typename?: 'Category', id: string, name: string, createdAt: any, updatedAt: any }> } };\n\nexport type CategoryQueryVariables = Exact<{\n  id: Scalars['ID'];\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n  order?: Maybe<Array<OrderByMap> | OrderByMap>;\n  searchQuery?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type CategoryQuery = { __typename?: 'Query', category?: { __typename?: 'Category', id: string, name: string, createdAt: any, updatedAt: any, products: { __typename?: 'PaginatedProductResponse', total: number, hasMore: boolean, items: Array<{ __typename?: 'Product', id: string, name: string, price: number, image: string, status: ProductStatus, pages?: number | null | undefined, overview: string, language: string, publishedAt: any, createdAt: any, updatedAt: any, author: { __typename?: 'Author', id: string, name: string, overview: string, image: string, createdAt: any, updatedAt: any }, publisher?: { __typename?: 'Publisher', id: string, name: string, createdAt: any, updatedAt: any } | null | undefined, categories: Array<{ __typename?: 'Category', id: string, name: string, createdAt: any, updatedAt: any }>, collections: Array<{ __typename?: 'Collection', id: string, name: string, image: string, createdAt: any, updatedAt: any }> }> } } | null | undefined };\n\nexport type CollectionQueryVariables = Exact<{\n  id: Scalars['ID'];\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n  order?: Maybe<Array<OrderByMap> | OrderByMap>;\n  searchQuery?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type CollectionQuery = { __typename?: 'Query', collection?: { __typename?: 'Collection', id: string, name: string, image: string, createdAt: any, updatedAt: any, products: { __typename?: 'PaginatedProductResponse', total: number, hasMore: boolean, items: Array<{ __typename?: 'Product', id: string, name: string, price: number, image: string, status: ProductStatus, pages?: number | null | undefined, overview: string, language: string, publishedAt: any, createdAt: any, updatedAt: any, author: { __typename?: 'Author', id: string, name: string, overview: string, image: string, createdAt: any, updatedAt: any }, publisher?: { __typename?: 'Publisher', id: string, name: string, createdAt: any, updatedAt: any } | null | undefined, categories: Array<{ __typename?: 'Category', id: string, name: string, createdAt: any, updatedAt: any }>, collections: Array<{ __typename?: 'Collection', id: string, name: string, image: string, createdAt: any, updatedAt: any }> }> } } | null | undefined };\n\nexport type CollectionsQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n  order?: Maybe<Array<OrderByMap> | OrderByMap>;\n  searchQuery?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type CollectionsQuery = { __typename?: 'Query', collections: { __typename?: 'PaginatedCollectionResponse', total: number, hasMore: boolean, items: Array<{ __typename?: 'Collection', id: string, name: string, image: string, createdAt: any, updatedAt: any }> } };\n\nexport type DashboardQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type DashboardQuery = { __typename?: 'Query', admins: { __typename?: 'PaginatedAdminResponse', total: number }, users: { __typename?: 'PaginatedUserResponse', total: number }, products: { __typename?: 'PaginatedProductResponse', total: number }, orders: { __typename?: 'PaginatedOrderResponse', total: number }, requests: { __typename?: 'PaginatedUserRequestResponse', total: number }, categories: { __typename?: 'PaginatedCategoryResponse', total: number }, collections: { __typename?: 'PaginatedCollectionResponse', total: number }, authors: { __typename?: 'PaginatedAuthorResponse', total: number }, publishers: { __typename?: 'PaginatedPublisherResponse', total: number } };\n\nexport type OrderQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type OrderQuery = { __typename?: 'Query', order?: { __typename?: 'Order', id: string, orderNumber: number, province: string, address: string, phone?: string | null | undefined, status: OrderStatus, totalPrice: number, createdAt: any, updatedAt: any, user: { __typename?: 'User', id: string, name: string, phone: string, address?: string | null | undefined, province?: string | null | undefined, confirmed: boolean, createdAt: any, updatedAt: any }, purchases: { __typename?: 'PaginatedPurchaseResponse', total: number, hasMore: boolean, items: Array<{ __typename?: 'Purchase', id: string, quantity: number, createdAt: any, updatedAt: any, product: { __typename?: 'Product', id: string, name: string, price: number, image: string, status: ProductStatus, pages?: number | null | undefined, overview: string, language: string, publishedAt: any, createdAt: any, updatedAt: any, author: { __typename?: 'Author', id: string, name: string, overview: string, image: string, createdAt: any, updatedAt: any }, publisher?: { __typename?: 'Publisher', id: string, name: string, createdAt: any, updatedAt: any } | null | undefined, categories: Array<{ __typename?: 'Category', id: string, name: string, createdAt: any, updatedAt: any }>, collections: Array<{ __typename?: 'Collection', id: string, name: string, image: string, createdAt: any, updatedAt: any }> } }> } } | null | undefined };\n\nexport type OrdersQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n  order?: Maybe<Array<OrderByMap> | OrderByMap>;\n  searchQuery?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type OrdersQuery = { __typename?: 'Query', orders: { __typename?: 'PaginatedOrderResponse', total: number, hasMore: boolean, items: Array<{ __typename?: 'Order', id: string, orderNumber: number, province: string, address: string, phone?: string | null | undefined, status: OrderStatus, totalPrice: number, createdAt: any, updatedAt: any, user: { __typename?: 'User', id: string, name: string, phone: string, address?: string | null | undefined, province?: string | null | undefined, confirmed: boolean, createdAt: any, updatedAt: any }, purchases: { __typename?: 'PaginatedPurchaseResponse', total: number, hasMore: boolean, items: Array<{ __typename?: 'Purchase', id: string, quantity: number, createdAt: any, updatedAt: any, product: { __typename?: 'Product', id: string, name: string, price: number, image: string, status: ProductStatus, pages?: number | null | undefined, overview: string, language: string, publishedAt: any, createdAt: any, updatedAt: any, author: { __typename?: 'Author', id: string, name: string, overview: string, image: string, createdAt: any, updatedAt: any }, publisher?: { __typename?: 'Publisher', id: string, name: string, createdAt: any, updatedAt: any } | null | undefined, categories: Array<{ __typename?: 'Category', id: string, name: string, createdAt: any, updatedAt: any }>, collections: Array<{ __typename?: 'Collection', id: string, name: string, image: string, createdAt: any, updatedAt: any }> } }> } }> } };\n\nexport type ProductQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type ProductQuery = { __typename?: 'Query', product?: { __typename?: 'Product', id: string, name: string, price: number, image: string, status: ProductStatus, pages?: number | null | undefined, overview: string, language: string, publishedAt: any, createdAt: any, updatedAt: any, author: { __typename?: 'Author', id: string, name: string, overview: string, image: string, createdAt: any, updatedAt: any }, publisher?: { __typename?: 'Publisher', id: string, name: string, createdAt: any, updatedAt: any } | null | undefined, categories: Array<{ __typename?: 'Category', id: string, name: string, createdAt: any, updatedAt: any }>, collections: Array<{ __typename?: 'Collection', id: string, name: string, image: string, createdAt: any, updatedAt: any }> } | null | undefined };\n\nexport type ProductsQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n  order?: Maybe<Array<OrderByMap> | OrderByMap>;\n  searchQuery?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type ProductsQuery = { __typename?: 'Query', products: { __typename?: 'PaginatedProductResponse', total: number, hasMore: boolean, items: Array<{ __typename?: 'Product', id: string, name: string, price: number, image: string, status: ProductStatus, pages?: number | null | undefined, overview: string, language: string, publishedAt: any, createdAt: any, updatedAt: any, author: { __typename?: 'Author', id: string, name: string, overview: string, image: string, createdAt: any, updatedAt: any }, publisher?: { __typename?: 'Publisher', id: string, name: string, createdAt: any, updatedAt: any } | null | undefined, categories: Array<{ __typename?: 'Category', id: string, name: string, createdAt: any, updatedAt: any }>, collections: Array<{ __typename?: 'Collection', id: string, name: string, image: string, createdAt: any, updatedAt: any }> }> } };\n\nexport type PublisherQueryVariables = Exact<{\n  id: Scalars['ID'];\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n  order?: Maybe<Array<OrderByMap> | OrderByMap>;\n  searchQuery?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type PublisherQuery = { __typename?: 'Query', publisher?: { __typename?: 'Publisher', id: string, name: string, createdAt: any, updatedAt: any, products: { __typename?: 'PaginatedProductResponse', total: number, hasMore: boolean, items: Array<{ __typename?: 'Product', id: string, name: string, price: number, image: string, status: ProductStatus, pages?: number | null | undefined, overview: string, language: string, publishedAt: any, createdAt: any, updatedAt: any, author: { __typename?: 'Author', id: string, name: string, overview: string, image: string, createdAt: any, updatedAt: any }, publisher?: { __typename?: 'Publisher', id: string, name: string, createdAt: any, updatedAt: any } | null | undefined, categories: Array<{ __typename?: 'Category', id: string, name: string, createdAt: any, updatedAt: any }>, collections: Array<{ __typename?: 'Collection', id: string, name: string, image: string, createdAt: any, updatedAt: any }> }> } } | null | undefined };\n\nexport type PublishersQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n  order?: Maybe<Array<OrderByMap> | OrderByMap>;\n  searchQuery?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type PublishersQuery = { __typename?: 'Query', publishers: { __typename?: 'PaginatedPublisherResponse', total: number, hasMore: boolean, items: Array<{ __typename?: 'Publisher', id: string, name: string, createdAt: any, updatedAt: any }> } };\n\nexport type UserQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type UserQuery = { __typename?: 'Query', user?: { __typename?: 'User', id: string, name: string, phone: string, address?: string | null | undefined, province?: string | null | undefined, confirmed: boolean, createdAt: any, updatedAt: any } | null | undefined };\n\nexport type UserRequestQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type UserRequestQuery = { __typename?: 'Query', request: { __typename?: 'UserRequest', id: string, content: string, status: UserRequestStatus, createdAt: any, updatedAt: any, user: { __typename?: 'User', id: string, name: string, phone: string, address?: string | null | undefined, province?: string | null | undefined, confirmed: boolean, createdAt: any, updatedAt: any } } };\n\nexport type UserRequestsQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n  order?: Maybe<Array<OrderByMap> | OrderByMap>;\n  searchQuery?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type UserRequestsQuery = { __typename?: 'Query', requests: { __typename?: 'PaginatedUserRequestResponse', total: number, hasMore: boolean, items: Array<{ __typename?: 'UserRequest', id: string, content: string, status: UserRequestStatus, createdAt: any, updatedAt: any, user: { __typename?: 'User', id: string, name: string, phone: string, address?: string | null | undefined, province?: string | null | undefined, confirmed: boolean, createdAt: any, updatedAt: any } }> } };\n\nexport type UsersQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n  order?: Maybe<Array<OrderByMap> | OrderByMap>;\n  searchQuery?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type UsersQuery = { __typename?: 'Query', users: { __typename?: 'PaginatedUserResponse', total: number, hasMore: boolean, items: Array<{ __typename?: 'User', id: string, name: string, phone: string, address?: string | null | undefined, province?: string | null | undefined, confirmed: boolean, createdAt: any, updatedAt: any }> } };\n\nexport const AdminFragmentDoc = gql`\n    fragment Admin on Admin {\n  id\n  name\n  email\n  createdAt\n  updatedAt\n}\n    `;\nexport const LoginResponseFragmentDoc = gql`\n    fragment LoginResponse on LoginResponse {\n  accessToken\n  refreshToken\n}\n    `;\nexport const UserFragmentDoc = gql`\n    fragment User on User {\n  id\n  name\n  phone\n  address\n  province\n  confirmed\n  createdAt\n  updatedAt\n}\n    `;\nexport const AuthorFragmentDoc = gql`\n    fragment Author on Author {\n  id\n  name\n  overview\n  image\n  createdAt\n  updatedAt\n}\n    `;\nexport const PublisherFragmentDoc = gql`\n    fragment Publisher on Publisher {\n  id\n  name\n  createdAt\n  updatedAt\n}\n    `;\nexport const CategoryFragmentDoc = gql`\n    fragment Category on Category {\n  id\n  name\n  createdAt\n  updatedAt\n}\n    `;\nexport const CollectionFragmentDoc = gql`\n    fragment Collection on Collection {\n  id\n  name\n  image\n  createdAt\n  updatedAt\n}\n    `;\nexport const ProductFragmentDoc = gql`\n    fragment Product on Product {\n  id\n  name\n  price\n  image\n  status\n  pages\n  overview\n  language\n  publishedAt\n  author {\n    ...Author\n  }\n  publisher {\n    ...Publisher\n  }\n  categories {\n    ...Category\n  }\n  collections {\n    ...Collection\n  }\n  createdAt\n  updatedAt\n}\n    ${AuthorFragmentDoc}\n${PublisherFragmentDoc}\n${CategoryFragmentDoc}\n${CollectionFragmentDoc}`;\nexport const PurchaseFragmentDoc = gql`\n    fragment Purchase on Purchase {\n  id\n  quantity\n  createdAt\n  updatedAt\n  product {\n    ...Product\n  }\n}\n    ${ProductFragmentDoc}`;\nexport const OrderFragmentDoc = gql`\n    fragment Order on Order {\n  id\n  orderNumber\n  province\n  address\n  phone\n  status\n  totalPrice\n  createdAt\n  updatedAt\n  user {\n    ...User\n  }\n  purchases(take: 100) {\n    items {\n      ...Purchase\n    }\n    total\n    hasMore\n  }\n}\n    ${UserFragmentDoc}\n${PurchaseFragmentDoc}`;\nexport const PaginatedProductResponseFragmentDoc = gql`\n    fragment PaginatedProductResponse on PaginatedProductResponse {\n  items {\n    ...Product\n  }\n  total\n  hasMore\n}\n    ${ProductFragmentDoc}`;\nexport const UserRequestFragmentDoc = gql`\n    fragment UserRequest on UserRequest {\n  id\n  content\n  status\n  createdAt\n  updatedAt\n  user {\n    ...User\n  }\n}\n    ${UserFragmentDoc}`;\nexport const CreateAdminDocument = gql`\n    mutation CreateAdmin($data: CreateAdminInput!) {\n  createAdmin(data: $data) {\n    ...Admin\n  }\n}\n    ${AdminFragmentDoc}`;\nexport type CreateAdminMutationFn = Apollo.MutationFunction<CreateAdminMutation, CreateAdminMutationVariables>;\n\n/**\n * __useCreateAdminMutation__\n *\n * To run a mutation, you first call `useCreateAdminMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateAdminMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createAdminMutation, { data, loading, error }] = useCreateAdminMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useCreateAdminMutation(baseOptions?: Apollo.MutationHookOptions<CreateAdminMutation, CreateAdminMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateAdminMutation, CreateAdminMutationVariables>(CreateAdminDocument, options);\n      }\nexport type CreateAdminMutationHookResult = ReturnType<typeof useCreateAdminMutation>;\nexport type CreateAdminMutationResult = Apollo.MutationResult<CreateAdminMutation>;\nexport type CreateAdminMutationOptions = Apollo.BaseMutationOptions<CreateAdminMutation, CreateAdminMutationVariables>;\nexport const CreateAuthorDocument = gql`\n    mutation CreateAuthor($data: CreateAuthorInput!, $imageFile: Upload!) {\n  createAuthor(data: $data, imageFile: $imageFile) {\n    ...Author\n  }\n}\n    ${AuthorFragmentDoc}`;\nexport type CreateAuthorMutationFn = Apollo.MutationFunction<CreateAuthorMutation, CreateAuthorMutationVariables>;\n\n/**\n * __useCreateAuthorMutation__\n *\n * To run a mutation, you first call `useCreateAuthorMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateAuthorMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createAuthorMutation, { data, loading, error }] = useCreateAuthorMutation({\n *   variables: {\n *      data: // value for 'data'\n *      imageFile: // value for 'imageFile'\n *   },\n * });\n */\nexport function useCreateAuthorMutation(baseOptions?: Apollo.MutationHookOptions<CreateAuthorMutation, CreateAuthorMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateAuthorMutation, CreateAuthorMutationVariables>(CreateAuthorDocument, options);\n      }\nexport type CreateAuthorMutationHookResult = ReturnType<typeof useCreateAuthorMutation>;\nexport type CreateAuthorMutationResult = Apollo.MutationResult<CreateAuthorMutation>;\nexport type CreateAuthorMutationOptions = Apollo.BaseMutationOptions<CreateAuthorMutation, CreateAuthorMutationVariables>;\nexport const CreateCategoryDocument = gql`\n    mutation CreateCategory($data: CreateCategoryInput!) {\n  createCategory(data: $data) {\n    ...Category\n  }\n}\n    ${CategoryFragmentDoc}`;\nexport type CreateCategoryMutationFn = Apollo.MutationFunction<CreateCategoryMutation, CreateCategoryMutationVariables>;\n\n/**\n * __useCreateCategoryMutation__\n *\n * To run a mutation, you first call `useCreateCategoryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateCategoryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createCategoryMutation, { data, loading, error }] = useCreateCategoryMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useCreateCategoryMutation(baseOptions?: Apollo.MutationHookOptions<CreateCategoryMutation, CreateCategoryMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateCategoryMutation, CreateCategoryMutationVariables>(CreateCategoryDocument, options);\n      }\nexport type CreateCategoryMutationHookResult = ReturnType<typeof useCreateCategoryMutation>;\nexport type CreateCategoryMutationResult = Apollo.MutationResult<CreateCategoryMutation>;\nexport type CreateCategoryMutationOptions = Apollo.BaseMutationOptions<CreateCategoryMutation, CreateCategoryMutationVariables>;\nexport const CreateCollectionDocument = gql`\n    mutation CreateCollection($data: CreateCollectionInput!, $imageFile: Upload!) {\n  createCollection(data: $data, imageFile: $imageFile) {\n    ...Collection\n  }\n}\n    ${CollectionFragmentDoc}`;\nexport type CreateCollectionMutationFn = Apollo.MutationFunction<CreateCollectionMutation, CreateCollectionMutationVariables>;\n\n/**\n * __useCreateCollectionMutation__\n *\n * To run a mutation, you first call `useCreateCollectionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateCollectionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createCollectionMutation, { data, loading, error }] = useCreateCollectionMutation({\n *   variables: {\n *      data: // value for 'data'\n *      imageFile: // value for 'imageFile'\n *   },\n * });\n */\nexport function useCreateCollectionMutation(baseOptions?: Apollo.MutationHookOptions<CreateCollectionMutation, CreateCollectionMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateCollectionMutation, CreateCollectionMutationVariables>(CreateCollectionDocument, options);\n      }\nexport type CreateCollectionMutationHookResult = ReturnType<typeof useCreateCollectionMutation>;\nexport type CreateCollectionMutationResult = Apollo.MutationResult<CreateCollectionMutation>;\nexport type CreateCollectionMutationOptions = Apollo.BaseMutationOptions<CreateCollectionMutation, CreateCollectionMutationVariables>;\nexport const CreateProductDocument = gql`\n    mutation CreateProduct($data: CreateProductInput!, $imageFile: Upload!) {\n  createProduct(data: $data, imageFile: $imageFile) {\n    ...Product\n  }\n}\n    ${ProductFragmentDoc}`;\nexport type CreateProductMutationFn = Apollo.MutationFunction<CreateProductMutation, CreateProductMutationVariables>;\n\n/**\n * __useCreateProductMutation__\n *\n * To run a mutation, you first call `useCreateProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createProductMutation, { data, loading, error }] = useCreateProductMutation({\n *   variables: {\n *      data: // value for 'data'\n *      imageFile: // value for 'imageFile'\n *   },\n * });\n */\nexport function useCreateProductMutation(baseOptions?: Apollo.MutationHookOptions<CreateProductMutation, CreateProductMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateProductMutation, CreateProductMutationVariables>(CreateProductDocument, options);\n      }\nexport type CreateProductMutationHookResult = ReturnType<typeof useCreateProductMutation>;\nexport type CreateProductMutationResult = Apollo.MutationResult<CreateProductMutation>;\nexport type CreateProductMutationOptions = Apollo.BaseMutationOptions<CreateProductMutation, CreateProductMutationVariables>;\nexport const CreatePublisherDocument = gql`\n    mutation CreatePublisher($data: CreatePublisherInput!) {\n  createPublisher(data: $data) {\n    ...Publisher\n  }\n}\n    ${PublisherFragmentDoc}`;\nexport type CreatePublisherMutationFn = Apollo.MutationFunction<CreatePublisherMutation, CreatePublisherMutationVariables>;\n\n/**\n * __useCreatePublisherMutation__\n *\n * To run a mutation, you first call `useCreatePublisherMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePublisherMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPublisherMutation, { data, loading, error }] = useCreatePublisherMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useCreatePublisherMutation(baseOptions?: Apollo.MutationHookOptions<CreatePublisherMutation, CreatePublisherMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreatePublisherMutation, CreatePublisherMutationVariables>(CreatePublisherDocument, options);\n      }\nexport type CreatePublisherMutationHookResult = ReturnType<typeof useCreatePublisherMutation>;\nexport type CreatePublisherMutationResult = Apollo.MutationResult<CreatePublisherMutation>;\nexport type CreatePublisherMutationOptions = Apollo.BaseMutationOptions<CreatePublisherMutation, CreatePublisherMutationVariables>;\nexport const CreateUserDocument = gql`\n    mutation CreateUser($data: CreateUserInput!) {\n  createUser(data: $data) {\n    ...User\n  }\n}\n    ${UserFragmentDoc}`;\nexport type CreateUserMutationFn = Apollo.MutationFunction<CreateUserMutation, CreateUserMutationVariables>;\n\n/**\n * __useCreateUserMutation__\n *\n * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useCreateUserMutation(baseOptions?: Apollo.MutationHookOptions<CreateUserMutation, CreateUserMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateUserMutation, CreateUserMutationVariables>(CreateUserDocument, options);\n      }\nexport type CreateUserMutationHookResult = ReturnType<typeof useCreateUserMutation>;\nexport type CreateUserMutationResult = Apollo.MutationResult<CreateUserMutation>;\nexport type CreateUserMutationOptions = Apollo.BaseMutationOptions<CreateUserMutation, CreateUserMutationVariables>;\nexport const DeleteAdminDocument = gql`\n    mutation DeleteAdmin($id: ID!) {\n  deleteAdmin(id: $id)\n}\n    `;\nexport type DeleteAdminMutationFn = Apollo.MutationFunction<DeleteAdminMutation, DeleteAdminMutationVariables>;\n\n/**\n * __useDeleteAdminMutation__\n *\n * To run a mutation, you first call `useDeleteAdminMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteAdminMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteAdminMutation, { data, loading, error }] = useDeleteAdminMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteAdminMutation(baseOptions?: Apollo.MutationHookOptions<DeleteAdminMutation, DeleteAdminMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<DeleteAdminMutation, DeleteAdminMutationVariables>(DeleteAdminDocument, options);\n      }\nexport type DeleteAdminMutationHookResult = ReturnType<typeof useDeleteAdminMutation>;\nexport type DeleteAdminMutationResult = Apollo.MutationResult<DeleteAdminMutation>;\nexport type DeleteAdminMutationOptions = Apollo.BaseMutationOptions<DeleteAdminMutation, DeleteAdminMutationVariables>;\nexport const DeleteAuthorDocument = gql`\n    mutation DeleteAuthor($id: ID!) {\n  deleteAuthor(id: $id)\n}\n    `;\nexport type DeleteAuthorMutationFn = Apollo.MutationFunction<DeleteAuthorMutation, DeleteAuthorMutationVariables>;\n\n/**\n * __useDeleteAuthorMutation__\n *\n * To run a mutation, you first call `useDeleteAuthorMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteAuthorMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteAuthorMutation, { data, loading, error }] = useDeleteAuthorMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteAuthorMutation(baseOptions?: Apollo.MutationHookOptions<DeleteAuthorMutation, DeleteAuthorMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<DeleteAuthorMutation, DeleteAuthorMutationVariables>(DeleteAuthorDocument, options);\n      }\nexport type DeleteAuthorMutationHookResult = ReturnType<typeof useDeleteAuthorMutation>;\nexport type DeleteAuthorMutationResult = Apollo.MutationResult<DeleteAuthorMutation>;\nexport type DeleteAuthorMutationOptions = Apollo.BaseMutationOptions<DeleteAuthorMutation, DeleteAuthorMutationVariables>;\nexport const DeleteCategoryDocument = gql`\n    mutation DeleteCategory($id: ID!) {\n  deleteCategory(id: $id)\n}\n    `;\nexport type DeleteCategoryMutationFn = Apollo.MutationFunction<DeleteCategoryMutation, DeleteCategoryMutationVariables>;\n\n/**\n * __useDeleteCategoryMutation__\n *\n * To run a mutation, you first call `useDeleteCategoryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteCategoryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteCategoryMutation, { data, loading, error }] = useDeleteCategoryMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteCategoryMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCategoryMutation, DeleteCategoryMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<DeleteCategoryMutation, DeleteCategoryMutationVariables>(DeleteCategoryDocument, options);\n      }\nexport type DeleteCategoryMutationHookResult = ReturnType<typeof useDeleteCategoryMutation>;\nexport type DeleteCategoryMutationResult = Apollo.MutationResult<DeleteCategoryMutation>;\nexport type DeleteCategoryMutationOptions = Apollo.BaseMutationOptions<DeleteCategoryMutation, DeleteCategoryMutationVariables>;\nexport const DeleteCollectionDocument = gql`\n    mutation DeleteCollection($id: ID!) {\n  deleteCollection(id: $id)\n}\n    `;\nexport type DeleteCollectionMutationFn = Apollo.MutationFunction<DeleteCollectionMutation, DeleteCollectionMutationVariables>;\n\n/**\n * __useDeleteCollectionMutation__\n *\n * To run a mutation, you first call `useDeleteCollectionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteCollectionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteCollectionMutation, { data, loading, error }] = useDeleteCollectionMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteCollectionMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCollectionMutation, DeleteCollectionMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<DeleteCollectionMutation, DeleteCollectionMutationVariables>(DeleteCollectionDocument, options);\n      }\nexport type DeleteCollectionMutationHookResult = ReturnType<typeof useDeleteCollectionMutation>;\nexport type DeleteCollectionMutationResult = Apollo.MutationResult<DeleteCollectionMutation>;\nexport type DeleteCollectionMutationOptions = Apollo.BaseMutationOptions<DeleteCollectionMutation, DeleteCollectionMutationVariables>;\nexport const DeleteProductDocument = gql`\n    mutation DeleteProduct($id: ID!) {\n  deleteProduct(id: $id)\n}\n    `;\nexport type DeleteProductMutationFn = Apollo.MutationFunction<DeleteProductMutation, DeleteProductMutationVariables>;\n\n/**\n * __useDeleteProductMutation__\n *\n * To run a mutation, you first call `useDeleteProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProductMutation, { data, loading, error }] = useDeleteProductMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteProductMutation(baseOptions?: Apollo.MutationHookOptions<DeleteProductMutation, DeleteProductMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<DeleteProductMutation, DeleteProductMutationVariables>(DeleteProductDocument, options);\n      }\nexport type DeleteProductMutationHookResult = ReturnType<typeof useDeleteProductMutation>;\nexport type DeleteProductMutationResult = Apollo.MutationResult<DeleteProductMutation>;\nexport type DeleteProductMutationOptions = Apollo.BaseMutationOptions<DeleteProductMutation, DeleteProductMutationVariables>;\nexport const DeletePublisherDocument = gql`\n    mutation DeletePublisher($id: ID!) {\n  deletePublisher(id: $id)\n}\n    `;\nexport type DeletePublisherMutationFn = Apollo.MutationFunction<DeletePublisherMutation, DeletePublisherMutationVariables>;\n\n/**\n * __useDeletePublisherMutation__\n *\n * To run a mutation, you first call `useDeletePublisherMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeletePublisherMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deletePublisherMutation, { data, loading, error }] = useDeletePublisherMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeletePublisherMutation(baseOptions?: Apollo.MutationHookOptions<DeletePublisherMutation, DeletePublisherMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<DeletePublisherMutation, DeletePublisherMutationVariables>(DeletePublisherDocument, options);\n      }\nexport type DeletePublisherMutationHookResult = ReturnType<typeof useDeletePublisherMutation>;\nexport type DeletePublisherMutationResult = Apollo.MutationResult<DeletePublisherMutation>;\nexport type DeletePublisherMutationOptions = Apollo.BaseMutationOptions<DeletePublisherMutation, DeletePublisherMutationVariables>;\nexport const DeleteUserRequestDocument = gql`\n    mutation DeleteUserRequest($id: ID!) {\n  deleteRequest(id: $id)\n}\n    `;\nexport type DeleteUserRequestMutationFn = Apollo.MutationFunction<DeleteUserRequestMutation, DeleteUserRequestMutationVariables>;\n\n/**\n * __useDeleteUserRequestMutation__\n *\n * To run a mutation, you first call `useDeleteUserRequestMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteUserRequestMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteUserRequestMutation, { data, loading, error }] = useDeleteUserRequestMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteUserRequestMutation(baseOptions?: Apollo.MutationHookOptions<DeleteUserRequestMutation, DeleteUserRequestMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<DeleteUserRequestMutation, DeleteUserRequestMutationVariables>(DeleteUserRequestDocument, options);\n      }\nexport type DeleteUserRequestMutationHookResult = ReturnType<typeof useDeleteUserRequestMutation>;\nexport type DeleteUserRequestMutationResult = Apollo.MutationResult<DeleteUserRequestMutation>;\nexport type DeleteUserRequestMutationOptions = Apollo.BaseMutationOptions<DeleteUserRequestMutation, DeleteUserRequestMutationVariables>;\nexport const DeleteUserDocument = gql`\n    mutation DeleteUser($id: ID!) {\n  deleteUser(id: $id)\n}\n    `;\nexport type DeleteUserMutationFn = Apollo.MutationFunction<DeleteUserMutation, DeleteUserMutationVariables>;\n\n/**\n * __useDeleteUserMutation__\n *\n * To run a mutation, you first call `useDeleteUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteUserMutation, { data, loading, error }] = useDeleteUserMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteUserMutation(baseOptions?: Apollo.MutationHookOptions<DeleteUserMutation, DeleteUserMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<DeleteUserMutation, DeleteUserMutationVariables>(DeleteUserDocument, options);\n      }\nexport type DeleteUserMutationHookResult = ReturnType<typeof useDeleteUserMutation>;\nexport type DeleteUserMutationResult = Apollo.MutationResult<DeleteUserMutation>;\nexport type DeleteUserMutationOptions = Apollo.BaseMutationOptions<DeleteUserMutation, DeleteUserMutationVariables>;\nexport const LoginDocument = gql`\n    mutation Login($data: LoginAdminInput!) {\n  loginAdmin(data: $data) {\n    ...LoginResponse\n  }\n}\n    ${LoginResponseFragmentDoc}`;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const UpdateAdminDocument = gql`\n    mutation UpdateAdmin($data: UpdateAdminInput!) {\n  updateAdmin(data: $data)\n}\n    `;\nexport type UpdateAdminMutationFn = Apollo.MutationFunction<UpdateAdminMutation, UpdateAdminMutationVariables>;\n\n/**\n * __useUpdateAdminMutation__\n *\n * To run a mutation, you first call `useUpdateAdminMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateAdminMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateAdminMutation, { data, loading, error }] = useUpdateAdminMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdateAdminMutation(baseOptions?: Apollo.MutationHookOptions<UpdateAdminMutation, UpdateAdminMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateAdminMutation, UpdateAdminMutationVariables>(UpdateAdminDocument, options);\n      }\nexport type UpdateAdminMutationHookResult = ReturnType<typeof useUpdateAdminMutation>;\nexport type UpdateAdminMutationResult = Apollo.MutationResult<UpdateAdminMutation>;\nexport type UpdateAdminMutationOptions = Apollo.BaseMutationOptions<UpdateAdminMutation, UpdateAdminMutationVariables>;\nexport const UpdateAuthorDocument = gql`\n    mutation UpdateAuthor($data: UpdateAuthorInput!, $imageFile: Upload) {\n  updateAuthor(data: $data, imageFile: $imageFile)\n}\n    `;\nexport type UpdateAuthorMutationFn = Apollo.MutationFunction<UpdateAuthorMutation, UpdateAuthorMutationVariables>;\n\n/**\n * __useUpdateAuthorMutation__\n *\n * To run a mutation, you first call `useUpdateAuthorMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateAuthorMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateAuthorMutation, { data, loading, error }] = useUpdateAuthorMutation({\n *   variables: {\n *      data: // value for 'data'\n *      imageFile: // value for 'imageFile'\n *   },\n * });\n */\nexport function useUpdateAuthorMutation(baseOptions?: Apollo.MutationHookOptions<UpdateAuthorMutation, UpdateAuthorMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateAuthorMutation, UpdateAuthorMutationVariables>(UpdateAuthorDocument, options);\n      }\nexport type UpdateAuthorMutationHookResult = ReturnType<typeof useUpdateAuthorMutation>;\nexport type UpdateAuthorMutationResult = Apollo.MutationResult<UpdateAuthorMutation>;\nexport type UpdateAuthorMutationOptions = Apollo.BaseMutationOptions<UpdateAuthorMutation, UpdateAuthorMutationVariables>;\nexport const UpdateCategoryDocument = gql`\n    mutation UpdateCategory($data: UpdateCategoryInput!) {\n  updateCategory(data: $data)\n}\n    `;\nexport type UpdateCategoryMutationFn = Apollo.MutationFunction<UpdateCategoryMutation, UpdateCategoryMutationVariables>;\n\n/**\n * __useUpdateCategoryMutation__\n *\n * To run a mutation, you first call `useUpdateCategoryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateCategoryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateCategoryMutation, { data, loading, error }] = useUpdateCategoryMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdateCategoryMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCategoryMutation, UpdateCategoryMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateCategoryMutation, UpdateCategoryMutationVariables>(UpdateCategoryDocument, options);\n      }\nexport type UpdateCategoryMutationHookResult = ReturnType<typeof useUpdateCategoryMutation>;\nexport type UpdateCategoryMutationResult = Apollo.MutationResult<UpdateCategoryMutation>;\nexport type UpdateCategoryMutationOptions = Apollo.BaseMutationOptions<UpdateCategoryMutation, UpdateCategoryMutationVariables>;\nexport const UpdateCollectionDocument = gql`\n    mutation UpdateCollection($data: UpdateCollectionInput!, $imageFile: Upload) {\n  updateCollection(data: $data, imageFile: $imageFile)\n}\n    `;\nexport type UpdateCollectionMutationFn = Apollo.MutationFunction<UpdateCollectionMutation, UpdateCollectionMutationVariables>;\n\n/**\n * __useUpdateCollectionMutation__\n *\n * To run a mutation, you first call `useUpdateCollectionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateCollectionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateCollectionMutation, { data, loading, error }] = useUpdateCollectionMutation({\n *   variables: {\n *      data: // value for 'data'\n *      imageFile: // value for 'imageFile'\n *   },\n * });\n */\nexport function useUpdateCollectionMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCollectionMutation, UpdateCollectionMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateCollectionMutation, UpdateCollectionMutationVariables>(UpdateCollectionDocument, options);\n      }\nexport type UpdateCollectionMutationHookResult = ReturnType<typeof useUpdateCollectionMutation>;\nexport type UpdateCollectionMutationResult = Apollo.MutationResult<UpdateCollectionMutation>;\nexport type UpdateCollectionMutationOptions = Apollo.BaseMutationOptions<UpdateCollectionMutation, UpdateCollectionMutationVariables>;\nexport const UpdateOrderDocument = gql`\n    mutation UpdateOrder($data: UpdateOrderInput!) {\n  updateOrder(data: $data)\n}\n    `;\nexport type UpdateOrderMutationFn = Apollo.MutationFunction<UpdateOrderMutation, UpdateOrderMutationVariables>;\n\n/**\n * __useUpdateOrderMutation__\n *\n * To run a mutation, you first call `useUpdateOrderMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateOrderMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateOrderMutation, { data, loading, error }] = useUpdateOrderMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdateOrderMutation(baseOptions?: Apollo.MutationHookOptions<UpdateOrderMutation, UpdateOrderMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateOrderMutation, UpdateOrderMutationVariables>(UpdateOrderDocument, options);\n      }\nexport type UpdateOrderMutationHookResult = ReturnType<typeof useUpdateOrderMutation>;\nexport type UpdateOrderMutationResult = Apollo.MutationResult<UpdateOrderMutation>;\nexport type UpdateOrderMutationOptions = Apollo.BaseMutationOptions<UpdateOrderMutation, UpdateOrderMutationVariables>;\nexport const UpdateProductDocument = gql`\n    mutation UpdateProduct($data: UpdateProductInput!, $imageFile: Upload) {\n  updateProduct(data: $data, imageFile: $imageFile)\n}\n    `;\nexport type UpdateProductMutationFn = Apollo.MutationFunction<UpdateProductMutation, UpdateProductMutationVariables>;\n\n/**\n * __useUpdateProductMutation__\n *\n * To run a mutation, you first call `useUpdateProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProductMutation, { data, loading, error }] = useUpdateProductMutation({\n *   variables: {\n *      data: // value for 'data'\n *      imageFile: // value for 'imageFile'\n *   },\n * });\n */\nexport function useUpdateProductMutation(baseOptions?: Apollo.MutationHookOptions<UpdateProductMutation, UpdateProductMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateProductMutation, UpdateProductMutationVariables>(UpdateProductDocument, options);\n      }\nexport type UpdateProductMutationHookResult = ReturnType<typeof useUpdateProductMutation>;\nexport type UpdateProductMutationResult = Apollo.MutationResult<UpdateProductMutation>;\nexport type UpdateProductMutationOptions = Apollo.BaseMutationOptions<UpdateProductMutation, UpdateProductMutationVariables>;\nexport const UpdatePublisherDocument = gql`\n    mutation UpdatePublisher($data: UpdatePublisherInput!) {\n  updatePublisher(data: $data)\n}\n    `;\nexport type UpdatePublisherMutationFn = Apollo.MutationFunction<UpdatePublisherMutation, UpdatePublisherMutationVariables>;\n\n/**\n * __useUpdatePublisherMutation__\n *\n * To run a mutation, you first call `useUpdatePublisherMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdatePublisherMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updatePublisherMutation, { data, loading, error }] = useUpdatePublisherMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdatePublisherMutation(baseOptions?: Apollo.MutationHookOptions<UpdatePublisherMutation, UpdatePublisherMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdatePublisherMutation, UpdatePublisherMutationVariables>(UpdatePublisherDocument, options);\n      }\nexport type UpdatePublisherMutationHookResult = ReturnType<typeof useUpdatePublisherMutation>;\nexport type UpdatePublisherMutationResult = Apollo.MutationResult<UpdatePublisherMutation>;\nexport type UpdatePublisherMutationOptions = Apollo.BaseMutationOptions<UpdatePublisherMutation, UpdatePublisherMutationVariables>;\nexport const UpdateUserRequestDocument = gql`\n    mutation UpdateUserRequest($data: UpdateUserRequestInput!) {\n  updateRequest(data: $data)\n}\n    `;\nexport type UpdateUserRequestMutationFn = Apollo.MutationFunction<UpdateUserRequestMutation, UpdateUserRequestMutationVariables>;\n\n/**\n * __useUpdateUserRequestMutation__\n *\n * To run a mutation, you first call `useUpdateUserRequestMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateUserRequestMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateUserRequestMutation, { data, loading, error }] = useUpdateUserRequestMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdateUserRequestMutation(baseOptions?: Apollo.MutationHookOptions<UpdateUserRequestMutation, UpdateUserRequestMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateUserRequestMutation, UpdateUserRequestMutationVariables>(UpdateUserRequestDocument, options);\n      }\nexport type UpdateUserRequestMutationHookResult = ReturnType<typeof useUpdateUserRequestMutation>;\nexport type UpdateUserRequestMutationResult = Apollo.MutationResult<UpdateUserRequestMutation>;\nexport type UpdateUserRequestMutationOptions = Apollo.BaseMutationOptions<UpdateUserRequestMutation, UpdateUserRequestMutationVariables>;\nexport const UpdateUserDocument = gql`\n    mutation UpdateUser($data: UpdateUserInput!) {\n  updateUser(data: $data)\n}\n    `;\nexport type UpdateUserMutationFn = Apollo.MutationFunction<UpdateUserMutation, UpdateUserMutationVariables>;\n\n/**\n * __useUpdateUserMutation__\n *\n * To run a mutation, you first call `useUpdateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateUserMutation, { data, loading, error }] = useUpdateUserMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdateUserMutation(baseOptions?: Apollo.MutationHookOptions<UpdateUserMutation, UpdateUserMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateUserMutation, UpdateUserMutationVariables>(UpdateUserDocument, options);\n      }\nexport type UpdateUserMutationHookResult = ReturnType<typeof useUpdateUserMutation>;\nexport type UpdateUserMutationResult = Apollo.MutationResult<UpdateUserMutation>;\nexport type UpdateUserMutationOptions = Apollo.BaseMutationOptions<UpdateUserMutation, UpdateUserMutationVariables>;\nexport const AdminDocument = gql`\n    query Admin($id: ID!) {\n  admin(id: $id) {\n    ...Admin\n  }\n}\n    ${AdminFragmentDoc}`;\n\n/**\n * __useAdminQuery__\n *\n * To run a query within a React component, call `useAdminQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useAdminQuery(baseOptions: Apollo.QueryHookOptions<AdminQuery, AdminQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AdminQuery, AdminQueryVariables>(AdminDocument, options);\n      }\nexport function useAdminLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminQuery, AdminQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AdminQuery, AdminQueryVariables>(AdminDocument, options);\n        }\nexport type AdminQueryHookResult = ReturnType<typeof useAdminQuery>;\nexport type AdminLazyQueryHookResult = ReturnType<typeof useAdminLazyQuery>;\nexport type AdminQueryResult = Apollo.QueryResult<AdminQuery, AdminQueryVariables>;\nexport const AdminsDocument = gql`\n    query Admins($skip: Int, $take: Int, $order: [OrderByMap!], $searchQuery: String) {\n  admins(skip: $skip, take: $take, order: $order, searchQuery: $searchQuery) {\n    items {\n      ...Admin\n    }\n    total\n    hasMore\n  }\n}\n    ${AdminFragmentDoc}`;\n\n/**\n * __useAdminsQuery__\n *\n * To run a query within a React component, call `useAdminsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminsQuery({\n *   variables: {\n *      skip: // value for 'skip'\n *      take: // value for 'take'\n *      order: // value for 'order'\n *      searchQuery: // value for 'searchQuery'\n *   },\n * });\n */\nexport function useAdminsQuery(baseOptions?: Apollo.QueryHookOptions<AdminsQuery, AdminsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AdminsQuery, AdminsQueryVariables>(AdminsDocument, options);\n      }\nexport function useAdminsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminsQuery, AdminsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AdminsQuery, AdminsQueryVariables>(AdminsDocument, options);\n        }\nexport type AdminsQueryHookResult = ReturnType<typeof useAdminsQuery>;\nexport type AdminsLazyQueryHookResult = ReturnType<typeof useAdminsLazyQuery>;\nexport type AdminsQueryResult = Apollo.QueryResult<AdminsQuery, AdminsQueryVariables>;\nexport const AuthorDocument = gql`\n    query Author($id: ID!, $skip: Int, $take: Int, $order: [OrderByMap!], $searchQuery: String) {\n  author(id: $id) {\n    ...Author\n    products(take: $take, skip: $skip, order: $order, searchQuery: $searchQuery) {\n      ...PaginatedProductResponse\n    }\n  }\n}\n    ${AuthorFragmentDoc}\n${PaginatedProductResponseFragmentDoc}`;\n\n/**\n * __useAuthorQuery__\n *\n * To run a query within a React component, call `useAuthorQuery` and pass it any options that fit your needs.\n * When your component renders, `useAuthorQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAuthorQuery({\n *   variables: {\n *      id: // value for 'id'\n *      skip: // value for 'skip'\n *      take: // value for 'take'\n *      order: // value for 'order'\n *      searchQuery: // value for 'searchQuery'\n *   },\n * });\n */\nexport function useAuthorQuery(baseOptions: Apollo.QueryHookOptions<AuthorQuery, AuthorQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AuthorQuery, AuthorQueryVariables>(AuthorDocument, options);\n      }\nexport function useAuthorLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AuthorQuery, AuthorQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AuthorQuery, AuthorQueryVariables>(AuthorDocument, options);\n        }\nexport type AuthorQueryHookResult = ReturnType<typeof useAuthorQuery>;\nexport type AuthorLazyQueryHookResult = ReturnType<typeof useAuthorLazyQuery>;\nexport type AuthorQueryResult = Apollo.QueryResult<AuthorQuery, AuthorQueryVariables>;\nexport const AuthorsDocument = gql`\n    query Authors($skip: Int, $take: Int, $order: [OrderByMap!], $searchQuery: String) {\n  authors(skip: $skip, take: $take, order: $order, searchQuery: $searchQuery) {\n    items {\n      ...Author\n    }\n    total\n    hasMore\n  }\n}\n    ${AuthorFragmentDoc}`;\n\n/**\n * __useAuthorsQuery__\n *\n * To run a query within a React component, call `useAuthorsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAuthorsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAuthorsQuery({\n *   variables: {\n *      skip: // value for 'skip'\n *      take: // value for 'take'\n *      order: // value for 'order'\n *      searchQuery: // value for 'searchQuery'\n *   },\n * });\n */\nexport function useAuthorsQuery(baseOptions?: Apollo.QueryHookOptions<AuthorsQuery, AuthorsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AuthorsQuery, AuthorsQueryVariables>(AuthorsDocument, options);\n      }\nexport function useAuthorsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AuthorsQuery, AuthorsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AuthorsQuery, AuthorsQueryVariables>(AuthorsDocument, options);\n        }\nexport type AuthorsQueryHookResult = ReturnType<typeof useAuthorsQuery>;\nexport type AuthorsLazyQueryHookResult = ReturnType<typeof useAuthorsLazyQuery>;\nexport type AuthorsQueryResult = Apollo.QueryResult<AuthorsQuery, AuthorsQueryVariables>;\nexport const CategoriesDocument = gql`\n    query Categories($skip: Int, $take: Int, $order: [OrderByMap!], $searchQuery: String) {\n  categories(skip: $skip, take: $take, order: $order, searchQuery: $searchQuery) {\n    items {\n      ...Category\n    }\n    total\n    hasMore\n  }\n}\n    ${CategoryFragmentDoc}`;\n\n/**\n * __useCategoriesQuery__\n *\n * To run a query within a React component, call `useCategoriesQuery` and pass it any options that fit your needs.\n * When your component renders, `useCategoriesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCategoriesQuery({\n *   variables: {\n *      skip: // value for 'skip'\n *      take: // value for 'take'\n *      order: // value for 'order'\n *      searchQuery: // value for 'searchQuery'\n *   },\n * });\n */\nexport function useCategoriesQuery(baseOptions?: Apollo.QueryHookOptions<CategoriesQuery, CategoriesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<CategoriesQuery, CategoriesQueryVariables>(CategoriesDocument, options);\n      }\nexport function useCategoriesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CategoriesQuery, CategoriesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<CategoriesQuery, CategoriesQueryVariables>(CategoriesDocument, options);\n        }\nexport type CategoriesQueryHookResult = ReturnType<typeof useCategoriesQuery>;\nexport type CategoriesLazyQueryHookResult = ReturnType<typeof useCategoriesLazyQuery>;\nexport type CategoriesQueryResult = Apollo.QueryResult<CategoriesQuery, CategoriesQueryVariables>;\nexport const CategoryDocument = gql`\n    query Category($id: ID!, $skip: Int, $take: Int, $order: [OrderByMap!], $searchQuery: String) {\n  category(id: $id) {\n    ...Category\n    products(take: $take, skip: $skip, order: $order, searchQuery: $searchQuery) {\n      ...PaginatedProductResponse\n    }\n  }\n}\n    ${CategoryFragmentDoc}\n${PaginatedProductResponseFragmentDoc}`;\n\n/**\n * __useCategoryQuery__\n *\n * To run a query within a React component, call `useCategoryQuery` and pass it any options that fit your needs.\n * When your component renders, `useCategoryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCategoryQuery({\n *   variables: {\n *      id: // value for 'id'\n *      skip: // value for 'skip'\n *      take: // value for 'take'\n *      order: // value for 'order'\n *      searchQuery: // value for 'searchQuery'\n *   },\n * });\n */\nexport function useCategoryQuery(baseOptions: Apollo.QueryHookOptions<CategoryQuery, CategoryQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<CategoryQuery, CategoryQueryVariables>(CategoryDocument, options);\n      }\nexport function useCategoryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CategoryQuery, CategoryQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<CategoryQuery, CategoryQueryVariables>(CategoryDocument, options);\n        }\nexport type CategoryQueryHookResult = ReturnType<typeof useCategoryQuery>;\nexport type CategoryLazyQueryHookResult = ReturnType<typeof useCategoryLazyQuery>;\nexport type CategoryQueryResult = Apollo.QueryResult<CategoryQuery, CategoryQueryVariables>;\nexport const CollectionDocument = gql`\n    query Collection($id: ID!, $skip: Int, $take: Int, $order: [OrderByMap!], $searchQuery: String) {\n  collection(id: $id) {\n    ...Collection\n    products(take: $take, skip: $skip, order: $order, searchQuery: $searchQuery) {\n      ...PaginatedProductResponse\n    }\n  }\n}\n    ${CollectionFragmentDoc}\n${PaginatedProductResponseFragmentDoc}`;\n\n/**\n * __useCollectionQuery__\n *\n * To run a query within a React component, call `useCollectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useCollectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCollectionQuery({\n *   variables: {\n *      id: // value for 'id'\n *      skip: // value for 'skip'\n *      take: // value for 'take'\n *      order: // value for 'order'\n *      searchQuery: // value for 'searchQuery'\n *   },\n * });\n */\nexport function useCollectionQuery(baseOptions: Apollo.QueryHookOptions<CollectionQuery, CollectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<CollectionQuery, CollectionQueryVariables>(CollectionDocument, options);\n      }\nexport function useCollectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CollectionQuery, CollectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<CollectionQuery, CollectionQueryVariables>(CollectionDocument, options);\n        }\nexport type CollectionQueryHookResult = ReturnType<typeof useCollectionQuery>;\nexport type CollectionLazyQueryHookResult = ReturnType<typeof useCollectionLazyQuery>;\nexport type CollectionQueryResult = Apollo.QueryResult<CollectionQuery, CollectionQueryVariables>;\nexport const CollectionsDocument = gql`\n    query Collections($skip: Int, $take: Int, $order: [OrderByMap!], $searchQuery: String) {\n  collections(skip: $skip, take: $take, order: $order, searchQuery: $searchQuery) {\n    items {\n      ...Collection\n    }\n    total\n    hasMore\n  }\n}\n    ${CollectionFragmentDoc}`;\n\n/**\n * __useCollectionsQuery__\n *\n * To run a query within a React component, call `useCollectionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useCollectionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCollectionsQuery({\n *   variables: {\n *      skip: // value for 'skip'\n *      take: // value for 'take'\n *      order: // value for 'order'\n *      searchQuery: // value for 'searchQuery'\n *   },\n * });\n */\nexport function useCollectionsQuery(baseOptions?: Apollo.QueryHookOptions<CollectionsQuery, CollectionsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<CollectionsQuery, CollectionsQueryVariables>(CollectionsDocument, options);\n      }\nexport function useCollectionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CollectionsQuery, CollectionsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<CollectionsQuery, CollectionsQueryVariables>(CollectionsDocument, options);\n        }\nexport type CollectionsQueryHookResult = ReturnType<typeof useCollectionsQuery>;\nexport type CollectionsLazyQueryHookResult = ReturnType<typeof useCollectionsLazyQuery>;\nexport type CollectionsQueryResult = Apollo.QueryResult<CollectionsQuery, CollectionsQueryVariables>;\nexport const DashboardDocument = gql`\n    query Dashboard {\n  admins(take: 0) {\n    total\n  }\n  users(take: 0) {\n    total\n  }\n  products(take: 0) {\n    total\n  }\n  orders(take: 0) {\n    total\n  }\n  requests(take: 0) {\n    total\n  }\n  categories(take: 0) {\n    total\n  }\n  collections(take: 0) {\n    total\n  }\n  authors(take: 0) {\n    total\n  }\n  publishers(take: 0) {\n    total\n  }\n}\n    `;\n\n/**\n * __useDashboardQuery__\n *\n * To run a query within a React component, call `useDashboardQuery` and pass it any options that fit your needs.\n * When your component renders, `useDashboardQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDashboardQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useDashboardQuery(baseOptions?: Apollo.QueryHookOptions<DashboardQuery, DashboardQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<DashboardQuery, DashboardQueryVariables>(DashboardDocument, options);\n      }\nexport function useDashboardLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<DashboardQuery, DashboardQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<DashboardQuery, DashboardQueryVariables>(DashboardDocument, options);\n        }\nexport type DashboardQueryHookResult = ReturnType<typeof useDashboardQuery>;\nexport type DashboardLazyQueryHookResult = ReturnType<typeof useDashboardLazyQuery>;\nexport type DashboardQueryResult = Apollo.QueryResult<DashboardQuery, DashboardQueryVariables>;\nexport const OrderDocument = gql`\n    query Order($id: ID!) {\n  order(id: $id) {\n    ...Order\n  }\n}\n    ${OrderFragmentDoc}`;\n\n/**\n * __useOrderQuery__\n *\n * To run a query within a React component, call `useOrderQuery` and pass it any options that fit your needs.\n * When your component renders, `useOrderQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useOrderQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useOrderQuery(baseOptions: Apollo.QueryHookOptions<OrderQuery, OrderQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<OrderQuery, OrderQueryVariables>(OrderDocument, options);\n      }\nexport function useOrderLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<OrderQuery, OrderQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<OrderQuery, OrderQueryVariables>(OrderDocument, options);\n        }\nexport type OrderQueryHookResult = ReturnType<typeof useOrderQuery>;\nexport type OrderLazyQueryHookResult = ReturnType<typeof useOrderLazyQuery>;\nexport type OrderQueryResult = Apollo.QueryResult<OrderQuery, OrderQueryVariables>;\nexport const OrdersDocument = gql`\n    query Orders($skip: Int, $take: Int, $order: [OrderByMap!], $searchQuery: String) {\n  orders(skip: $skip, take: $take, order: $order, searchQuery: $searchQuery) {\n    items {\n      ...Order\n    }\n    total\n    hasMore\n  }\n}\n    ${OrderFragmentDoc}`;\n\n/**\n * __useOrdersQuery__\n *\n * To run a query within a React component, call `useOrdersQuery` and pass it any options that fit your needs.\n * When your component renders, `useOrdersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useOrdersQuery({\n *   variables: {\n *      skip: // value for 'skip'\n *      take: // value for 'take'\n *      order: // value for 'order'\n *      searchQuery: // value for 'searchQuery'\n *   },\n * });\n */\nexport function useOrdersQuery(baseOptions?: Apollo.QueryHookOptions<OrdersQuery, OrdersQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<OrdersQuery, OrdersQueryVariables>(OrdersDocument, options);\n      }\nexport function useOrdersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<OrdersQuery, OrdersQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<OrdersQuery, OrdersQueryVariables>(OrdersDocument, options);\n        }\nexport type OrdersQueryHookResult = ReturnType<typeof useOrdersQuery>;\nexport type OrdersLazyQueryHookResult = ReturnType<typeof useOrdersLazyQuery>;\nexport type OrdersQueryResult = Apollo.QueryResult<OrdersQuery, OrdersQueryVariables>;\nexport const ProductDocument = gql`\n    query Product($id: ID!) {\n  product(id: $id) {\n    ...Product\n  }\n}\n    ${ProductFragmentDoc}`;\n\n/**\n * __useProductQuery__\n *\n * To run a query within a React component, call `useProductQuery` and pass it any options that fit your needs.\n * When your component renders, `useProductQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProductQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useProductQuery(baseOptions: Apollo.QueryHookOptions<ProductQuery, ProductQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ProductQuery, ProductQueryVariables>(ProductDocument, options);\n      }\nexport function useProductLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProductQuery, ProductQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ProductQuery, ProductQueryVariables>(ProductDocument, options);\n        }\nexport type ProductQueryHookResult = ReturnType<typeof useProductQuery>;\nexport type ProductLazyQueryHookResult = ReturnType<typeof useProductLazyQuery>;\nexport type ProductQueryResult = Apollo.QueryResult<ProductQuery, ProductQueryVariables>;\nexport const ProductsDocument = gql`\n    query Products($skip: Int, $take: Int, $order: [OrderByMap!], $searchQuery: String) {\n  products(skip: $skip, take: $take, order: $order, searchQuery: $searchQuery) {\n    ...PaginatedProductResponse\n  }\n}\n    ${PaginatedProductResponseFragmentDoc}`;\n\n/**\n * __useProductsQuery__\n *\n * To run a query within a React component, call `useProductsQuery` and pass it any options that fit your needs.\n * When your component renders, `useProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProductsQuery({\n *   variables: {\n *      skip: // value for 'skip'\n *      take: // value for 'take'\n *      order: // value for 'order'\n *      searchQuery: // value for 'searchQuery'\n *   },\n * });\n */\nexport function useProductsQuery(baseOptions?: Apollo.QueryHookOptions<ProductsQuery, ProductsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ProductsQuery, ProductsQueryVariables>(ProductsDocument, options);\n      }\nexport function useProductsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProductsQuery, ProductsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ProductsQuery, ProductsQueryVariables>(ProductsDocument, options);\n        }\nexport type ProductsQueryHookResult = ReturnType<typeof useProductsQuery>;\nexport type ProductsLazyQueryHookResult = ReturnType<typeof useProductsLazyQuery>;\nexport type ProductsQueryResult = Apollo.QueryResult<ProductsQuery, ProductsQueryVariables>;\nexport const PublisherDocument = gql`\n    query Publisher($id: ID!, $skip: Int, $take: Int, $order: [OrderByMap!], $searchQuery: String) {\n  publisher(id: $id) {\n    ...Publisher\n    products(take: $take, skip: $skip, order: $order, searchQuery: $searchQuery) {\n      ...PaginatedProductResponse\n    }\n  }\n}\n    ${PublisherFragmentDoc}\n${PaginatedProductResponseFragmentDoc}`;\n\n/**\n * __usePublisherQuery__\n *\n * To run a query within a React component, call `usePublisherQuery` and pass it any options that fit your needs.\n * When your component renders, `usePublisherQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePublisherQuery({\n *   variables: {\n *      id: // value for 'id'\n *      skip: // value for 'skip'\n *      take: // value for 'take'\n *      order: // value for 'order'\n *      searchQuery: // value for 'searchQuery'\n *   },\n * });\n */\nexport function usePublisherQuery(baseOptions: Apollo.QueryHookOptions<PublisherQuery, PublisherQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<PublisherQuery, PublisherQueryVariables>(PublisherDocument, options);\n      }\nexport function usePublisherLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PublisherQuery, PublisherQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<PublisherQuery, PublisherQueryVariables>(PublisherDocument, options);\n        }\nexport type PublisherQueryHookResult = ReturnType<typeof usePublisherQuery>;\nexport type PublisherLazyQueryHookResult = ReturnType<typeof usePublisherLazyQuery>;\nexport type PublisherQueryResult = Apollo.QueryResult<PublisherQuery, PublisherQueryVariables>;\nexport const PublishersDocument = gql`\n    query Publishers($skip: Int, $take: Int, $order: [OrderByMap!], $searchQuery: String) {\n  publishers(skip: $skip, take: $take, order: $order, searchQuery: $searchQuery) {\n    items {\n      ...Publisher\n    }\n    total\n    hasMore\n  }\n}\n    ${PublisherFragmentDoc}`;\n\n/**\n * __usePublishersQuery__\n *\n * To run a query within a React component, call `usePublishersQuery` and pass it any options that fit your needs.\n * When your component renders, `usePublishersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePublishersQuery({\n *   variables: {\n *      skip: // value for 'skip'\n *      take: // value for 'take'\n *      order: // value for 'order'\n *      searchQuery: // value for 'searchQuery'\n *   },\n * });\n */\nexport function usePublishersQuery(baseOptions?: Apollo.QueryHookOptions<PublishersQuery, PublishersQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<PublishersQuery, PublishersQueryVariables>(PublishersDocument, options);\n      }\nexport function usePublishersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PublishersQuery, PublishersQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<PublishersQuery, PublishersQueryVariables>(PublishersDocument, options);\n        }\nexport type PublishersQueryHookResult = ReturnType<typeof usePublishersQuery>;\nexport type PublishersLazyQueryHookResult = ReturnType<typeof usePublishersLazyQuery>;\nexport type PublishersQueryResult = Apollo.QueryResult<PublishersQuery, PublishersQueryVariables>;\nexport const UserDocument = gql`\n    query User($id: ID!) {\n  user(id: $id) {\n    ...User\n  }\n}\n    ${UserFragmentDoc}`;\n\n/**\n * __useUserQuery__\n *\n * To run a query within a React component, call `useUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUserQuery(baseOptions: Apollo.QueryHookOptions<UserQuery, UserQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<UserQuery, UserQueryVariables>(UserDocument, options);\n      }\nexport function useUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserQuery, UserQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<UserQuery, UserQueryVariables>(UserDocument, options);\n        }\nexport type UserQueryHookResult = ReturnType<typeof useUserQuery>;\nexport type UserLazyQueryHookResult = ReturnType<typeof useUserLazyQuery>;\nexport type UserQueryResult = Apollo.QueryResult<UserQuery, UserQueryVariables>;\nexport const UserRequestDocument = gql`\n    query UserRequest($id: ID!) {\n  request(id: $id) {\n    ...UserRequest\n  }\n}\n    ${UserRequestFragmentDoc}`;\n\n/**\n * __useUserRequestQuery__\n *\n * To run a query within a React component, call `useUserRequestQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserRequestQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserRequestQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUserRequestQuery(baseOptions: Apollo.QueryHookOptions<UserRequestQuery, UserRequestQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<UserRequestQuery, UserRequestQueryVariables>(UserRequestDocument, options);\n      }\nexport function useUserRequestLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserRequestQuery, UserRequestQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<UserRequestQuery, UserRequestQueryVariables>(UserRequestDocument, options);\n        }\nexport type UserRequestQueryHookResult = ReturnType<typeof useUserRequestQuery>;\nexport type UserRequestLazyQueryHookResult = ReturnType<typeof useUserRequestLazyQuery>;\nexport type UserRequestQueryResult = Apollo.QueryResult<UserRequestQuery, UserRequestQueryVariables>;\nexport const UserRequestsDocument = gql`\n    query UserRequests($skip: Int, $take: Int, $order: [OrderByMap!], $searchQuery: String) {\n  requests(skip: $skip, take: $take, order: $order, searchQuery: $searchQuery) {\n    items {\n      ...UserRequest\n    }\n    total\n    hasMore\n  }\n}\n    ${UserRequestFragmentDoc}`;\n\n/**\n * __useUserRequestsQuery__\n *\n * To run a query within a React component, call `useUserRequestsQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserRequestsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserRequestsQuery({\n *   variables: {\n *      skip: // value for 'skip'\n *      take: // value for 'take'\n *      order: // value for 'order'\n *      searchQuery: // value for 'searchQuery'\n *   },\n * });\n */\nexport function useUserRequestsQuery(baseOptions?: Apollo.QueryHookOptions<UserRequestsQuery, UserRequestsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<UserRequestsQuery, UserRequestsQueryVariables>(UserRequestsDocument, options);\n      }\nexport function useUserRequestsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserRequestsQuery, UserRequestsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<UserRequestsQuery, UserRequestsQueryVariables>(UserRequestsDocument, options);\n        }\nexport type UserRequestsQueryHookResult = ReturnType<typeof useUserRequestsQuery>;\nexport type UserRequestsLazyQueryHookResult = ReturnType<typeof useUserRequestsLazyQuery>;\nexport type UserRequestsQueryResult = Apollo.QueryResult<UserRequestsQuery, UserRequestsQueryVariables>;\nexport const UsersDocument = gql`\n    query Users($skip: Int, $take: Int, $order: [OrderByMap!], $searchQuery: String) {\n  users(skip: $skip, take: $take, order: $order, searchQuery: $searchQuery) {\n    items {\n      ...User\n    }\n    total\n    hasMore\n  }\n}\n    ${UserFragmentDoc}`;\n\n/**\n * __useUsersQuery__\n *\n * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersQuery({\n *   variables: {\n *      skip: // value for 'skip'\n *      take: // value for 'take'\n *      order: // value for 'order'\n *      searchQuery: // value for 'searchQuery'\n *   },\n * });\n */\nexport function useUsersQuery(baseOptions?: Apollo.QueryHookOptions<UsersQuery, UsersQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<UsersQuery, UsersQueryVariables>(UsersDocument, options);\n      }\nexport function useUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UsersQuery, UsersQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<UsersQuery, UsersQueryVariables>(UsersDocument, options);\n        }\nexport type UsersQueryHookResult = ReturnType<typeof useUsersQuery>;\nexport type UsersLazyQueryHookResult = ReturnType<typeof useUsersLazyQuery>;\nexport type UsersQueryResult = Apollo.QueryResult<UsersQuery, UsersQueryVariables>;","export const Error = ({\n  error = true,\n  message = \"Something went wrong\",\n}: {\n  onRetry?: () => void;\n  message?: string;\n  error?: boolean;\n}) => {\n  if (!error) return null;\n\n  return <div className=\"text-red-400\">{message}</div>;\n};\n","export const Loading = ({ loading = true }: { loading?: boolean }) => {\n  if (!loading) return null;\n\n  return <div>Loading...</div>;\n};\n","import { Link, useRouteMatch } from \"react-router-dom\";\n\nexport const Sidebar = () => {\n  return (\n    <>\n      <div className=\"flex flex-col bg-yellow-50 h-screen w-40 fixed\">\n        <MenuItem path=\"/\" name=\"Home\" />\n        <MenuItem path=\"/orders\" name=\"Orders\" />\n        <MenuItem path=\"/requests\" name=\"Requests\" />\n        <MenuItem path=\"/users\" name=\"Users\" />\n        <MenuItem path=\"/products\" name=\"Products\" />\n        <MenuItem path=\"/admins\" name=\"Admins\" />\n        <MenuItem path=\"/categories\" name=\"Categories\" />\n        <MenuItem path=\"/collections\" name=\"Collections\" />\n        <MenuItem path=\"/authors\" name=\"Authors\" />\n        <MenuItem path=\"/publishers\" name=\"Publishers\" />\n        <MenuItem path=\"/logout\" name=\"Logout\" />\n      </div>\n      <div style={{ minWidth: \"10rem\" }} />\n    </>\n  );\n};\n\nconst MenuItem = ({ name, path }: { name: string; path: string }) => {\n  const s = useRouteMatch({ path, exact: path === \"/\" });\n\n  return (\n    <Link\n      className={`pl-5 py-4 hover:bg-purple-100 rounded-lg ${\n        s ? \"text-purple-400\" : \"\"\n      }`}\n      to={path}\n    >\n      {name}\n    </Link>\n  );\n};\n","import { useHistory } from \"react-router-dom\";\n\nexport const BackButton = () => {\n  const history = useHistory();\n\n  return (\n    <div className=\"mb-4\">\n      <button\n        onClick={() => history.goBack()}\n        className=\"text-purple-400 hover:bg-purple-200 hover:text-black p-2 rounded\"\n      >\n        {\"<-\"} Back\n      </button>\n    </div>\n  );\n};\n","export const Input = ({\n  id,\n  className,\n  type = \"text\",\n  label,\n  value,\n  onChange,\n  multiline = false,\n}: {\n  id: string;\n  className?: string;\n  type?: React.HTMLInputTypeAttribute;\n  label: string;\n  value?: string;\n  onChange: (value: string) => void;\n  multiline?: boolean;\n}) => {\n  const props = {\n    className: \"ml-4 bg-purple-50 p-2 rounded\",\n    id,\n    name: id,\n    placeholder: label,\n    value,\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(e.target.value),\n  };\n\n  return (\n    <div className={`flex items-center justify-between ${className ?? \"\"}`}>\n      <label htmlFor={id}>{label}</label>\n      {multiline ? (\n        <textarea {...(props as any)} />\n      ) : (\n        <input type={type} {...props} />\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport interface PaginatedResponse<T> {\n  hasMore: boolean;\n  items: Array<T>;\n  total: number;\n}\n\nexport function ItemList<T extends { id: string; name: string }>({\n  data,\n  searchQuery,\n  onSearch,\n  onLoadMore,\n  actionComponent,\n  highlight,\n  name,\n  limitHeight,\n}: {\n  data?: PaginatedResponse<T>;\n  searchQuery: string;\n  onSearch: (q: string) => void;\n  onLoadMore: () => void;\n  actionComponent?: (item: T) => React.ReactNode;\n  highlight?: (item: T) => boolean;\n  name: string;\n  limitHeight?: boolean;\n}) {\n  return (\n    <div className={limitHeight ? \"overflow-y-scroll max-h-80\" : \"\"}>\n      <div className=\"flex items-center mb-4\">\n        <input\n          className=\"p-2 mr-2 bg-purple-50 rounded-lg\"\n          placeholder=\"Search\"\n          value={searchQuery}\n          onChange={(e) => {\n            onSearch(e.target.value);\n          }}\n        />\n        <div>Total: {data?.total}</div>\n      </div>\n      {data?.items.map((item) => (\n        <div\n          className={`flex items-center p-2 justify-between ${\n            highlight && highlight(item) ? \"bg-purple-100\" : \"\"\n          }`}\n          key={item.id}\n        >\n          <div>{item.name}</div>\n          <div className=\"ml-6 flex items-center\">\n            {actionComponent && actionComponent(item)}\n            <Link\n              className=\"ml-4 text-purple-400\"\n              to={`/${name}/${item.id}/edit`}\n            >\n              Edit\n            </Link>\n          </div>\n        </div>\n      ))}\n      {data?.hasMore ? (\n        <div className=\"text-center mt-2\">\n          <button\n            className=\"text-purple-400 hover:bg-purple-200 hover:text-black p-2 rounded\"\n            onClick={onLoadMore}\n          >\n            Load more\n          </button>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n","import { useLocation } from \"react-router-dom\";\n\nexport function useQueryParams() {\n  return new URLSearchParams(useLocation().search);\n}\n","import { ApolloError } from \"@apollo/client\";\nimport { useReducer, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { BackButton } from \"../components/BackButton\";\nimport { Error } from \"../components/Error\";\nimport { Input } from \"../components/Input\";\nimport { ItemList } from \"../components/ItemList\";\nimport { Loading } from \"../components/Loading\";\nimport {\n  CreateAdminInput,\n  useCreateAdminMutation,\n  useDeleteAdminMutation,\n  AdminFragment,\n  useUpdateAdminMutation,\n  useAdminQuery,\n  useAdminsQuery,\n} from \"../generated/graphql\";\nimport { useQueryParams } from \"../hooks/query\";\n\nexport const AdminsPage = () => {\n  const search = useQueryParams();\n  const { data, loading, error, refetch, fetchMore } = useAdminsQuery({\n    variables: { searchQuery: search.get(\"q\") },\n  });\n  const [deleteAdmin] = useDeleteAdminMutation();\n\n  const history = useHistory();\n  if (error) {\n    return <div>something went wrong</div>;\n  }\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <div className=\"mb-4\">\n        <Link\n          to=\"/admins/create\"\n          className=\"text-purple-400 hover:bg-purple-200 hover:text-black p-2 rounded\"\n        >\n          {\"+\"} Create\n        </Link>\n      </div>\n      <ItemList\n        name=\"admins\"\n        data={data?.admins}\n        onSearch={(q) => {\n          search.set(\"q\", q);\n          const queries = search.toString();\n          history.push(`/admins?${queries}`);\n          refetch({ searchQuery: search.get(\"q\") });\n        }}\n        onLoadMore={() => {\n          fetchMore({\n            variables: { skip: data?.admins.items.length },\n          });\n        }}\n        searchQuery={search.get(\"q\") ?? \"\"}\n        actionComponent={(item) => (\n          <button\n            className=\"text-red-400\"\n            onClick={async () => {\n              const name = prompt(\"Enter name\", \"\");\n              if (name === item.name) {\n                await deleteAdmin({ variables: { id: item.id } });\n                refetch();\n              }\n            }}\n          >\n            Remove\n          </button>\n        )}\n      />\n    </div>\n  );\n};\n\nexport const AdminEditPage = () => {\n  const { adminID } = useParams<{ adminID: string }>();\n\n  const { data, loading, error } = useAdminQuery({\n    variables: { id: adminID },\n  });\n\n  const [updateAdmin, admin] = useUpdateAdminMutation();\n  const [message, setMessage] = useState<string>();\n\n  if (error) {\n    return <Error />;\n  }\n\n  return (\n    <div>\n      <BackButton />\n      {!loading || data?.admin ? (\n        <Edit\n          admin={data!.admin!}\n          loading={admin.loading}\n          error={admin.error}\n          onSubmit={async (data) => {\n            setMessage(undefined);\n            const res = await updateAdmin({\n              variables: { data: { ...data, id: adminID } },\n            });\n            if (!res.errors) {\n              setMessage(\"Admin updated\");\n            }\n          }}\n        />\n      ) : (\n        <Loading />\n      )}\n      <div className=\"text-green-400\">{message}</div>\n    </div>\n  );\n};\n\nexport const AdminCreatePage = () => {\n  const [createAdmin, { loading, error }] = useCreateAdminMutation();\n  const [message, setMessage] = useState<string>();\n\n  return (\n    <div>\n      <BackButton />\n      <Edit\n        loading={loading}\n        error={error}\n        onSubmit={async (data) => {\n          setMessage(undefined);\n          const res = await createAdmin({ variables: { data: data } });\n          if (!res.errors) {\n            setMessage(\"admin created\");\n          }\n        }}\n      />\n      <div className=\"text-green-400\">{message}</div>\n    </div>\n  );\n};\n\ntype EditAdminAction = {\n  type: \"name\" | \"email\" | \"password\";\n  payload: string;\n};\n\nfunction editReducer(\n  state: Partial<AdminFragment>,\n  action: EditAdminAction\n): Partial<AdminFragment & { password: string }> {\n  switch (action.type) {\n    case \"name\":\n      return { ...state, name: action.payload };\n    case \"email\":\n      return { ...state, email: action.payload };\n    case \"password\":\n      return { ...state, password: action.payload };\n    default:\n      return state;\n  }\n}\n\nconst Edit = ({\n  admin,\n  onSubmit,\n  error,\n  loading,\n}: {\n  admin?: AdminFragment;\n  error?: ApolloError;\n  loading: boolean;\n  onSubmit: (data: CreateAdminInput) => void;\n}) => {\n  const [data, dispatch] = useReducer(editReducer, admin ?? {});\n\n  return (\n    <div>\n      <div>\n        <Input\n          className=\"mb-4\"\n          id=\"name\"\n          label=\"Name\"\n          value={data.name}\n          onChange={(value) => {\n            dispatch({ type: \"name\", payload: value });\n          }}\n        />\n        <Input\n          className=\"mb-4\"\n          id=\"email\"\n          label=\"email\"\n          value={data.email}\n          onChange={(value) => {\n            dispatch({ type: \"email\", payload: value });\n          }}\n        />\n        <Input\n          className=\"mb-4\"\n          id=\"password\"\n          label=\"Password\"\n          value={data.password ?? \"\"}\n          onChange={(value) => {\n            dispatch({ type: \"password\", payload: value });\n          }}\n        />\n        <div className=\"text-center mt-4\">\n          <button\n            disabled={loading}\n            className={`${\n              loading ? \"bg-gray-400\" : \"bg-purple-400 hover:bg-purple-600\"\n            } p-2 text-white rounded`}\n            onClick={() => {\n              if (!data.name || !data.email)\n                throw new window.Error(\"missing required fields\");\n\n              onSubmit({\n                name: data.name,\n                email: data.email,\n                password: (data.password ?? undefined) as any,\n              });\n            }}\n          >\n            Submit\n          </button>\n          <div className=\"text-red-400 mt-2\">{error?.message}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import {\n  CreateProductInput,\n  ProductFragment,\n  UpdateProductInput,\n} from \"../generated/graphql\";\n\nexport function cleanUpdateProductInput(\n  item: Partial<ProductFragment>\n): UpdateProductInput | CreateProductInput {\n  if (!item.name || !item.overview || !item.status || !item.author) {\n    console.log(item);\n    throw new Error(`missing required fields`);\n  }\n\n  return {\n    id: item.id,\n    name: item.name,\n    overview: item.overview,\n    status: item.status,\n    price: item.price ?? 0,\n    author: { id: item.author.id },\n    categories:\n      item.categories?.map((c) => ({\n        id: c.id,\n      })) ?? [],\n    collections:\n      item.collections?.map((c) => ({\n        id: c.id,\n      })) ?? [],\n    pages: item.pages,\n    language: item.language,\n    publishedAt: item.publishedAt,\n    publisher: item.publisher && { id: item.publisher.id },\n  };\n}\n","import { useRef, useState } from \"react\";\nimport { useHistory, Link, useParams, Redirect } from \"react-router-dom\";\nimport { BackButton } from \"../components/BackButton\";\nimport { Error } from \"../components/Error\";\nimport { Input } from \"../components/Input\";\nimport { ItemList } from \"../components/ItemList\";\nimport { Loading } from \"../components/Loading\";\nimport {\n  AuthorFragment,\n  useAuthorQuery,\n  useAuthorsQuery,\n  useCreateAuthorMutation,\n  useDeleteAuthorMutation,\n  useProductsQuery,\n  useUpdateAuthorMutation,\n  useUpdateProductMutation,\n} from \"../generated/graphql\";\nimport { useQueryParams } from \"../hooks/query\";\nimport { cleanUpdateProductInput } from \"../utils/product\";\n\nexport const AuthorsPage = () => {\n  const search = useQueryParams();\n  const { data, loading, error, refetch, fetchMore } = useAuthorsQuery({\n    variables: { searchQuery: search.get(\"q\") },\n  });\n  const [deleteAuthor] = useDeleteAuthorMutation();\n  const history = useHistory();\n  if (error) {\n    return <div>something went wrong</div>;\n  }\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <div className=\"mb-4\">\n        <Link\n          to=\"/authors/create\"\n          className=\"text-purple-400 hover:bg-purple-200 hover:text-black p-2 rounded\"\n        >\n          {\"+\"} Create\n        </Link>\n      </div>\n      <ItemList\n        name=\"authors\"\n        data={data?.authors}\n        onSearch={(q) => {\n          search.set(\"q\", q);\n          const queries = search.toString();\n          history.push(`/authors?${queries}`);\n          refetch({ searchQuery: search.get(\"q\") });\n        }}\n        onLoadMore={() => {\n          fetchMore({\n            variables: { skip: data?.authors.items.length },\n          });\n        }}\n        searchQuery={search.get(\"q\") ?? \"\"}\n        actionComponent={(item) => (\n          <button\n            className=\"text-red-400\"\n            onClick={async () => {\n              const name = prompt(\"Enter name to delete it\", \"\");\n              if (name === item.name) {\n                await deleteAuthor({ variables: { id: item.id } });\n                refetch();\n              }\n            }}\n          >\n            Remove\n          </button>\n        )}\n      />\n    </div>\n  );\n};\n\nexport const AuthorEditPage = () => {\n  const { authorID } = useParams<{ authorID: string }>();\n  const search = useQueryParams();\n\n  const cat = useAuthorQuery({\n    variables: { id: authorID, searchQuery: search.get(\"cq\") },\n  });\n\n  const prods = useProductsQuery({\n    variables: { searchQuery: search.get(\"pq\") },\n  });\n\n  const [updateProduct] = useUpdateProductMutation();\n\n  const history = useHistory();\n\n  if (cat.error) {\n    return <Error />;\n  }\n\n  return (\n    <div>\n      <BackButton />\n      <div className=\"flex items-start\">\n        {!cat.loading || cat.data?.author ? (\n          <Edit author={cat.data!.author!} />\n        ) : (\n          <Loading />\n        )}\n        <div className=\"bg-yellow-50 rounded-lg ml-4\">\n          <ItemList\n            limitHeight\n            name=\"products\"\n            data={cat.data?.author?.products}\n            onSearch={(q) => {\n              search.set(\"cq\", q);\n              const queries = search.toString();\n              history.push(`/authors/${authorID}/edit?${queries}`);\n              cat.refetch({ searchQuery: search.get(\"cq\") });\n            }}\n            onLoadMore={() => {\n              cat.fetchMore({\n                variables: {\n                  skip: cat.data?.author?.products.items.length,\n                },\n              });\n            }}\n            searchQuery={search.get(\"cq\") ?? \"\"}\n          />\n        </div>\n        <div className=\"bg-yellow-50 rounded-lg ml-4\">\n          <ItemList\n            limitHeight\n            name=\"products\"\n            data={prods.data?.products}\n            onSearch={(q) => {\n              search.set(\"pq\", q);\n              const queries = search.toString();\n              history.push(`/authors/${authorID}/edit?${queries}`);\n              prods.refetch({ searchQuery: search.get(\"pq\") });\n            }}\n            onLoadMore={() => {\n              prods.fetchMore({\n                variables: { skip: prods.data?.products.items.length },\n              });\n            }}\n            searchQuery={search.get(\"pq\") ?? \"\"}\n            highlight={(item) =>\n              !!item.categories.find((c) => c.id === authorID)\n            }\n            actionComponent={(item) => {\n              const isSet = item.author.id === authorID;\n\n              return (\n                <button\n                  className={isSet ? \"text-gray-400\" : \"text-blue-400\"}\n                  onClick={async () => {\n                    if (\n                      !window.confirm(\n                        \"Are you sure you wanna set the author for this product\"\n                      )\n                    ) {\n                      return;\n                    }\n                    await updateProduct({\n                      variables: {\n                        data: {\n                          ...cleanUpdateProductInput({\n                            ...item,\n                            author: { id: authorID },\n                          } as any),\n                          id: item.id,\n                        },\n                      },\n                    });\n                    cat.refetch();\n                    prods.refetch();\n                  }}\n                >\n                  Set\n                </button>\n              );\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const AuthorCreatePage = () => {\n  const [name, setName] = useState(\"\");\n  const [overview, setOverview] = useState(\"\");\n  const [message, setMessage] = useState<string>();\n\n  const [createAuthor, { data, loading, error }] = useCreateAuthorMutation();\n  const [imageFile, setImageFile] = useState<File | null>();\n  const imageURL = useRef<string>();\n\n  if (data?.createAuthor) {\n    return <Redirect to={`/authors/${data!.createAuthor.id}/edit`} />;\n  }\n\n  return (\n    <div>\n      <div className=\"mb-4\">\n        <BackButton />\n      </div>\n      <div>\n        <Input\n          id=\"name\"\n          label=\"Name\"\n          value={name}\n          onChange={(value) => {\n            setName(value);\n          }}\n        />\n        <Input\n          id=\"overview\"\n          label=\"Overview\"\n          value={overview}\n          onChange={(value) => {\n            setOverview(value);\n          }}\n        />\n        <img\n          className=\"object-cover w-28 h-28 mt-4\"\n          src={imageURL.current}\n          alt=\"\"\n        />\n        {imageFile && (\n          <button\n            className=\"text-red-400\"\n            onClick={() => {\n              imageURL.current = undefined;\n              setImageFile(undefined);\n            }}\n          >\n            Remove\n          </button>\n        )}\n        <input\n          id=\"image\"\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={(e) => {\n            const { files } = e.target;\n            const file = files && files[0];\n\n            if (file) {\n              const reader = new FileReader();\n              reader.readAsDataURL(file);\n              reader.onload = function () {\n                imageURL.current = reader.result as any;\n                setImageFile(file);\n              };\n              reader.onerror = function () {\n                imageURL.current = undefined;\n                setImageFile(undefined);\n              };\n            }\n          }}\n        />\n        <div className=\"text-center mt-4\">\n          <button\n            disabled={loading}\n            className={`${\n              loading ? \"bg-gray-400\" : \"bg-purple-400 hover:bg-purple-600\"\n            } p-2 text-white rounded`}\n            onClick={async () => {\n              setMessage(undefined);\n              const res = await createAuthor({\n                variables: {\n                  data: {\n                    name,\n                    overview,\n                  },\n                  imageFile,\n                },\n              });\n              if (!res.errors) {\n                setMessage(\"Author updated\");\n              }\n            }}\n          >\n            Create\n          </button>\n          <Loading loading={loading} />\n          <Error error={!!error} message={error?.message} />\n          <div className=\"text-green-400 mt-2\">{message}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Edit = ({ author }: { author: AuthorFragment }) => {\n  const [name, setName] = useState(author.name);\n  const [message, setMessage] = useState<string>();\n  const [overview, setOverview] = useState(author.overview);\n\n  const [updateAuthor, { loading, error }] = useUpdateAuthorMutation();\n  const [imageFile, setImageFile] = useState<File | null>();\n  const imageURL = useRef<string>();\n\n  return (\n    <div>\n      <div>\n        <Input\n          id=\"name\"\n          label=\"Name\"\n          value={name}\n          onChange={(value) => {\n            setName(value);\n          }}\n        />\n        <Input\n          id=\"name\"\n          label=\"Name\"\n          value={overview}\n          onChange={(value) => {\n            setOverview(value);\n          }}\n        />\n        <img\n          className=\"object-cover w-28 h-28 mt-4\"\n          src={imageURL.current ?? author.image}\n          alt=\"\"\n        />\n        {imageFile && (\n          <button\n            className=\"text-red-400\"\n            onClick={() => {\n              imageURL.current = undefined;\n              setImageFile(undefined);\n            }}\n          >\n            Remove\n          </button>\n        )}\n        <input\n          id=\"image\"\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={(e) => {\n            const { files } = e.target;\n            const file = files && files[0];\n\n            if (file) {\n              const reader = new FileReader();\n              reader.readAsDataURL(file);\n              reader.onload = function () {\n                imageURL.current = reader.result as any;\n                setImageFile(file);\n              };\n              reader.onerror = function () {\n                imageURL.current = undefined;\n                setImageFile(undefined);\n              };\n            }\n          }}\n        />\n        <div className=\"text-center mt-4\">\n          <button\n            disabled={loading}\n            className={`${\n              loading ? \"bg-gray-400\" : \"bg-purple-400 hover:bg-purple-600\"\n            } p-2 text-white rounded`}\n            onClick={async () => {\n              setMessage(undefined);\n              const res = await updateAuthor({\n                variables: {\n                  data: {\n                    id: author.id,\n                    overview,\n                    name,\n                  },\n                },\n              });\n              if (!res.errors) {\n                setMessage(\"Author updated\");\n              }\n            }}\n          >\n            Update\n          </button>\n          <div className=\"text-red-400 mt-2\">{error?.message}</div>\n          <div className=\"text-green-400 mt-2\">{message}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useState } from \"react\";\nimport { Link, Redirect, useHistory, useParams } from \"react-router-dom\";\nimport { BackButton } from \"../components/BackButton\";\nimport { Error } from \"../components/Error\";\nimport { Input } from \"../components/Input\";\nimport { ItemList } from \"../components/ItemList\";\nimport { Loading } from \"../components/Loading\";\nimport {\n  CategoryFragment,\n  useCategoriesQuery,\n  useCategoryQuery,\n  useCreateCategoryMutation,\n  useDeleteCategoryMutation,\n  useProductsQuery,\n  useUpdateCategoryMutation,\n  useUpdateProductMutation,\n} from \"../generated/graphql\";\nimport { useQueryParams } from \"../hooks/query\";\nimport { cleanUpdateProductInput } from \"../utils/product\";\n\nexport const CategoriesPage = () => {\n  const search = useQueryParams();\n  const history = useHistory();\n\n  const { data, error, fetchMore, refetch } = useCategoriesQuery({\n    variables: {\n      searchQuery: search.get(\"q\"),\n    },\n  });\n  const [deleteCategory] = useDeleteCategoryMutation();\n\n  if (error) {\n    return <div>Something went wrong</div>;\n  }\n\n  return (\n    <div>\n      <div className=\"mb-4\">\n        <Link\n          to=\"/categories/create\"\n          className=\"text-purple-400 hover:bg-purple-200 hover:text-black p-2 rounded\"\n        >\n          {\"+\"} Create\n        </Link>\n      </div>\n      <ItemList\n        name=\"categories\"\n        data={data?.categories}\n        onSearch={(q) => {\n          search.set(\"q\", q);\n          const queries = search.toString();\n          history.push(`/categories?${queries}`);\n          refetch({ searchQuery: search.get(\"q\") });\n        }}\n        onLoadMore={() => {\n          fetchMore({\n            variables: { skip: data?.categories.items.length },\n          });\n        }}\n        searchQuery={search.get(\"q\") ?? \"\"}\n        actionComponent={(item) => (\n          <button\n            className=\"text-red-400\"\n            onClick={async () => {\n              const name = prompt(\"Enter name to delete it\", \"\");\n              if (name === item.name) {\n                await deleteCategory({ variables: { id: item.id } });\n                refetch();\n              }\n            }}\n          >\n            Remove\n          </button>\n        )}\n      />\n    </div>\n  );\n};\n\nexport const CategoryEditPage = () => {\n  const { categoryID } = useParams<{ categoryID: string }>();\n  const search = useQueryParams();\n\n  const cat = useCategoryQuery({\n    variables: { id: categoryID, searchQuery: search.get(\"cq\") },\n  });\n\n  const prods = useProductsQuery({\n    variables: { searchQuery: search.get(\"pq\") },\n  });\n\n  const [updateProduct] = useUpdateProductMutation();\n\n  const history = useHistory();\n\n  if (cat.error) {\n    return <Error />;\n  }\n\n  return (\n    <div>\n      <BackButton />\n      <div className=\"flex items-start\">\n        {!cat.loading || cat.data?.category ? (\n          <Edit category={cat.data!.category!} />\n        ) : (\n          <Loading />\n        )}\n        <div className=\"bg-yellow-50 rounded-lg ml-4\">\n          <ItemList\n            limitHeight\n            name=\"products\"\n            data={cat.data?.category?.products}\n            onSearch={(q) => {\n              search.set(\"cq\", q);\n              const queries = search.toString();\n              history.push(`/categories/${categoryID}/edit?${queries}`);\n              cat.refetch({ searchQuery: search.get(\"cq\") });\n            }}\n            onLoadMore={() => {\n              cat.fetchMore({\n                variables: { skip: cat.data?.category?.products.items.length },\n              });\n            }}\n            searchQuery={search.get(\"cq\") ?? \"\"}\n            actionComponent={(item) => (\n              <button\n                className=\"text-red-400\"\n                onClick={async () => {\n                  if (!window.confirm(\"Are you sure?\")) return;\n                  await updateProduct({\n                    variables: {\n                      data: {\n                        id: item.id,\n                        ...cleanUpdateProductInput(item),\n                        categories: [\n                          ...item.categories\n                            .filter((c) => c.id !== categoryID)\n                            .map((c) => ({ id: c.id })),\n                        ],\n                      },\n                    },\n                  });\n                  cat.refetch();\n                  prods.refetch();\n                }}\n              >\n                Remove\n              </button>\n            )}\n          />\n        </div>\n        <div className=\"bg-yellow-50 rounded-lg ml-4\">\n          <ItemList\n            limitHeight\n            name=\"products\"\n            data={prods.data?.products}\n            onSearch={(q) => {\n              search.set(\"pq\", q);\n              const queries = search.toString();\n              history.push(`/categories/${categoryID}/edit?${queries}`);\n              prods.refetch({ searchQuery: search.get(\"pq\") });\n            }}\n            onLoadMore={() => {\n              prods.fetchMore({\n                variables: { skip: prods.data?.products.items.length },\n              });\n            }}\n            searchQuery={search.get(\"pq\") ?? \"\"}\n            highlight={(item) =>\n              !!item.categories.find((c) => c.id === categoryID)\n            }\n            actionComponent={(item) => {\n              const remove = item.categories.find((c) => c.id === categoryID);\n\n              const categories = remove\n                ? [\n                    ...item.categories\n                      .filter((c) => c.id !== categoryID)\n                      .map((c) => ({ id: c.id })),\n                  ]\n                : [\n                    ...item.categories.map((c) => ({ id: c.id })),\n                    { id: categoryID },\n                  ];\n\n              return (\n                <button\n                  className={remove ? \"text-red-400\" : \"text-blue-400\"}\n                  onClick={async () => {\n                    if (!window.confirm(\"Are you sure?\")) return;\n                    await updateProduct({\n                      variables: {\n                        data: {\n                          ...cleanUpdateProductInput({\n                            ...item,\n                            categories,\n                          } as any),\n                          id: item.id,\n                        },\n                      },\n                    });\n                    cat.refetch();\n                    prods.refetch();\n                  }}\n                >\n                  {remove ? \"Remove\" : \"Add\"}\n                </button>\n              );\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const CategoryCreatePage = () => {\n  const [name, setName] = useState(\"\");\n\n  const [createCategory, { data, loading, error }] =\n    useCreateCategoryMutation();\n\n  if (data?.createCategory) {\n    return <Redirect to={`/categories/${data!.createCategory.id}/edit`} />;\n  }\n\n  return (\n    <div>\n      <div className=\"mb-4\">\n        <BackButton />\n      </div>\n      <div>\n        <Input\n          id=\"name\"\n          label=\"Name\"\n          value={name}\n          onChange={(value) => {\n            setName(value);\n          }}\n        />\n        <div className=\"text-center mt-4\">\n          <button\n            disabled={loading}\n            className={`${\n              loading ? \"bg-gray-400\" : \"bg-purple-400 hover:bg-purple-600\"\n            } p-2 text-white rounded`}\n            onClick={() => {\n              createCategory({\n                variables: {\n                  data: {\n                    name,\n                  },\n                },\n              });\n            }}\n          >\n            Create\n          </button>\n          <Loading loading={loading} />\n          <Error error={!!error} message={error?.message} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Edit = ({ category }: { category: CategoryFragment }) => {\n  const [name, setName] = useState(category.name);\n  const [message, setMessage] = useState<string>();\n\n  const [updateCategory, { loading, error }] = useUpdateCategoryMutation();\n\n  return (\n    <div>\n      <div>\n        <Input\n          id=\"name\"\n          label=\"Name\"\n          value={name}\n          onChange={(value) => {\n            setName(value);\n          }}\n        />\n        <div className=\"text-center mt-4\">\n          <button\n            disabled={loading}\n            className={`${\n              loading ? \"bg-gray-400\" : \"bg-purple-400 hover:bg-purple-600\"\n            } p-2 text-white rounded`}\n            onClick={async () => {\n              setMessage(undefined);\n              const res = await updateCategory({\n                variables: {\n                  data: {\n                    id: category.id,\n                    name,\n                  },\n                },\n              });\n              if (!res.errors) {\n                setMessage(\"Author updated\");\n              }\n            }}\n          >\n            Update\n          </button>\n          <div className=\"text-red-400 mt-2\">{error?.message}</div>\n          <div className=\"text-green-400 mt-2\">{message}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useRef, useState } from \"react\";\nimport { useHistory, Link, useParams, Redirect } from \"react-router-dom\";\nimport { BackButton } from \"../components/BackButton\";\nimport { Error } from \"../components/Error\";\nimport { Input } from \"../components/Input\";\nimport { ItemList } from \"../components/ItemList\";\nimport { Loading } from \"../components/Loading\";\nimport {\n  CollectionFragment,\n  useCollectionQuery,\n  useCollectionsQuery,\n  useCreateCollectionMutation,\n  useDeleteCollectionMutation,\n  useProductsQuery,\n  useUpdateCollectionMutation,\n  useUpdateProductMutation,\n} from \"../generated/graphql\";\nimport { useQueryParams } from \"../hooks/query\";\nimport { cleanUpdateProductInput } from \"../utils/product\";\n\nexport const CollectionsPage = () => {\n  const search = useQueryParams();\n  const { data, loading, error, refetch, fetchMore } = useCollectionsQuery({\n    variables: { searchQuery: search.get(\"q\") },\n  });\n  const [deleteCollection] = useDeleteCollectionMutation();\n\n  const history = useHistory();\n  if (error) {\n    return <div>something went wrong</div>;\n  }\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <div className=\"mb-4\">\n        <Link\n          to=\"/collections/create\"\n          className=\"text-purple-400 hover:bg-purple-200 hover:text-black p-2 rounded\"\n        >\n          {\"+\"} Create\n        </Link>\n      </div>\n      <ItemList\n        name=\"collections\"\n        data={data?.collections}\n        onSearch={(q) => {\n          search.set(\"q\", q);\n          const queries = search.toString();\n          history.push(`/collections?${queries}`);\n          refetch({ searchQuery: search.get(\"q\") });\n        }}\n        onLoadMore={() => {\n          fetchMore({\n            variables: { skip: data?.collections.items.length },\n          });\n        }}\n        searchQuery={search.get(\"q\") ?? \"\"}\n        actionComponent={(item) => (\n          <button\n            className=\"text-red-400\"\n            onClick={async () => {\n              const name = prompt(\"Enter name to delete it\", \"\");\n              if (name === item.name) {\n                await deleteCollection({ variables: { id: item.id } });\n                refetch();\n              }\n            }}\n          >\n            Remove\n          </button>\n        )}\n      />\n    </div>\n  );\n};\n\nexport const CollectionEditPage = () => {\n  const { collectionID } = useParams<{ collectionID: string }>();\n  const search = useQueryParams();\n\n  const cat = useCollectionQuery({\n    variables: { id: collectionID, searchQuery: search.get(\"cq\") },\n  });\n\n  const prods = useProductsQuery({\n    variables: { searchQuery: search.get(\"pq\") },\n  });\n\n  const [updateProduct] = useUpdateProductMutation();\n\n  const history = useHistory();\n\n  if (cat.error) {\n    return <Error />;\n  }\n\n  return (\n    <div>\n      <BackButton />\n      <div className=\"flex items-start\">\n        {!cat.loading || cat.data?.collection ? (\n          <Edit collection={cat.data!.collection!} />\n        ) : (\n          <Loading />\n        )}\n        <div className=\"bg-yellow-50 rounded-lg ml-4\">\n          <ItemList\n            limitHeight\n            name=\"products\"\n            data={cat.data?.collection?.products}\n            onSearch={(q) => {\n              search.set(\"cq\", q);\n              const queries = search.toString();\n              history.push(`/collections/${collectionID}/edit?${queries}`);\n              cat.refetch({ searchQuery: search.get(\"cq\") });\n            }}\n            onLoadMore={() => {\n              cat.fetchMore({\n                variables: {\n                  skip: cat.data?.collection?.products.items.length,\n                },\n              });\n            }}\n            searchQuery={search.get(\"cq\") ?? \"\"}\n            actionComponent={(item) => (\n              <button\n                className=\"text-red-400\"\n                onClick={async () => {\n                  if (!window.confirm(\"Are you sure?\")) return;\n                  await updateProduct({\n                    variables: {\n                      data: {\n                        id: item.id,\n                        ...cleanUpdateProductInput(item),\n                        collections: [\n                          ...item.collections\n                            .filter((c) => c.id !== collectionID)\n                            .map((c) => ({ id: c.id })),\n                        ],\n                      },\n                    },\n                  });\n                  cat.refetch();\n                  prods.refetch();\n                }}\n              >\n                Remove\n              </button>\n            )}\n          />\n        </div>\n        <div className=\"bg-yellow-50 rounded-lg ml-4\">\n          <ItemList\n            limitHeight\n            name=\"products\"\n            data={prods.data?.products}\n            onSearch={(q) => {\n              search.set(\"pq\", q);\n              const queries = search.toString();\n              history.push(`/collections/${collectionID}/edit?${queries}`);\n              prods.refetch({ searchQuery: search.get(\"pq\") });\n            }}\n            onLoadMore={() => {\n              prods.fetchMore({\n                variables: { skip: prods.data?.products.items.length },\n              });\n            }}\n            searchQuery={search.get(\"pq\") ?? \"\"}\n            highlight={(item) =>\n              !!item.collections.find((c) => c.id === collectionID)\n            }\n            actionComponent={(item) => {\n              const remove = item.collections.find(\n                (c) => c.id === collectionID\n              );\n\n              const collections = remove\n                ? [\n                    ...item.collections\n                      .filter((c) => c.id !== collectionID)\n                      .map((c) => ({ id: c.id })),\n                  ]\n                : [\n                    ...item.collections.map((c) => ({ id: c.id })),\n                    { id: collectionID },\n                  ];\n\n              return (\n                <button\n                  className={remove ? \"text-red-400\" : \"text-blue-400\"}\n                  onClick={async () => {\n                    if (!window.confirm(\"Are you sure?\")) return;\n                    await updateProduct({\n                      variables: {\n                        data: {\n                          ...cleanUpdateProductInput({\n                            ...item,\n                            collections,\n                          } as any),\n                          id: item.id,\n                        },\n                      },\n                    });\n                    cat.refetch();\n                    prods.refetch();\n                  }}\n                >\n                  {remove ? \"Remove\" : \"Add\"}\n                </button>\n              );\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const CollectionCreatePage = () => {\n  const [name, setName] = useState(\"\");\n\n  const [createCollection, { data, loading, error }] =\n    useCreateCollectionMutation();\n  const [imageFile, setImageFile] = useState<File | null>();\n  const imageURL = useRef<string>();\n\n  if (data?.createCollection) {\n    return <Redirect to={`/collections/${data!.createCollection.id}/edit`} />;\n  }\n\n  return (\n    <div>\n      <div className=\"mb-4\">\n        <BackButton />\n      </div>\n      <div>\n        <Input\n          id=\"name\"\n          label=\"Name\"\n          value={name}\n          onChange={(value) => {\n            setName(value);\n          }}\n        />\n        <img\n          className=\"object-cover w-28 h-28 mt-4\"\n          src={imageURL.current}\n          alt=\"\"\n        />\n        {imageFile && (\n          <button\n            className=\"text-red-400\"\n            onClick={() => {\n              imageURL.current = undefined;\n              setImageFile(undefined);\n            }}\n          >\n            Remove\n          </button>\n        )}\n        <input\n          id=\"image\"\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={(e) => {\n            const { files } = e.target;\n            const file = files && files[0];\n\n            if (file) {\n              const reader = new FileReader();\n              reader.readAsDataURL(file);\n              reader.onload = function () {\n                imageURL.current = reader.result as any;\n                setImageFile(file);\n              };\n              reader.onerror = function () {\n                imageURL.current = undefined;\n                setImageFile(undefined);\n              };\n            }\n          }}\n        />\n        <div className=\"text-center mt-4\">\n          <button\n            disabled={loading}\n            className={`${\n              loading ? \"bg-gray-400\" : \"bg-purple-400 hover:bg-purple-600\"\n            } p-2 text-white rounded`}\n            onClick={async (e) => {\n              e.preventDefault();\n              await createCollection({\n                variables: {\n                  data: {\n                    name,\n                  },\n                  imageFile,\n                },\n              });\n            }}\n          >\n            Create\n          </button>\n          <Loading loading={loading} />\n          <Error error={!!error} message={error?.message} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Edit = ({ collection }: { collection: CollectionFragment }) => {\n  const [name, setName] = useState(collection.name);\n\n  const [updateCollection, { loading, error }] = useUpdateCollectionMutation();\n  const [imageFile, setImageFile] = useState<File | null>();\n  const imageURL = useRef<string>();\n\n  return (\n    <div>\n      <div>\n        <Input\n          id=\"name\"\n          label=\"Name\"\n          value={name}\n          onChange={(value) => {\n            setName(value);\n          }}\n        />\n        <img\n          className=\"object-cover w-28 h-28 mt-4\"\n          src={imageURL.current ?? collection.image}\n          alt=\"\"\n        />\n        {imageFile && (\n          <button\n            className=\"text-red-400\"\n            onClick={() => {\n              imageURL.current = undefined;\n              setImageFile(undefined);\n            }}\n          >\n            Remove\n          </button>\n        )}\n        <input\n          id=\"image\"\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={(e) => {\n            const { files } = e.target;\n            const file = files && files[0];\n\n            if (file) {\n              const reader = new FileReader();\n              reader.readAsDataURL(file);\n              reader.onload = function () {\n                imageURL.current = reader.result as any;\n                setImageFile(file);\n              };\n              reader.onerror = function () {\n                imageURL.current = undefined;\n                setImageFile(undefined);\n              };\n            }\n          }}\n        />\n        <div className=\"text-center mt-4\">\n          <button\n            disabled={loading}\n            className={`${\n              loading ? \"bg-gray-400\" : \"bg-purple-400 hover:bg-purple-600\"\n            } p-2 text-white rounded`}\n            onClick={(e) => {\n              e.preventDefault();\n              updateCollection({\n                variables: {\n                  data: {\n                    id: collection.id,\n                    name,\n                  },\n                },\n              });\n            }}\n          >\n            Update\n          </button>\n          <div className=\"text-red-400 mt-2\">{error?.message}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { history } from \"../AppRouter\";\n\nexport function logout() {\n  localStorage.removeItem(\"token\");\n  history.replace(\"/login\");\n}\n","import { useEffect } from \"react\";\nimport { logout } from \"../utils/logout\";\n\nexport const LogoutPage = () => {\n  useEffect(() => {\n    logout();\n  }, []);\n\n  return null;\n};\n","export const Select = ({\n  className,\n  id,\n  label,\n  items,\n  value,\n  onChange,\n}: {\n  id: string;\n  items: string[];\n  className?: string;\n  label: string;\n  value?: number;\n  onChange: (index: number) => void;\n}) => {\n  return (\n    <div className={`flex items-center justify-between ${className ?? \"\"}`}>\n      <label htmlFor={id}>{label}</label>\n      <select\n        className=\"ml-4 bg-purple-50 p-2 rounded-lg\"\n        name={id}\n        id={id}\n        value={value}\n        onChange={(e) => onChange(e.target.selectedIndex)}\n      >\n        {items.map((item, index) => (\n          <option key={index} value={index}>\n            {item}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n};\n","import dayjs from \"dayjs\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { BackButton } from \"../components/BackButton\";\nimport { Error } from \"../components/Error\";\nimport { Loading } from \"../components/Loading\";\nimport { Select } from \"../components/Select\";\nimport {\n  OrderBy,\n  OrderFragment,\n  OrderStatus,\n  useOrderQuery,\n  useOrdersQuery,\n  useUpdateOrderMutation,\n} from \"../generated/graphql\";\n\nfunction getStatusColor(status: OrderStatus) {\n  return status === OrderStatus.Pending\n    ? \"bg-yellow-200\"\n    : status === OrderStatus.Canceled\n    ? \"bg-gray-200\"\n    : status === OrderStatus.Failed\n    ? \"bg-red-200\"\n    : status === OrderStatus.Delivered\n    ? \"bg-green-200\"\n    : status === OrderStatus.Delivering\n    ? \"bg-blue-200\"\n    : \"bg-purple-200\";\n}\n\nexport const OrdersPage = () => {\n  const { data, error, loading, refetch, fetchMore } = useOrdersQuery({\n    variables: { order: [{ field: \"createdAt\", order: OrderBy.Desc }] },\n  });\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      const take = data?.orders.items.length || 0;\n\n      refetch({\n        take,\n      });\n    }, 2_000);\n\n    return () => clearInterval(intervalId);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data?.orders.items.length]);\n\n  return (\n    <div>\n      <h1>All Orders</h1>\n      <div className=\"flex mb-4 mt-2 rounded-lg\">\n        {Object.keys(OrderStatus).map((s) => (\n          <div className={`h-1 w-12 ${getStatusColor(s as OrderStatus)}`} />\n        ))}\n      </div>\n      {data?.orders.items.map((o) => (\n        <OrderItem order={o} />\n      ))}\n      {data?.orders.hasMore ? (\n        <div className=\"text-center mt-2\">\n          <button\n            className=\"text-purple-400 hover:bg-purple-200 hover:text-black p-2 rounded\"\n            onClick={() => {\n              fetchMore({ variables: { skip: data.orders.items.length } });\n            }}\n          >\n            Load more\n          </button>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nconst OrderItem = ({ order }: { order: OrderFragment }) => {\n  const [currentStatus, setCurrentStatus] = useState(order.status);\n  const [updateOrder, { loading, error }] = useUpdateOrderMutation();\n  const [status, setStatus] = useState(order.status);\n  const orderStatuses = Object.keys(OrderStatus);\n\n  useEffect(() => {\n    setCurrentStatus(order.status);\n    setStatus(order.status);\n  }, [order.id, order.status]);\n\n  return (\n    <div className=\"flex items-center justify-between\">\n      <div\n        className={`flex-1 p-2 rounded-lg mb-4 ${getStatusColor(status)} mr-4`}\n      >\n        <Link to={`/orders/${order.id}/edit`} className=\"text-blue-600\">\n          #{order.orderNumber}\n        </Link>\n        <div>User: {order.user.name}</div>\n        <div>Province: {order.province ?? order.user.province}</div>\n        <div>Address: {order.address ?? order.user.address}</div>\n        <div>Phone: {order.phone ?? order.user.phone}</div>\n        <div className=\"flex items-center mb-4 overflow-hidden\">\n          <Select\n            id=\"status\"\n            label=\"Status\"\n            items={orderStatuses}\n            value={status ? orderStatuses.indexOf(status) : undefined}\n            onChange={(index) => {\n              setStatus(orderStatuses[index] as OrderStatus);\n            }}\n          />\n          <button\n            disabled={loading || currentStatus === status}\n            className={`${\n              loading\n                ? \"bg-gray-400\"\n                : currentStatus !== status\n                ? \"bg-purple-400 hover:bg-purple-600\"\n                : \"bg-gray-600\"\n            } p-2 text-white rounded-lg ml-4`}\n            onClick={async () => {\n              const res = await updateOrder({\n                variables: {\n                  data: {\n                    id: order.id,\n                    status,\n                  },\n                },\n              });\n              if (!res.errors) {\n                setCurrentStatus(status);\n              }\n            }}\n          >\n            Update\n          </button>\n        </div>\n      </div>\n      <Link\n        className=\"text-purple-400 hover:text-red-400\"\n        to={`/orders/${order.id}/edit`}\n      >\n        Details -&gt;\n      </Link>\n    </div>\n  );\n};\n\nexport const OrderEditPage = () => {\n  const { orderID } = useParams<{ orderID: string }>();\n  const { loading, data, error } = useOrderQuery({\n    variables: { id: orderID },\n  });\n\n  return (\n    <div>\n      <BackButton />\n      {data?.order && (\n        <>\n          <Edit order={data!.order!} />\n          <Link to={`/orders/${orderID}/edit`} className=\"text-blue-600 mt-4\">\n            Order #{data.order.orderNumber}\n          </Link>\n          <div className=\"mt-2\">User: {data.order.user.name}</div>\n          <div>Phone: {data.order.phone || data.order.user.phone}</div>\n          <div>Province: {data.order.province || data.order.user.province}</div>\n          <div>Address: {data.order.address || data.order.user.address}</div>\n          <div>\n            Ordered on:{\" \"}\n            <b>\n              {dayjs(data.order.createdAt).format(\"dddd YYYY-MM-DD HH:mma\")}\n            </b>{\" \"}\n            {dayjs(data.order.createdAt).fromNow()}\n          </div>\n          <h1 className=\"mt-4\">Purchases</h1>\n          <div className=\"h-1 bg-yellow-200 rounded-lg mt-2 mb-4\" />\n          <div>\n            {data.order.purchases.items.map((p) => (\n              <div className=\"flex justify-between flex-1 p-2 rounded-lg mb-4 bg-purple-100 mr-4\">\n                <div>\n                  <div>Product: {p.product.name}</div>\n                  <div>Quantity: {p.quantity}</div>\n                  <div>piece price: {p.product.price}</div>\n                  <div>\n                    Total price: <b>{p.product.price * p.quantity}</b>\n                  </div>\n                </div>\n                <div>\n                  <img\n                    className=\"ml-4 object-cover w-28 h-40 rounded-lg bg-yellow-100\"\n                    src={p.product.image}\n                    alt=\"\"\n                  />\n                </div>\n              </div>\n            ))}\n            <div>\n              Total:{\" \"}\n              <b>\n                {data.order.purchases.items.reduce(\n                  (acc, n) => n.product.price * n.quantity + acc,\n                  0\n                )}\n              </b>{\" \"}\n              IQD\n            </div>\n          </div>\n        </>\n      )}\n      <Loading loading={loading} />\n      <Error error={!!error} message={error?.message} />\n    </div>\n  );\n};\n\nconst Edit = ({ order }: { order: OrderFragment }) => {\n  const [status, setStatus] = useState(order.status);\n  const [message, setMessage] = useState<string>();\n\n  const [updateOrder, { loading, error }] = useUpdateOrderMutation();\n  const orderStatuses = Object.keys(OrderStatus);\n\n  return (\n    <div>\n      <div>\n        <div className=\"text-center mt-4\">\n          <Select\n            id=\"status\"\n            className={`mb-4 ${getStatusColor(status)} rounded-lg pl-2`}\n            label=\"Status\"\n            items={orderStatuses}\n            value={status ? orderStatuses.indexOf(status) : undefined}\n            onChange={(index) => {\n              setStatus(orderStatuses[index] as OrderStatus);\n            }}\n          />\n          <button\n            disabled={loading}\n            className={`${\n              loading ? \"bg-gray-400\" : \"bg-purple-400 hover:bg-purple-600\"\n            } p-2 text-white rounded`}\n            onClick={async () => {\n              setMessage(undefined);\n              const res = await updateOrder({\n                variables: {\n                  data: {\n                    id: order.id,\n                    status,\n                  },\n                },\n              });\n              if (!res.errors) {\n                setMessage(\"Order updated\");\n              }\n            }}\n          >\n            Update\n          </button>\n          <div className=\"text-red-400 mt-2\">{error?.message}</div>\n          <div className=\"text-green-400 mt-2\">{message}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { ApolloError } from \"@apollo/client\";\nimport dayjs from \"dayjs\";\nimport { useReducer, useRef, useState } from \"react\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\nimport { history } from \"../AppRouter\";\nimport { BackButton } from \"../components/BackButton\";\nimport { Error } from \"../components/Error\";\nimport { Input } from \"../components/Input\";\nimport { ItemList } from \"../components/ItemList\";\nimport { Loading } from \"../components/Loading\";\nimport { Select } from \"../components/Select\";\nimport {\n  AuthorFragment,\n  CategoryFragment,\n  CollectionFragment,\n  CreateProductInput,\n  ProductFragment,\n  ProductStatus,\n  PublisherFragment,\n  UpdateProductInput,\n  useAuthorsQuery,\n  useCategoriesQuery,\n  useCollectionsQuery,\n  useCreateProductMutation,\n  useDeleteProductMutation,\n  useProductQuery,\n  useProductsQuery,\n  usePublishersQuery,\n  useUpdateProductMutation,\n} from \"../generated/graphql\";\nimport { useQueryParams } from \"../hooks/query\";\nimport { cleanUpdateProductInput } from \"../utils/product\";\n\nexport function ProductsPage() {\n  const search = useQueryParams();\n  const { data, error, fetchMore, refetch } = useProductsQuery({\n    variables: { searchQuery: search.get(\"q\") },\n  });\n  const [deleteProduct] = useDeleteProductMutation();\n\n  if (error) {\n    return <div>Something went wrong</div>;\n  }\n\n  return (\n    <div>\n      <div className=\"mb-4\">\n        <Link\n          to=\"/products/create\"\n          className=\"text-purple-400 hover:bg-purple-200 hover:text-black p-2 rounded\"\n        >\n          {\"+\"} Create\n        </Link>\n      </div>\n      <ItemList\n        name=\"products\"\n        data={data?.products}\n        onSearch={(q) => {\n          search.set(\"q\", q);\n          const queries = search.toString();\n          history.push(`/products?${queries}`);\n          refetch({ searchQuery: search.get(\"q\") });\n        }}\n        onLoadMore={() => {\n          fetchMore({\n            variables: { skip: data?.products.items.length },\n          });\n        }}\n        searchQuery={search.get(\"q\") ?? \"\"}\n        actionComponent={(item) => (\n          <button\n            className=\"text-red-400\"\n            onClick={async () => {\n              const productName = prompt(\"Enter product name to delete it\", \"\");\n              if (productName === item.name) {\n                await deleteProduct({ variables: { id: item.id } });\n                refetch();\n              }\n            }}\n          >\n            Remove\n          </button>\n        )}\n      />\n    </div>\n  );\n}\n\nexport function ProductEditPage() {\n  const match = useRouteMatch<{ productID: string }>();\n  const { productID } = match!.params;\n  const { data, loading, error } = useProductQuery({\n    variables: { id: productID },\n  });\n  const [updateProduct, update] = useUpdateProductMutation();\n\n  if (error) {\n    return <Error />;\n  }\n  if (loading) {\n    return <Loading />;\n  }\n\n  return (\n    <div>\n      <BackButton />\n      <EditPage\n        product={data!.product!}\n        loading={update.loading}\n        error={update.error}\n        onSubmit={(data, imageFile) => {\n          updateProduct({\n            variables: {\n              data: { ...data, id: productID },\n              imageFile,\n            },\n          });\n        }}\n      />\n    </div>\n  );\n}\n\nexport function ProductCreatePage() {\n  const [createProduct, update] = useCreateProductMutation();\n\n  return (\n    <div>\n      <BackButton />\n      <EditPage\n        loading={update.loading}\n        error={update.error}\n        onSubmit={(data, imageFile) => {\n          createProduct({\n            variables: {\n              data,\n              imageFile,\n            },\n          });\n        }}\n      />\n    </div>\n  );\n}\n\ntype EditProductAction =\n  | {\n      type: \"name\" | \"overview\" | \"image\";\n      payload: string;\n    }\n  | { type: \"language\"; payload: \"ar\" | \"en\" }\n  | { type: \"status\"; payload: ProductStatus }\n  | { type: \"pages\"; payload?: number | null }\n  | { type: \"price\"; payload: number }\n  | { type: \"author\"; payload: AuthorFragment }\n  | { type: \"publisher\"; payload: PublisherFragment }\n  | { type: \"publishedAt\"; payload: Date }\n  | { type: \"addCategory\" | \"removeCategory\"; payload: CategoryFragment }\n  | { type: \"addCollection\" | \"removeCollection\"; payload: CollectionFragment };\n\nfunction editReducer(\n  state: Partial<ProductFragment>,\n  action: EditProductAction\n): Partial<ProductFragment> {\n  switch (action.type) {\n    case \"name\":\n      return { ...state, name: action.payload };\n    case \"overview\":\n      return { ...state, overview: action.payload };\n    case \"image\":\n      return { ...state, image: action.payload };\n    case \"language\":\n      return { ...state, language: action.payload };\n    case \"status\":\n      return { ...state, status: action.payload };\n    case \"pages\":\n      return { ...state, pages: action.payload };\n    case \"price\":\n      return { ...state, price: action.payload };\n    case \"publishedAt\":\n      return { ...state, publishedAt: action.payload };\n    case \"removeCategory\":\n      return {\n        ...state,\n        categories: state?.categories?.filter(\n          (c) => c.id !== action.payload.id\n        ),\n      };\n    case \"addCategory\":\n      return {\n        ...state,\n        categories: [...(state?.categories ?? []), action.payload],\n      };\n    case \"removeCollection\":\n      return {\n        ...state,\n        collections: state?.collections?.filter(\n          (c) => c.id !== action.payload.id\n        ),\n      };\n    case \"addCollection\":\n      return {\n        ...state,\n        collections: [...(state?.collections ?? []), action.payload],\n      };\n    case \"author\":\n      return {\n        ...state,\n        author: action.payload,\n      };\n    case \"publisher\":\n      return {\n        ...state,\n        publisher: action.payload,\n      };\n\n    default:\n      return state;\n  }\n}\n\nconst EditPage = ({\n  product,\n  onSubmit,\n  loading,\n  error,\n}: {\n  loading: boolean;\n  error?: ApolloError;\n  product?: ProductFragment;\n  onSubmit: (\n    product: UpdateProductInput | CreateProductInput,\n    imageFile?: File | null\n  ) => void;\n}) => {\n  const [data, dispatch] = useReducer(editReducer, product ?? {});\n\n  const [imageFile, setImageFile] = useState<File | null>();\n  const imageURL = useRef<string>();\n\n  const productStatuses = Object.keys(ProductStatus);\n  const langs = [\"ar\", \"en\"];\n\n  const search = useQueryParams();\n  const cats = useCategoriesQuery({\n    variables: {\n      searchQuery: search.get(\"catq\"),\n    },\n  });\n\n  const cols = useCollectionsQuery({\n    variables: {\n      searchQuery: search.get(\"colq\"),\n    },\n  });\n\n  const auths = useAuthorsQuery({\n    variables: {\n      searchQuery: search.get(\"autq\"),\n    },\n  });\n\n  const pubs = usePublishersQuery({\n    variables: {\n      searchQuery: search.get(\"pubq\"),\n    },\n  });\n\n  return (\n    <div className=\"flex\">\n      <div className=\"flex flex-col\">\n        <Input\n          id=\"name\"\n          label=\"Name\"\n          value={data.name}\n          onChange={(value) => {\n            dispatch({ type: \"name\", payload: value });\n          }}\n        />\n        <Input\n          id=\"overview\"\n          className=\"mt-4\"\n          label=\"Overview\"\n          multiline\n          value={data.overview}\n          onChange={(value) => {\n            dispatch({ type: \"overview\", payload: value });\n          }}\n        />\n        <Input\n          id=\"price\"\n          className=\"mt-4\"\n          label=\"Price\"\n          value={data.price?.toString()}\n          onChange={(value) => {\n            const n = parseInt(value);\n            dispatch({ type: \"price\", payload: isNaN(n) ? 0 : n });\n          }}\n        />\n        <Input\n          id=\"pages\"\n          className=\"mt-4\"\n          label=\"Pages\"\n          value={data.pages?.toString()}\n          onChange={(value) => {\n            const n = parseInt(value);\n            dispatch({ type: \"pages\", payload: isNaN(n) ? null : n });\n          }}\n        />\n        <Select\n          id=\"status\"\n          className=\"mt-4\"\n          label=\"Status\"\n          items={productStatuses}\n          value={data.status ? productStatuses.indexOf(data.status) : undefined}\n          onChange={(index) => {\n            dispatch({\n              type: \"status\",\n              payload: productStatuses[index] as ProductStatus,\n            });\n          }}\n        />\n        <Select\n          id=\"status\"\n          className=\"mt-4\"\n          label=\"Language\"\n          items={langs}\n          value={data.language ? langs.indexOf(data.language) : undefined}\n          onChange={(index) => {\n            dispatch({\n              type: \"language\",\n              payload: langs[index] as any,\n            });\n          }}\n        />\n        <img\n          className=\"object-cover w-28 h-28 mt-4\"\n          src={imageURL.current ?? data.image}\n          alt=\"\"\n        />\n        <input\n          id=\"image\"\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={(e) => {\n            const { files } = e.target;\n            const file = files && files[0];\n\n            if (file) {\n              const reader = new FileReader();\n              reader.readAsDataURL(file);\n              reader.onload = function () {\n                imageURL.current = reader.result as any;\n                setImageFile(file);\n              };\n              reader.onerror = function () {\n                imageURL.current = undefined;\n                setImageFile(undefined);\n              };\n            } else {\n              imageURL.current = undefined;\n              setImageFile(undefined);\n            }\n          }}\n        />\n        <Input\n          id=\"publishedAt\"\n          className=\"mt-4\"\n          label=\"Published At\"\n          type=\"date\"\n          value={dayjs(data.publishedAt).format(\"YYYY-MM-DD\")}\n          onChange={(value) => {\n            dispatch({ type: \"publishedAt\", payload: dayjs(value).toDate() });\n          }}\n        />\n        <div className=\"text-center mt-4\">\n          <button\n            disabled={loading}\n            className={`${\n              loading ? \"bg-gray-400\" : \"bg-purple-400 hover:bg-purple-600\"\n            } p-2 text-white rounded`}\n            onClick={() => {\n              onSubmit(cleanUpdateProductInput(data), imageFile);\n            }}\n          >\n            Submit\n          </button>\n        </div>\n        <Error error={!!error} message={error?.message} />\n      </div>\n      <div>\n        <div className=\"flex items-start\">\n          <div className=\"bg-yellow-50 rounded-lg ml-4\">\n            <div className=\"mb-2\">Product Categories</div>\n            <ItemList\n              limitHeight\n              name=\"categories\"\n              searchQuery={\"\"}\n              onLoadMore={() => {}}\n              onSearch={() => {}}\n              data={{\n                items: data.categories ?? [],\n                total: 0,\n                hasMore: false,\n              }}\n              actionComponent={(item) => {\n                return (\n                  <button\n                    className=\"text-red-400\"\n                    onClick={() => {\n                      dispatch({ type: \"removeCategory\", payload: item });\n                    }}\n                  >\n                    Remove\n                  </button>\n                );\n              }}\n            />\n          </div>\n          <div className=\"bg-yellow-50 rounded-lg ml-4\">\n            <div className=\"mb-2\">All Categories</div>\n            <ItemList\n              limitHeight\n              name=\"categories\"\n              data={cats.data?.categories}\n              onSearch={(q) => {\n                search.set(\"catq\", q);\n                const queries = search.toString();\n                history.push(`/products/${data.id}/edit?${queries}`);\n                cats.refetch({ searchQuery: search.get(\"catq\") });\n              }}\n              onLoadMore={() => {\n                cats.fetchMore({\n                  variables: { skip: cats.data?.categories.items.length },\n                });\n              }}\n              searchQuery={search.get(\"catq\") ?? \"\"}\n              highlight={(item) =>\n                !!data.categories?.find((c) => c.id === item.id)\n              }\n              actionComponent={(item) => {\n                const remove = data.categories?.find((c) => c.id === item.id);\n\n                return (\n                  <button\n                    className={remove ? \"text-red-400\" : \"text-blue-400\"}\n                    onClick={() => {\n                      dispatch({\n                        type: remove ? \"removeCategory\" : \"addCategory\",\n                        payload: item,\n                      });\n                    }}\n                  >\n                    {remove ? \"Remove\" : \"Add\"}\n                  </button>\n                );\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"flex items-start mt-4\">\n          <div className=\"bg-yellow-50 rounded-lg ml-4\">\n            <div className=\"mb-2\">Product Collections</div>\n            <ItemList\n              limitHeight\n              name=\"collections\"\n              searchQuery={\"\"}\n              onLoadMore={() => {}}\n              onSearch={() => {}}\n              data={{\n                items: data.collections ?? [],\n                total: 0,\n                hasMore: false,\n              }}\n              actionComponent={(item) => {\n                return (\n                  <button\n                    className=\"text-red-400\"\n                    onClick={() => {\n                      dispatch({\n                        type: \"removeCollection\",\n                        payload: item,\n                      });\n                    }}\n                  >\n                    Remove\n                  </button>\n                );\n              }}\n            />\n          </div>\n          <div className=\"bg-yellow-50 rounded-lg ml-4\">\n            <div className=\"mb-2\">All Collections</div>\n            <ItemList\n              limitHeight\n              name=\"collections\"\n              data={cols.data?.collections}\n              onSearch={(q) => {\n                search.set(\"colq\", q);\n                const queries = search.toString();\n                history.push(`/products/${data.id}/edit?${queries}`);\n                cols.refetch({ searchQuery: search.get(\"colq\") });\n              }}\n              onLoadMore={() => {\n                cats.fetchMore({\n                  variables: { skip: cols.data?.collections.items.length },\n                });\n              }}\n              searchQuery={search.get(\"colq\") ?? \"\"}\n              highlight={(item) =>\n                !!data.collections?.find((c) => c.id === item.id)\n              }\n              actionComponent={(item) => {\n                const remove = data.collections?.find((c) => c.id === item.id);\n\n                return (\n                  <button\n                    className={remove ? \"text-red-400\" : \"text-blue-400\"}\n                    onClick={() => {\n                      dispatch({\n                        type: remove ? \"removeCollection\" : \"addCollection\",\n                        payload: item,\n                      });\n                    }}\n                  >\n                    {remove ? \"Remove\" : \"Add\"}\n                  </button>\n                );\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"flex items-start mt-4\">\n          <div className=\"bg-yellow-50 rounded-lg ml-4\">\n            <div className=\"mb-2\">Product Author</div>\n            <div>{data.author?.name}</div>\n          </div>\n          <div className=\"bg-yellow-50 rounded-lg ml-4\">\n            <div className=\"mb-2\">All Authors</div>\n            <ItemList\n              limitHeight\n              name=\"publishers\"\n              data={auths.data?.authors}\n              onSearch={(q) => {\n                search.set(\"autq\", q);\n                const queries = search.toString();\n                history.push(`/products/${data.id}/edit?${queries}`);\n                auths.refetch({ searchQuery: search.get(\"autq\") });\n              }}\n              onLoadMore={() => {\n                cats.fetchMore({\n                  variables: { skip: auths.data?.authors.items.length },\n                });\n              }}\n              searchQuery={search.get(\"autq\") ?? \"\"}\n              highlight={(item) => data.author?.id === item.id}\n              actionComponent={(item) => {\n                const isSet = data.author?.id === item.id;\n\n                return (\n                  <button\n                    className={isSet ? \"text-gray-400\" : \"text-blue-400\"}\n                    onClick={() => {\n                      dispatch({\n                        type: \"author\",\n                        payload: item,\n                      });\n                    }}\n                  >\n                    Set\n                  </button>\n                );\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"flex items-start mt-4\">\n          <div className=\"bg-yellow-50 rounded-lg ml-4\">\n            <div className=\"mb-2\">Product Publisher</div>\n            <div>{data.publisher?.name}</div>\n          </div>\n          <div className=\"bg-yellow-50 rounded-lg ml-4\">\n            <div className=\"mb-2\">All Publishers</div>\n            <ItemList\n              limitHeight\n              name=\"publishers\"\n              data={pubs.data?.publishers}\n              onSearch={(q) => {\n                search.set(\"pubq\", q);\n                const queries = search.toString();\n                history.push(`/products/${data.id}/edit?${queries}`);\n                auths.refetch({ searchQuery: search.get(\"pubq\") });\n              }}\n              onLoadMore={() => {\n                cats.fetchMore({\n                  variables: { skip: auths.data?.authors.items.length },\n                });\n              }}\n              searchQuery={search.get(\"autq\") ?? \"\"}\n              highlight={(item) => data.publisher?.id === item.id}\n              actionComponent={(item) => {\n                const isSet = data.publisher?.id === item.id;\n\n                return (\n                  <button\n                    className={isSet ? \"text-gray-400\" : \"text-blue-400\"}\n                    onClick={() => {\n                      dispatch({\n                        type: \"publisher\",\n                        payload: item,\n                      });\n                    }}\n                  >\n                    Set\n                  </button>\n                );\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useState } from \"react\";\nimport { Link, Redirect, useHistory, useParams } from \"react-router-dom\";\nimport { BackButton } from \"../components/BackButton\";\nimport { Error } from \"../components/Error\";\nimport { Input } from \"../components/Input\";\nimport { ItemList } from \"../components/ItemList\";\nimport { Loading } from \"../components/Loading\";\nimport {\n  PublisherFragment,\n  usePublisherQuery,\n  useCreatePublisherMutation,\n  useProductsQuery,\n  useUpdatePublisherMutation,\n  useUpdateProductMutation,\n  usePublishersQuery,\n  useDeletePublisherMutation,\n} from \"../generated/graphql\";\nimport { useQueryParams } from \"../hooks/query\";\nimport { cleanUpdateProductInput } from \"../utils/product\";\n\nexport const PublishersPage = () => {\n  const search = useQueryParams();\n  const history = useHistory();\n\n  const { data, error, fetchMore, refetch } = usePublishersQuery({\n    variables: {\n      searchQuery: search.get(\"q\"),\n    },\n  });\n\n  const [deletePublisher] = useDeletePublisherMutation();\n\n  if (error) {\n    return <div>Something went wrong</div>;\n  }\n\n  return (\n    <div>\n      <div className=\"mb-4\">\n        <Link\n          to=\"/publishers/create\"\n          className=\"text-purple-400 hover:bg-purple-200 hover:text-black p-2 rounded\"\n        >\n          {\"+\"} Create\n        </Link>\n      </div>\n      <ItemList\n        name=\"publishers\"\n        data={data?.publishers}\n        onSearch={(q) => {\n          search.set(\"q\", q);\n          const queries = search.toString();\n          history.push(`/publishers?${queries}`);\n          refetch({ searchQuery: search.get(\"q\") });\n        }}\n        onLoadMore={() => {\n          fetchMore({\n            variables: { skip: data?.publishers.items.length },\n          });\n        }}\n        searchQuery={search.get(\"q\") ?? \"\"}\n        actionComponent={(item) => (\n          <button\n            className=\"text-red-400\"\n            onClick={async () => {\n              const name = prompt(\"Enter name to delete it\", \"\");\n              if (name === item.name) {\n                await deletePublisher({ variables: { id: item.id } });\n                refetch();\n              }\n            }}\n          >\n            Remove\n          </button>\n        )}\n      />\n    </div>\n  );\n};\n\nexport const PublisherEditPage = () => {\n  const { publisherID } = useParams<{ publisherID: string }>();\n  const search = useQueryParams();\n\n  const pub = usePublisherQuery({\n    variables: { id: publisherID, searchQuery: search.get(\"cq\") },\n  });\n\n  const prods = useProductsQuery({\n    variables: { searchQuery: search.get(\"pq\") },\n  });\n\n  const [updateProduct] = useUpdateProductMutation();\n\n  const history = useHistory();\n\n  if (pub.error) {\n    return <Error />;\n  }\n\n  return (\n    <div>\n      <BackButton />\n      <div className=\"flex items-start\">\n        {!pub.loading || pub.data?.publisher ? (\n          <Edit publisher={pub.data!.publisher!} />\n        ) : (\n          <Loading />\n        )}\n        <div className=\"bg-yellow-50 rounded-lg ml-4\">\n          <ItemList\n            limitHeight\n            name=\"products\"\n            data={pub.data?.publisher?.products}\n            onSearch={(q) => {\n              search.set(\"cq\", q);\n              const queries = search.toString();\n              history.push(`/publishers/${publisherID}/edit?${queries}`);\n              pub.refetch({ searchQuery: search.get(\"cq\") });\n            }}\n            onLoadMore={() => {\n              pub.fetchMore({\n                variables: { skip: pub.data?.publisher?.products.items.length },\n              });\n            }}\n            searchQuery={search.get(\"cq\") ?? \"\"}\n            actionComponent={(item) => (\n              <button\n                className=\"text-red-400\"\n                onClick={async () => {\n                  if (!window.confirm(\"Are you sure?\")) return;\n                  await updateProduct({\n                    variables: {\n                      data: {\n                        id: item.id,\n                        ...cleanUpdateProductInput(item),\n                        publisher: null,\n                      },\n                    },\n                  });\n                  pub.refetch();\n                  prods.refetch();\n                }}\n              >\n                Remove\n              </button>\n            )}\n          />\n        </div>\n        <div className=\"bg-yellow-50 rounded-lg ml-4\">\n          <ItemList\n            limitHeight\n            name=\"products\"\n            data={prods.data?.products}\n            onSearch={(q) => {\n              search.set(\"pq\", q);\n              const queries = search.toString();\n              history.push(`/publishers/${publisherID}/edit?${queries}`);\n              prods.refetch({ searchQuery: search.get(\"pq\") });\n            }}\n            onLoadMore={() => {\n              prods.fetchMore({\n                variables: { skip: prods.data?.products.items.length },\n              });\n            }}\n            searchQuery={search.get(\"pq\") ?? \"\"}\n            highlight={(item) => item.publisher?.id === publisherID}\n            actionComponent={(item) => {\n              const remove = item.publisher?.id === publisherID;\n              return (\n                <button\n                  className={remove ? \"text-red-400\" : \"text-blue-400\"}\n                  onClick={async () => {\n                    if (!window.confirm(\"Are you sure?\")) return;\n                    await updateProduct({\n                      variables: {\n                        data: {\n                          ...cleanUpdateProductInput({\n                            ...item,\n                            publisher: remove ? undefined : { id: publisherID },\n                          } as any),\n                          id: item.id,\n                        },\n                      },\n                    });\n                    pub.refetch();\n                    prods.refetch();\n                  }}\n                >\n                  {remove ? \"Remove\" : \"Add\"}\n                </button>\n              );\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const PublisherCreatePage = () => {\n  const [name, setName] = useState(\"\");\n  const [message, setMessage] = useState<string>();\n\n  const [createPublisher, { data, loading, error }] =\n    useCreatePublisherMutation();\n\n  if (data?.createPublisher) {\n    return <Redirect to={`/publishers/${data!.createPublisher.id}/edit`} />;\n  }\n\n  return (\n    <div>\n      <div className=\"mb-4\">\n        <BackButton />\n      </div>\n      <div>\n        <Input\n          id=\"name\"\n          label=\"Name\"\n          value={name}\n          onChange={(value) => {\n            setName(value);\n          }}\n        />\n        <div className=\"text-center mt-4\">\n          <button\n            disabled={loading}\n            className={`${\n              loading ? \"bg-gray-400\" : \"bg-purple-400 hover:bg-purple-600\"\n            } p-2 text-white rounded`}\n            onClick={async () => {\n              setMessage(undefined);\n              const res = await createPublisher({\n                variables: {\n                  data: {\n                    name,\n                  },\n                },\n              });\n              if (!res.errors) {\n                setMessage(\"Publisher created\");\n              }\n            }}\n          >\n            Create\n          </button>\n          <Loading loading={loading} />\n          <Error error={!!error} message={error?.message} />\n          <div className=\"text-green-400 mt-2\">{message}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Edit = ({ publisher }: { publisher: PublisherFragment }) => {\n  const [name, setName] = useState(publisher.name);\n  const [message, setMessage] = useState<string>();\n\n  const [updatePublisher, { loading, error }] = useUpdatePublisherMutation();\n\n  return (\n    <div>\n      <div>\n        <Input\n          id=\"name\"\n          label=\"Name\"\n          value={name}\n          onChange={(value) => {\n            setName(value);\n          }}\n        />\n        <div className=\"text-center mt-4\">\n          <button\n            disabled={loading}\n            className={`${\n              loading ? \"bg-gray-400\" : \"bg-purple-400 hover:bg-purple-600\"\n            } p-2 text-white rounded`}\n            onClick={async () => {\n              setMessage(undefined);\n              const res = await updatePublisher({\n                variables: {\n                  data: {\n                    id: publisher.id,\n                    name,\n                  },\n                },\n              });\n              if (!res.errors) {\n                setMessage(\"Publisher updated\");\n              }\n            }}\n          >\n            Update\n          </button>\n          <div className=\"text-red-400 mt-2\">{error?.message}</div>\n          <div className=\"text-green-400 mt-2\">{message}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import dayjs from \"dayjs\";\nimport { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { BackButton } from \"../components/BackButton\";\nimport { Error } from \"../components/Error\";\nimport { Input } from \"../components/Input\";\nimport { Loading } from \"../components/Loading\";\nimport { Select } from \"../components/Select\";\nimport {\n  OrderBy,\n  UserRequestFragment,\n  UserRequestStatus,\n  useUserRequestQuery,\n  useUserRequestsQuery,\n  useUpdateUserRequestMutation,\n} from \"../generated/graphql\";\n\nfunction getStatusColor(status: UserRequestStatus) {\n  return status === UserRequestStatus.Pending\n    ? \"bg-yellow-200\"\n    : status === UserRequestStatus.Failed\n    ? \"bg-red-200\"\n    : status === UserRequestStatus.Success\n    ? \"bg-green-200\"\n    : status === UserRequestStatus.Processing\n    ? \"bg-blue-200\"\n    : \"bg-purple-200\";\n}\n\nexport const UserRequestsPage = () => {\n  const { data, error, loading, refetch, fetchMore } = useUserRequestsQuery({\n    variables: {\n      order: [{ field: \"createdAt\", order: OrderBy.Desc }],\n    },\n  });\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      const take = data?.requests.items.length || 0;\n\n      refetch({\n        take,\n      });\n    }, 2_000);\n\n    return () => clearInterval(intervalId);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data?.requests.items.length]);\n\n  return (\n    <div>\n      <h1>All User Requests</h1>\n      <div className=\"flex mb-4 mt-2 rounded-lg\">\n        {Object.keys(UserRequestStatus).map((s) => (\n          <div\n            className={`h-1 w-12 ${getStatusColor(s as UserRequestStatus)}`}\n          />\n        ))}\n      </div>\n      {data?.requests.items.map((o) => (\n        <UserRequestItem key={o.id} userRequest={o} />\n      ))}\n      {data?.requests.hasMore ? (\n        <div className=\"text-center mt-2\">\n          <button\n            className=\"text-purple-400 hover:bg-purple-200 hover:text-black p-2 rounded\"\n            onClick={() => {\n              fetchMore({\n                variables: { skip: data.requests.items.length },\n              });\n            }}\n          >\n            Load more\n          </button>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nconst UserRequestItem = ({\n  userRequest,\n}: {\n  userRequest: UserRequestFragment;\n}) => {\n  const [currentStatus, setCurrentStatus] = useState(userRequest.status);\n  const [updateUserRequest, { loading, error }] =\n    useUpdateUserRequestMutation();\n  const [status, setStatus] = useState(userRequest.status);\n  const userRequestStatuses = Object.keys(UserRequestStatus);\n\n  useEffect(() => {\n    setCurrentStatus(userRequest.status);\n    setStatus(userRequest.status);\n  }, [userRequest.id, userRequest.status]);\n\n  return (\n    <div\n      className={`flex-1 p-2 rounded-lg mb-4 ${getStatusColor(\n        status\n      )} mr-4 max-w-xl`}\n    >\n      <div>User: {userRequest.user.name}</div>\n      <div>Phone: {userRequest.user.phone}</div>\n      <div>\n        Province:{\" \"}\n        {userRequest.user.province || (\n          <span className=\"text-red-400\">unspecified</span>\n        )}\n      </div>\n      <div>\n        Request content: <b>{userRequest.content}</b>\n      </div>\n      <div className=\"my-4 flex items-center overflow-hidden\">\n        <Select\n          id=\"status\"\n          label=\"Status\"\n          items={userRequestStatuses}\n          value={status ? userRequestStatuses.indexOf(status) : undefined}\n          onChange={(index) => {\n            setStatus(userRequestStatuses[index] as UserRequestStatus);\n          }}\n        />\n        <button\n          disabled={loading || currentStatus === status}\n          className={`${\n            loading\n              ? \"bg-gray-400\"\n              : currentStatus !== status\n              ? \"bg-purple-400 hover:bg-purple-600\"\n              : \"bg-gray-600\"\n          } p-2 text-white rounded-lg ml-4`}\n          onClick={async () => {\n            const res = await updateUserRequest({\n              variables: {\n                data: {\n                  id: userRequest.id,\n                  content: userRequest.content,\n                  status,\n                },\n              },\n            });\n            if (!res.errors) {\n              setCurrentStatus(status);\n            }\n          }}\n        >\n          Update\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport const UserRequestEditPage = () => {\n  const { userRequestID } = useParams<{ userRequestID: string }>();\n  const { loading, data, error } = useUserRequestQuery({\n    variables: { id: userRequestID },\n  });\n\n  return (\n    <div>\n      <BackButton />\n      {data?.request && (\n        <>\n          <Edit userRequest={data!.request} />\n          <div className=\"mt-4\">User: {data.request.user.name}</div>\n          <div>Phone: {data.request.user.phone}</div>\n          <div>\n            Province:{\" \"}\n            {data.request.user.province || (\n              <span className=\"text-red-400\">unspecified</span>\n            )}\n          </div>\n          <div>\n            Address:{\" \"}\n            {data.request.user.address || (\n              <span className=\"text-red-400\">unspecified</span>\n            )}\n          </div>\n          <div>\n            UserRequested on:{\" \"}\n            <b>\n              {dayjs(data.request.createdAt).format(\"dddd YYYY-MM-DD HH:mma\")}\n            </b>{\" \"}\n            {dayjs(data.request.createdAt).fromNow()}\n          </div>\n          <h1 className=\"mt-4\">Purchases</h1>\n          <div className=\"h-1 bg-yellow-200 rounded-lg mt-2 mb-4\" />\n        </>\n      )}\n      <Loading loading={loading} />\n      <Error error={!!error} message={error?.message} />\n    </div>\n  );\n};\n\nconst Edit = ({ userRequest }: { userRequest: UserRequestFragment }) => {\n  const [status, setStatus] = useState(userRequest.status);\n  const [message, setMessage] = useState<string>();\n  const [content, setContent] = useState<string>();\n\n  const [updateUserRequest, { loading, error }] =\n    useUpdateUserRequestMutation();\n  const userRequestStatuses = Object.keys(UserRequestStatus);\n\n  return (\n    <div>\n      <div>\n        <div className=\"text-center mt-4\">\n          <Input\n            id=\"content\"\n            label=\"Content\"\n            onChange={setContent}\n            value={content}\n          />\n          <Select\n            id=\"status\"\n            className={`mb-4 ${getStatusColor(status)} rounded-lg pl-2`}\n            label=\"Status\"\n            items={userRequestStatuses}\n            value={status ? userRequestStatuses.indexOf(status) : undefined}\n            onChange={(index) => {\n              setStatus(userRequestStatuses[index] as UserRequestStatus);\n            }}\n          />\n          <button\n            disabled={loading}\n            className={`${\n              loading ? \"bg-gray-400\" : \"bg-purple-400 hover:bg-purple-600\"\n            } p-2 text-white rounded`}\n            onClick={async () => {\n              setMessage(undefined);\n              const res = await updateUserRequest({\n                variables: {\n                  data: {\n                    id: userRequest.id,\n                    content: content ?? \"\",\n                    status,\n                  },\n                },\n              });\n              if (!res.errors) {\n                setMessage(\"UserRequest updated\");\n              }\n            }}\n          >\n            Update\n          </button>\n          <div className=\"text-red-400 mt-2\">{error?.message}</div>\n          <div className=\"text-green-400 mt-2\">{message}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { ApolloError } from \"@apollo/client\";\nimport { useReducer, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { BackButton } from \"../components/BackButton\";\nimport { Error } from \"../components/Error\";\nimport { Input } from \"../components/Input\";\nimport { ItemList } from \"../components/ItemList\";\nimport { Loading } from \"../components/Loading\";\nimport {\n  CreateUserInput,\n  useCreateUserMutation,\n  useDeleteUserMutation,\n  UserFragment,\n  useUpdateUserMutation,\n  useUserQuery,\n  useUsersQuery,\n} from \"../generated/graphql\";\nimport { useQueryParams } from \"../hooks/query\";\n\nexport const UsersPage = () => {\n  const search = useQueryParams();\n  const { data, loading, error, refetch, fetchMore } = useUsersQuery({\n    variables: { searchQuery: search.get(\"q\") },\n  });\n  const [deleteUser] = useDeleteUserMutation();\n\n  const history = useHistory();\n  if (error) {\n    return <div>something went wrong</div>;\n  }\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <div className=\"mb-4\">\n        <Link\n          to=\"/users/create\"\n          className=\"text-purple-400 hover:bg-purple-200 hover:text-black p-2 rounded\"\n        >\n          {\"+\"} Create\n        </Link>\n      </div>\n      <ItemList\n        name=\"users\"\n        data={data?.users}\n        onSearch={(q) => {\n          search.set(\"q\", q);\n          const queries = search.toString();\n          history.push(`/users?${queries}`);\n          refetch({ searchQuery: search.get(\"q\") });\n        }}\n        onLoadMore={() => {\n          fetchMore({\n            variables: { skip: data?.users.items.length },\n          });\n        }}\n        searchQuery={search.get(\"q\") ?? \"\"}\n        actionComponent={(item) => (\n          <button\n            className=\"text-red-400\"\n            onClick={async () => {\n              const name = prompt(\"Enter name\", \"\");\n              if (name === item.name) {\n                await deleteUser({ variables: { id: item.id } });\n                refetch();\n              }\n            }}\n          >\n            Remove\n          </button>\n        )}\n      />\n    </div>\n  );\n};\n\nexport const UserEditPage = () => {\n  const { userID } = useParams<{ userID: string }>();\n\n  const { data, loading, error } = useUserQuery({\n    variables: { id: userID },\n  });\n\n  const [updateUser, user] = useUpdateUserMutation();\n  const [message, setMessage] = useState<string>();\n\n  if (error) {\n    return <Error />;\n  }\n\n  return (\n    <div>\n      <BackButton />\n      {!loading || data?.user ? (\n        <Edit\n          user={data!.user!}\n          loading={user.loading}\n          error={user.error}\n          onSubmit={async (data) => {\n            setMessage(undefined);\n            const res = await updateUser({\n              variables: { data: { ...data, id: userID } },\n            });\n            if (!res.errors) {\n              setMessage(\"User updated\");\n            }\n          }}\n        />\n      ) : (\n        <Loading />\n      )}\n      <div className=\"text-green-400\">{message}</div>\n    </div>\n  );\n};\n\nexport const UserCreatePage = () => {\n  const [createUser, { loading, error }] = useCreateUserMutation();\n  const [message, setMessage] = useState<string>();\n\n  return (\n    <div>\n      <BackButton />\n      <Edit\n        loading={loading}\n        error={error}\n        onSubmit={async (data) => {\n          setMessage(undefined);\n          const res = await createUser({ variables: { data: data } });\n          if (!res.errors) {\n            setMessage(\"user created\");\n          }\n        }}\n      />\n      <div className=\"text-green-400\">{message}</div>\n    </div>\n  );\n};\n\ntype EditUserAction =\n  | {\n      type: \"name\" | \"phone\" | \"password\" | \"province\" | \"address\";\n      payload: string;\n    }\n  | { type: \"confirmed\"; payload: boolean };\n\nfunction editReducer(\n  state: Partial<UserFragment>,\n  action: EditUserAction\n): Partial<UserFragment & { password: string }> {\n  switch (action.type) {\n    case \"name\":\n      return { ...state, name: action.payload };\n    case \"phone\":\n      return { ...state, phone: action.payload };\n    case \"password\":\n      return { ...state, password: action.payload };\n    case \"province\":\n      return { ...state, province: action.payload };\n    case \"address\":\n      return { ...state, address: action.payload };\n    case \"confirmed\":\n      return { ...state, confirmed: action.payload };\n    default:\n      return state;\n  }\n}\n\nconst Edit = ({\n  user,\n  onSubmit,\n  error,\n  loading,\n}: {\n  user?: UserFragment;\n  error?: ApolloError;\n  loading: boolean;\n  onSubmit: (data: CreateUserInput) => void;\n}) => {\n  const [data, dispatch] = useReducer(\n    editReducer,\n    user\n      ? {\n          ...user,\n          confirmed:\n            user.confirmed === null || user.confirmed === undefined\n              ? true\n              : user.confirmed,\n        }\n      : {}\n  );\n\n  return (\n    <div>\n      <div>\n        <Input\n          className=\"mb-4\"\n          id=\"name\"\n          label=\"Name\"\n          value={data.name}\n          onChange={(value) => {\n            dispatch({ type: \"name\", payload: value });\n          }}\n        />\n        <Input\n          className=\"mb-4\"\n          id=\"phone\"\n          label=\"phone\"\n          value={data.phone}\n          onChange={(value) => {\n            dispatch({ type: \"phone\", payload: value });\n          }}\n        />\n        <Input\n          className=\"mb-4\"\n          id=\"province\"\n          label=\"province\"\n          value={data.province ?? \"\"}\n          onChange={(value) => {\n            dispatch({ type: \"province\", payload: value });\n          }}\n        />\n        <Input\n          className=\"mb-4\"\n          id=\"address\"\n          label=\"address\"\n          value={data.address ?? \"\"}\n          onChange={(value) => {\n            dispatch({ type: \"address\", payload: value });\n          }}\n        />\n        <Input\n          className=\"mb-4\"\n          id=\"password\"\n          label=\"Password\"\n          value={data.password ?? \"\"}\n          onChange={(value) => {\n            dispatch({ type: \"password\", payload: value });\n          }}\n        />\n        <label className=\"mr-4\" htmlFor=\"confirmed\">\n          Confirmed\n        </label>\n        <input\n          className=\"mb-4\"\n          type=\"checkbox\"\n          value=\"confirmed\"\n          checked={data.confirmed}\n          onChange={(e) => {\n            dispatch({ type: \"confirmed\", payload: e.target.checked });\n          }}\n        />\n        <div className=\"text-center mt-4\">\n          <button\n            disabled={loading}\n            className={`${\n              loading ? \"bg-gray-400\" : \"bg-purple-400 hover:bg-purple-600\"\n            } p-2 text-white rounded`}\n            onClick={() => {\n              if (!data.name || !data.phone)\n                throw new window.Error(\"missing required fields\");\n              onSubmit({\n                name: data.name,\n                password: (data.password ?? undefined) as any,\n                phone: data.phone,\n                address: data.address,\n                province: data.province,\n                confirmed: data.confirmed,\n              });\n            }}\n          >\n            Submit\n          </button>\n          <div className=\"text-red-400 mt-2\">{error?.message}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { Link, Switch } from \"react-router-dom\";\nimport { Error } from \"../components/Error\";\nimport { Loading } from \"../components/Loading\";\nimport { ProtectedRoute } from \"../components/ProtectedRoute\";\nimport { Sidebar } from \"../components/Sidebar\";\nimport { useDashboardQuery } from \"../generated/graphql\";\nimport { AdminCreatePage, AdminEditPage, AdminsPage } from \"./AdminsPage\";\nimport { AuthorCreatePage, AuthorEditPage, AuthorsPage } from \"./AuthorsPage\";\nimport {\n  CategoriesPage,\n  CategoryCreatePage,\n  CategoryEditPage,\n} from \"./CategoriesPage\";\nimport {\n  CollectionCreatePage,\n  CollectionEditPage,\n  CollectionsPage,\n} from \"./CollectionsPage\";\nimport { LogoutPage } from \"./LogoutPage\";\nimport { OrderEditPage, OrdersPage } from \"./OrdersPage\";\nimport {\n  ProductCreatePage,\n  ProductEditPage,\n  ProductsPage,\n} from \"./ProductsPage\";\nimport {\n  PublisherCreatePage,\n  PublisherEditPage,\n  PublishersPage,\n} from \"./PublishersPage\";\nimport { UserRequestsPage } from \"./RequestsPages\";\nimport { UserCreatePage, UserEditPage, UsersPage } from \"./UsersPage\";\n\nexport const HomePage = () => {\n  return (\n    <div className=\"flex\">\n      <Sidebar />\n      <div className=\"ml-6 p-4\">\n        <Switch>\n          <ProtectedRoute path=\"/orders/:orderID/edit\">\n            <OrderEditPage />\n          </ProtectedRoute>\n          <ProtectedRoute path=\"/orders\">\n            <OrdersPage />\n          </ProtectedRoute>\n          <ProtectedRoute path=\"/requests\">\n            <UserRequestsPage />\n          </ProtectedRoute>\n          <ProtectedRoute path=\"/users/:userID/edit\">\n            <UserEditPage />\n          </ProtectedRoute>\n          <ProtectedRoute path=\"/users/create\">\n            <UserCreatePage />\n          </ProtectedRoute>\n          <ProtectedRoute path=\"/users\">\n            <UsersPage />\n          </ProtectedRoute>\n          <ProtectedRoute path=\"/admins/:adminID/edit\">\n            <AdminEditPage />\n          </ProtectedRoute>\n          <ProtectedRoute path=\"/admins/create\">\n            <AdminCreatePage />\n          </ProtectedRoute>\n          <ProtectedRoute path=\"/admins\">\n            <AdminsPage />\n          </ProtectedRoute>\n          <ProtectedRoute path=\"/publishers/:publisherID/edit\">\n            <PublisherEditPage />\n          </ProtectedRoute>\n          <ProtectedRoute path=\"/publishers/create\">\n            <PublisherCreatePage />\n          </ProtectedRoute>\n          <ProtectedRoute path=\"/publishers\">\n            <PublishersPage />\n          </ProtectedRoute>\n          <ProtectedRoute path=\"/authors/:authorID/edit\">\n            <AuthorEditPage />\n          </ProtectedRoute>\n          <ProtectedRoute path=\"/authors/create\">\n            <AuthorCreatePage />\n          </ProtectedRoute>\n          <ProtectedRoute path=\"/authors\">\n            <AuthorsPage />\n          </ProtectedRoute>\n          <ProtectedRoute path=\"/collections/:collectionID/edit\">\n            <CollectionEditPage />\n          </ProtectedRoute>\n          <ProtectedRoute path=\"/collections/create\">\n            <CollectionCreatePage />\n          </ProtectedRoute>\n          <ProtectedRoute path=\"/collections\">\n            <CollectionsPage />\n          </ProtectedRoute>\n          <ProtectedRoute path=\"/categories/create\">\n            <CategoryCreatePage />\n          </ProtectedRoute>\n          <ProtectedRoute path=\"/categories/:categoryID/edit\">\n            <CategoryEditPage />\n          </ProtectedRoute>\n          <ProtectedRoute path=\"/categories\">\n            <CategoriesPage />\n          </ProtectedRoute>\n          <ProtectedRoute path=\"/products/:productID/edit\">\n            <ProductEditPage />\n          </ProtectedRoute>\n          <ProtectedRoute path=\"/products/create\">\n            <ProductCreatePage />\n          </ProtectedRoute>\n          <ProtectedRoute path=\"/products\">\n            <ProductsPage />\n          </ProtectedRoute>\n          <ProtectedRoute path=\"/logout\">\n            <LogoutPage />\n          </ProtectedRoute>\n          <ProtectedRoute path=\"/\">\n            <DashboardPage />\n          </ProtectedRoute>\n        </Switch>\n      </div>\n    </div>\n  );\n};\n\nconst DashboardPage = () => {\n  const { data, loading, error } = useDashboardQuery();\n\n  return (\n    <div>\n      <Loading loading={loading} />\n      <Error error={!!error} message={error?.message} />\n      {data && (\n        <div className=\"flex flex-wrap\">\n          <Item\n            name=\"Users\"\n            total={data.users.total}\n            color=\"red-400\"\n            className=\"mr-6 mb-6\"\n          />\n          <Item\n            name=\"Products\"\n            total={data.products.total}\n            color=\"blue-400\"\n            className=\"mr-6 mb-6\"\n          />\n          <Item\n            name=\"Orders\"\n            total={data.orders.total}\n            color=\"yellow-400\"\n            className=\"mr-6 mb-6\"\n          />\n          <Item\n            name=\"Requests\"\n            total={data.requests.total}\n            color=\"green-400\"\n            className=\"mr-6 mb-6\"\n          />\n          <Item\n            name=\"Categories\"\n            total={data.categories.total}\n            color=\"purple-400\"\n            className=\"mr-6 mb-6\"\n          />\n          <Item\n            name=\"Collections\"\n            total={data.collections.total}\n            color=\"indigo-400\"\n            className=\"mr-6 mb-6\"\n          />\n          <Item\n            name=\"Authors\"\n            total={data.authors.total}\n            color=\"pink-400\"\n            className=\"mr-6 mb-6\"\n          />\n          <Item\n            name=\"Publishers\"\n            total={data.publishers.total}\n            color=\"pink-600\"\n            className=\"mr-6 mb-6\"\n          />\n          <Item\n            name=\"Admins\"\n            total={data.admins.total}\n            color=\"red-300\"\n            className=\"mr-6 mb-6\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst Item = ({\n  name,\n  total,\n  color,\n  className,\n}: {\n  name: string;\n  total: number;\n  color: string;\n  className?: string;\n}) => {\n  return (\n    <Link\n      to={`/${name.toLowerCase()}`}\n      className={`bg-${color} w-48 h-48 flex flex-col items-center justify-around rounded-xl ${\n        className ?? \"\"\n      }`}\n    >\n      <h1 className=\"text-white text-3xl\">{name}</h1>\n      <div className=\"text-white text-5xl\">{total}</div>\n    </Link>\n  );\n};\n","import { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { useLoginMutation } from \"../generated/graphql\";\n\nexport const LoginPage = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [login, { data, loading, error }] = useLoginMutation();\n\n  if (data?.loginAdmin?.accessToken || localStorage.getItem(\"token\")) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <div className=\"flex flex-col items-center p-4\">\n      <input\n        className=\"p-2 mb-4\"\n        type=\"email\"\n        disabled={loading}\n        name=\"username\"\n        placeholder=\"Email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n      />\n      <input\n        className=\"p-2 mb-4\"\n        type=\"password\"\n        name=\"password\"\n        disabled={loading}\n        placeholder=\"Password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n      />\n      {error && <div style={{ color: \"red\" }}>something went wrong</div>}\n      <button\n        className={`p-2 mb-4 ${loading ? \"text-gray-400\" : \"text-blue-400\"}`}\n        disabled={loading}\n        type=\"button\"\n        onClick={async (e) => {\n          e.preventDefault();\n          const res = await login({ variables: { data: { email, password } } });\n          if (res.data?.loginAdmin.accessToken) {\n            localStorage.setItem(\"token\", res.data?.loginAdmin.accessToken);\n          }\n        }}\n      >\n        Login\n      </button>\n    </div>\n  );\n};\n","import { Router, Route, Switch } from \"react-router-dom\";\nimport { ProtectedRoute } from \"./components/ProtectedRoute\";\nimport { HomePage } from \"./pages/HomePage\";\nimport { LoginPage } from \"./pages/LoginPage\";\nimport { createBrowserHistory } from \"history\";\n\nexport const history = createBrowserHistory({\n  basename: process.env.PUBLIC_URL,\n});\n\nexport const AppRouter: React.FC = ({ children }) => {\n  return (\n    <Router history={history}>\n      {children}\n      <Switch>\n        <Route path=\"/login\">\n          <LoginPage />\n        </Route>\n        <ProtectedRoute path=\"/\">\n          <HomePage />\n        </ProtectedRoute>\n      </Switch>\n    </Router>\n  );\n};\n","import { ApolloClient, from, InMemoryCache } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { createUploadLink } from \"apollo-upload-client\";\nimport { logout } from \"./logout\";\n\nconst httpLink = createUploadLink({\n  uri: process.env.GRAPHQL_URL ?? \"http://localhost:4000/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"token\");\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst logoutLink = onError(({ networkError }) => {\n  if ((networkError as any)?.statusCode === 401) {\n    logout();\n  }\n});\n\nconst paginationPolicy = {\n  keyArgs: [\"order\", \"searchQuery\"],\n  merge: (existing: any, incoming: any) => {\n    return {\n      ...incoming,\n      items: [...(existing?.items ?? []), ...(incoming?.items ?? [])],\n    };\n  },\n};\n\nexport const client = new ApolloClient({\n  link: from([logoutLink, authLink, httpLink]),\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          categories: paginationPolicy,\n          collections: paginationPolicy,\n          products: paginationPolicy,\n          users: paginationPolicy,\n          authors: paginationPolicy,\n          publishers: paginationPolicy,\n          admins: paginationPolicy,\n          requests: paginationPolicy,\n          orders: paginationPolicy,\n        },\n      },\n      Category: {\n        fields: {\n          products: paginationPolicy,\n        },\n      },\n    },\n  }),\n});\n","import { ApolloProvider } from \"@apollo/client\";\nimport { AppRouter } from \"./AppRouter\";\nimport { client } from \"./utils/client\";\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <AppRouter />\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\ndayjs.extend(relativeTime);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}